diff --git a/Makefile b/Makefile
index 036320d..8d57ed0 100644
--- a/Makefile
+++ b/Makefile
@@ -33,18 +33,21 @@
 # makefiles. Of course, you need first set the GCC compiler path/name, the
 # simulator path/name and the board model:
 #
-   ARCH = rv32e
+   ARCH = rv32i
+#	ABI = ilp32e
 #  ARCH = rv32i
 #ENDIAN = _le
 #ENDIAN = _be
 # CROSS = riscv-elf
-# CROSS = riscv32-unknown-elf
+ CROSS = riscv32-unknown-elf
 # CROSS = riscv32-embedded-elf
-  CROSS = riscv32-embedded$(ENDIAN)-elf
-#CCPATH = /usr/local/share/toolchain-$(CROSS)/bin
- CCPATH = /usr/local/share/gcc-$(CROSS)/bin/
+#  CROSS = riscv32-embedded$(ENDIAN)-elf
+  CCPATH = /opt/riscv-exp/bin
+# CCPATH = /usr/local/share/gcc-$(CROSS)/bin/
  ICARUS = /usr/local/bin/iverilog
- BOARD  = avnet_microboard_lx9
+ #BOARD  = avnet_microboard_lx9
+BOARD = qmtech_spartan7_s15
+		
 #BOARD  = xilinx_ac701_a200
 #BOARD  = qmtech_sdram_lx16
 #
@@ -59,7 +62,7 @@ default: all
 
 all:
 	make -C src darksocv.rom    CROSS=$(CROSS) CCPATH=$(CCPATH) ARCH=$(ARCH)
-	make -C src darksocv.ram    CROSS=$(CROSS) CCPATH=$(CCPATH) ARCH=$(ARCH)
+	make -C src darksocv.ram    CROSS=$(CROSS) CCPATH=$(CCPATH) ARCH=$(ARCH) 
 	make -C sim all             ICARUS=$(ICARUS) 
 	make -C boards all          BOARD=$(BOARD)
 
diff --git a/darkriskout.txt b/darkriskout.txt
new file mode 100644
index 0000000..2fb7ec4
--- /dev/null
+++ b/darkriskout.txt
@@ -0,0 +1,1089 @@
+
+./src/darksocv.o:     file format elf32-littleriscv
+
+
+Disassembly of section .text:
+
+00000000 <boot>:
+   0:	000017b7          	lui	a5,0x1
+   4:	ff410113          	addi	sp,sp,-12
+   8:	00812223          	sw	s0,4(sp)
+   c:	4f47a403          	lw	s0,1268(a5) # 14f4 <threads>
+  10:	00112423          	sw	ra,8(sp)
+  14:	00140713          	addi	a4,s0,1
+  18:	00147413          	andi	s0,s0,1
+  1c:	03040513          	addi	a0,s0,48
+  20:	4ee7aa23          	sw	a4,1268(a5)
+  24:	08c000ef          	jal	ra,b0 <putchar>
+  28:	800007b7          	lui	a5,0x80000
+  2c:	00078793          	mv	a5,a5
+  30:	00041e63          	bnez	s0,4c <boot+0x4c>
+  34:	03100713          	li	a4,49
+  38:	00e12023          	sw	a4,0(sp)
+  3c:	00100713          	li	a4,1
+  40:	00e7a623          	sw	a4,12(a5) # 8000000c <io+0xc>
+  44:	788000ef          	jal	ra,7cc <main>
+  48:	ffdff06f          	j	44 <boot+0x44>
+  4c:	00012703          	lw	a4,0(sp)
+  50:	27100693          	li	a3,625
+  54:	00e7a623          	sw	a4,12(a5)
+  58:	00068713          	mv	a4,a3
+  5c:	00000013          	nop
+  60:	00000013          	nop
+  64:	00000013          	nop
+  68:	00000013          	nop
+  6c:	fff70713          	addi	a4,a4,-1
+  70:	fe0716e3          	bnez	a4,5c <boot+0x5c>
+  74:	0087d703          	lhu	a4,8(a5)
+  78:	00174713          	xori	a4,a4,1
+  7c:	00e79423          	sh	a4,8(a5)
+  80:	00a7d703          	lhu	a4,10(a5)
+  84:	00174713          	xori	a4,a4,1
+  88:	00e79523          	sh	a4,10(a5)
+  8c:	000781a3          	sb	zero,3(a5)
+  90:	fc9ff06f          	j	58 <boot+0x58>
+
+00000094 <getchar>:
+  94:	800007b7          	lui	a5,0x80000
+  98:	00078793          	mv	a5,a5
+  9c:	0047c703          	lbu	a4,4(a5) # 80000004 <io+0x4>
+  a0:	00277713          	andi	a4,a4,2
+  a4:	fe070ce3          	beqz	a4,9c <getchar+0x8>
+  a8:	0057c503          	lbu	a0,5(a5)
+  ac:	00008067          	ret
+
+000000b0 <putchar>:
+  b0:	800007b7          	lui	a5,0x80000
+  b4:	00a00713          	li	a4,10
+  b8:	00078793          	mv	a5,a5
+  bc:	00e51c63          	bne	a0,a4,d4 <putchar+0x24>
+  c0:	0047c703          	lbu	a4,4(a5) # 80000004 <io+0x4>
+  c4:	00177713          	andi	a4,a4,1
+  c8:	fe071ce3          	bnez	a4,c0 <putchar+0x10>
+  cc:	00d00713          	li	a4,13
+  d0:	00e782a3          	sb	a4,5(a5)
+  d4:	0047c703          	lbu	a4,4(a5)
+  d8:	00177713          	andi	a4,a4,1
+  dc:	fe071ce3          	bnez	a4,d4 <putchar+0x24>
+  e0:	0ff57713          	andi	a4,a0,255
+  e4:	00e782a3          	sb	a4,5(a5)
+  e8:	00070513          	mv	a0,a4
+  ec:	00008067          	ret
+
+000000f0 <gets>:
+  f0:	fe810113          	addi	sp,sp,-24
+  f4:	00812823          	sw	s0,16(sp)
+  f8:	00912623          	sw	s1,12(sp)
+  fc:	00112a23          	sw	ra,20(sp)
+ 100:	00050493          	mv	s1,a0
+ 104:	00050413          	mv	s0,a0
+ 108:	fff58713          	addi	a4,a1,-1
+ 10c:	02070063          	beqz	a4,12c <gets+0x3c>
+ 110:	00b12223          	sw	a1,4(sp)
+ 114:	00e12023          	sw	a4,0(sp)
+ 118:	f7dff0ef          	jal	ra,94 <getchar>
+ 11c:	00a00693          	li	a3,10
+ 120:	00012703          	lw	a4,0(sp)
+ 124:	00412583          	lw	a1,4(sp)
+ 128:	02d51863          	bne	a0,a3,158 <gets+0x68>
+ 12c:	00a00513          	li	a0,10
+ 130:	f81ff0ef          	jal	ra,b0 <putchar>
+ 134:	00040023          	sb	zero,0(s0)
+ 138:	00941463          	bne	s0,s1,140 <gets+0x50>
+ 13c:	00000493          	li	s1,0
+ 140:	01412083          	lw	ra,20(sp)
+ 144:	01012403          	lw	s0,16(sp)
+ 148:	00048513          	mv	a0,s1
+ 14c:	00c12483          	lw	s1,12(sp)
+ 150:	01810113          	addi	sp,sp,24
+ 154:	00008067          	ret
+ 158:	00b12423          	sw	a1,8(sp)
+ 15c:	00e12223          	sw	a4,4(sp)
+ 160:	00d00693          	li	a3,13
+ 164:	00a12023          	sw	a0,0(sp)
+ 168:	fcd502e3          	beq	a0,a3,12c <gets+0x3c>
+ 16c:	f45ff0ef          	jal	ra,b0 <putchar>
+ 170:	00012783          	lw	a5,0(sp)
+ 174:	00800693          	li	a3,8
+ 178:	00412703          	lw	a4,4(sp)
+ 17c:	00812583          	lw	a1,8(sp)
+ 180:	00d79e63          	bne	a5,a3,19c <gets+0xac>
+ 184:	00940863          	beq	s0,s1,194 <gets+0xa4>
+ 188:	fe040fa3          	sb	zero,-1(s0)
+ 18c:	00058713          	mv	a4,a1
+ 190:	fff40413          	addi	s0,s0,-1
+ 194:	00070593          	mv	a1,a4
+ 198:	f71ff06f          	j	108 <gets+0x18>
+ 19c:	00f40023          	sb	a5,0(s0)
+ 1a0:	00140413          	addi	s0,s0,1
+ 1a4:	ff1ff06f          	j	194 <gets+0xa4>
+
+000001a8 <putstr>:
+ 1a8:	ff810113          	addi	sp,sp,-8
+ 1ac:	00812023          	sw	s0,0(sp)
+ 1b0:	00112223          	sw	ra,4(sp)
+ 1b4:	00050413          	mv	s0,a0
+ 1b8:	00051663          	bnez	a0,1c4 <putstr+0x1c>
+ 1bc:	00001437          	lui	s0,0x1
+ 1c0:	08c40413          	addi	s0,s0,140 # 108c <board_name+0x8c>
+ 1c4:	00044503          	lbu	a0,0(s0)
+ 1c8:	00051a63          	bnez	a0,1dc <putstr+0x34>
+ 1cc:	00412083          	lw	ra,4(sp)
+ 1d0:	00012403          	lw	s0,0(sp)
+ 1d4:	00810113          	addi	sp,sp,8
+ 1d8:	00008067          	ret
+ 1dc:	00140413          	addi	s0,s0,1
+ 1e0:	ed1ff0ef          	jal	ra,b0 <putchar>
+ 1e4:	fe1ff06f          	j	1c4 <putstr+0x1c>
+
+000001e8 <puts>:
+ 1e8:	ffc10113          	addi	sp,sp,-4
+ 1ec:	00112023          	sw	ra,0(sp)
+ 1f0:	fb9ff0ef          	jal	ra,1a8 <putstr>
+ 1f4:	00012083          	lw	ra,0(sp)
+ 1f8:	00a00513          	li	a0,10
+ 1fc:	00410113          	addi	sp,sp,4
+ 200:	eb1ff06f          	j	b0 <putchar>
+
+00000204 <putdx>:
+ 204:	fac10113          	addi	sp,sp,-84
+ 208:	00b12023          	sw	a1,0(sp)
+ 20c:	000015b7          	lui	a1,0x1
+ 210:	04812623          	sw	s0,76(sp)
+ 214:	04912423          	sw	s1,72(sp)
+ 218:	02c00613          	li	a2,44
+ 21c:	0a858493          	addi	s1,a1,168 # 10a8 <board_name+0xa8>
+ 220:	00050413          	mv	s0,a0
+ 224:	0a858593          	addi	a1,a1,168
+ 228:	01c10513          	addi	a0,sp,28
+ 22c:	04112823          	sw	ra,80(sp)
+ 230:	1fc000ef          	jal	ra,42c <memcpy>
+ 234:	01400613          	li	a2,20
+ 238:	02c48593          	addi	a1,s1,44
+ 23c:	00810513          	addi	a0,sp,8
+ 240:	1ec000ef          	jal	ra,42c <memcpy>
+ 244:	00012703          	lw	a4,0(sp)
+ 248:	00810793          	addi	a5,sp,8
+ 24c:	00070463          	beqz	a4,254 <putdx+0x50>
+ 250:	01c10793          	addi	a5,sp,28
+ 254:	01800493          	li	s1,24
+ 258:	0007a583          	lw	a1,0(a5)
+ 25c:	00059c63          	bnez	a1,274 <putdx+0x70>
+ 260:	05012083          	lw	ra,80(sp)
+ 264:	04c12403          	lw	s0,76(sp)
+ 268:	04812483          	lw	s1,72(sp)
+ 26c:	05410113          	addi	sp,sp,84
+ 270:	00008067          	ret
+ 274:	00100713          	li	a4,1
+ 278:	00e58463          	beq	a1,a4,280 <putdx+0x7c>
+ 27c:	04b46063          	bltu	s0,a1,2bc <putdx+0xb8>
+ 280:	00012683          	lw	a3,0(sp)
+ 284:	00001737          	lui	a4,0x1
+ 288:	00f12223          	sw	a5,4(sp)
+ 28c:	09470713          	addi	a4,a4,148 # 1094 <board_name+0x94>
+ 290:	02068c63          	beqz	a3,2c8 <putdx+0xc4>
+ 294:	00040513          	mv	a0,s0
+ 298:	400000ef          	jal	ra,698 <__udivsi3>
+ 29c:	00a00593          	li	a1,10
+ 2a0:	400000ef          	jal	ra,6a0 <__umodsi3>
+ 2a4:	000017b7          	lui	a5,0x1
+ 2a8:	09478713          	addi	a4,a5,148 # 1094 <board_name+0x94>
+ 2ac:	00a70733          	add	a4,a4,a0
+ 2b0:	00074503          	lbu	a0,0(a4)
+ 2b4:	dfdff0ef          	jal	ra,b0 <putchar>
+ 2b8:	00412783          	lw	a5,4(sp)
+ 2bc:	ff848493          	addi	s1,s1,-8
+ 2c0:	00478793          	addi	a5,a5,4
+ 2c4:	f95ff06f          	j	258 <putdx+0x54>
+ 2c8:	00448693          	addi	a3,s1,4
+ 2cc:	00d456b3          	srl	a3,s0,a3
+ 2d0:	00f6f693          	andi	a3,a3,15
+ 2d4:	00d706b3          	add	a3,a4,a3
+ 2d8:	0006c503          	lbu	a0,0(a3)
+ 2dc:	dd5ff0ef          	jal	ra,b0 <putchar>
+ 2e0:	00945533          	srl	a0,s0,s1
+ 2e4:	00f57513          	andi	a0,a0,15
+ 2e8:	fbdff06f          	j	2a4 <putdx+0xa0>
+
+000002ec <putx>:
+ 2ec:	00000593          	li	a1,0
+ 2f0:	f15ff06f          	j	204 <putdx>
+
+000002f4 <putd>:
+ 2f4:	00100593          	li	a1,1
+ 2f8:	f0dff06f          	j	204 <putdx>
+
+000002fc <printf>:
+ 2fc:	fdc10113          	addi	sp,sp,-36
+ 300:	02f12023          	sw	a5,32(sp)
+ 304:	01010793          	addi	a5,sp,16
+ 308:	00812423          	sw	s0,8(sp)
+ 30c:	00112623          	sw	ra,12(sp)
+ 310:	00912223          	sw	s1,4(sp)
+ 314:	00050413          	mv	s0,a0
+ 318:	00b12823          	sw	a1,16(sp)
+ 31c:	00c12a23          	sw	a2,20(sp)
+ 320:	00d12c23          	sw	a3,24(sp)
+ 324:	00e12e23          	sw	a4,28(sp)
+ 328:	00f12023          	sw	a5,0(sp)
+ 32c:	00044503          	lbu	a0,0(s0)
+ 330:	00051c63          	bnez	a0,348 <printf+0x4c>
+ 334:	00c12083          	lw	ra,12(sp)
+ 338:	00812403          	lw	s0,8(sp)
+ 33c:	00412483          	lw	s1,4(sp)
+ 340:	02410113          	addi	sp,sp,36
+ 344:	00008067          	ret
+ 348:	02500793          	li	a5,37
+ 34c:	00140493          	addi	s1,s0,1
+ 350:	06f51a63          	bne	a0,a5,3c4 <printf+0xc8>
+ 354:	00144503          	lbu	a0,1(s0)
+ 358:	07300793          	li	a5,115
+ 35c:	02f51063          	bne	a0,a5,37c <printf+0x80>
+ 360:	00012783          	lw	a5,0(sp)
+ 364:	0007a503          	lw	a0,0(a5)
+ 368:	00478713          	addi	a4,a5,4
+ 36c:	00e12023          	sw	a4,0(sp)
+ 370:	e39ff0ef          	jal	ra,1a8 <putstr>
+ 374:	00148413          	addi	s0,s1,1
+ 378:	fb5ff06f          	j	32c <printf+0x30>
+ 37c:	07800793          	li	a5,120
+ 380:	00f51e63          	bne	a0,a5,39c <printf+0xa0>
+ 384:	00012783          	lw	a5,0(sp)
+ 388:	0007a503          	lw	a0,0(a5)
+ 38c:	00478713          	addi	a4,a5,4
+ 390:	00e12023          	sw	a4,0(sp)
+ 394:	f59ff0ef          	jal	ra,2ec <putx>
+ 398:	fddff06f          	j	374 <printf+0x78>
+ 39c:	06400793          	li	a5,100
+ 3a0:	00f51e63          	bne	a0,a5,3bc <printf+0xc0>
+ 3a4:	00012783          	lw	a5,0(sp)
+ 3a8:	0007a503          	lw	a0,0(a5)
+ 3ac:	00478713          	addi	a4,a5,4
+ 3b0:	00e12023          	sw	a4,0(sp)
+ 3b4:	f41ff0ef          	jal	ra,2f4 <putd>
+ 3b8:	fbdff06f          	j	374 <printf+0x78>
+ 3bc:	cf5ff0ef          	jal	ra,b0 <putchar>
+ 3c0:	fb5ff06f          	j	374 <printf+0x78>
+ 3c4:	cedff0ef          	jal	ra,b0 <putchar>
+ 3c8:	00040493          	mv	s1,s0
+ 3cc:	fa9ff06f          	j	374 <printf+0x78>
+
+000003d0 <strncmp>:
+ 3d0:	fff60613          	addi	a2,a2,-1
+ 3d4:	00000793          	li	a5,0
+ 3d8:	00f50733          	add	a4,a0,a5
+ 3dc:	00074683          	lbu	a3,0(a4)
+ 3e0:	00f58733          	add	a4,a1,a5
+ 3e4:	00074703          	lbu	a4,0(a4)
+ 3e8:	00c78a63          	beq	a5,a2,3fc <strncmp+0x2c>
+ 3ec:	00068863          	beqz	a3,3fc <strncmp+0x2c>
+ 3f0:	00070663          	beqz	a4,3fc <strncmp+0x2c>
+ 3f4:	00178793          	addi	a5,a5,1
+ 3f8:	fee680e3          	beq	a3,a4,3d8 <strncmp+0x8>
+ 3fc:	40e68533          	sub	a0,a3,a4
+ 400:	00008067          	ret
+
+00000404 <strcmp>:
+ 404:	fff00613          	li	a2,-1
+ 408:	fc9ff06f          	j	3d0 <strncmp>
+
+0000040c <strlen>:
+ 40c:	00050793          	mv	a5,a0
+ 410:	00000513          	li	a0,0
+ 414:	00a78733          	add	a4,a5,a0
+ 418:	00074703          	lbu	a4,0(a4)
+ 41c:	00071463          	bnez	a4,424 <strlen+0x18>
+ 420:	00008067          	ret
+ 424:	00150513          	addi	a0,a0,1
+ 428:	fedff06f          	j	414 <strlen+0x8>
+
+0000042c <memcpy>:
+ 42c:	00000793          	li	a5,0
+ 430:	00c79463          	bne	a5,a2,438 <memcpy+0xc>
+ 434:	00008067          	ret
+ 438:	00f58733          	add	a4,a1,a5
+ 43c:	00074683          	lbu	a3,0(a4)
+ 440:	00f50733          	add	a4,a0,a5
+ 444:	00178793          	addi	a5,a5,1
+ 448:	00d70023          	sb	a3,0(a4)
+ 44c:	fe5ff06f          	j	430 <memcpy+0x4>
+
+00000450 <memset>:
+ 450:	00c50633          	add	a2,a0,a2
+ 454:	00050793          	mv	a5,a0
+ 458:	00c79463          	bne	a5,a2,460 <memset+0x10>
+ 45c:	00008067          	ret
+ 460:	00178793          	addi	a5,a5,1
+ 464:	feb78fa3          	sb	a1,-1(a5)
+ 468:	ff1ff06f          	j	458 <memset+0x8>
+
+0000046c <strtok>:
+ 46c:	fec10113          	addi	sp,sp,-20
+ 470:	00812623          	sw	s0,12(sp)
+ 474:	00050413          	mv	s0,a0
+ 478:	00058513          	mv	a0,a1
+ 47c:	00b12023          	sw	a1,0(sp)
+ 480:	00112823          	sw	ra,16(sp)
+ 484:	00912423          	sw	s1,8(sp)
+ 488:	f85ff0ef          	jal	ra,40c <strlen>
+ 48c:	00012583          	lw	a1,0(sp)
+ 490:	00050613          	mv	a2,a0
+ 494:	00041863          	bnez	s0,4a4 <strtok+0x38>
+ 498:	000017b7          	lui	a5,0x1
+ 49c:	4f87a403          	lw	s0,1272(a5) # 14f8 <nxt.1625>
+ 4a0:	04040463          	beqz	s0,4e8 <strtok+0x7c>
+ 4a4:	00040493          	mv	s1,s0
+ 4a8:	0004c783          	lbu	a5,0(s1)
+ 4ac:	00079863          	bnez	a5,4bc <strtok+0x50>
+ 4b0:	000017b7          	lui	a5,0x1
+ 4b4:	4e07ac23          	sw	zero,1272(a5) # 14f8 <nxt.1625>
+ 4b8:	0300006f          	j	4e8 <strtok+0x7c>
+ 4bc:	00048513          	mv	a0,s1
+ 4c0:	00c12223          	sw	a2,4(sp)
+ 4c4:	00b12023          	sw	a1,0(sp)
+ 4c8:	f09ff0ef          	jal	ra,3d0 <strncmp>
+ 4cc:	00012583          	lw	a1,0(sp)
+ 4d0:	00412603          	lw	a2,4(sp)
+ 4d4:	00148793          	addi	a5,s1,1
+ 4d8:	02051463          	bnez	a0,500 <strtok+0x94>
+ 4dc:	00001737          	lui	a4,0x1
+ 4e0:	00048023          	sb	zero,0(s1)
+ 4e4:	4ef72c23          	sw	a5,1272(a4) # 14f8 <nxt.1625>
+ 4e8:	01012083          	lw	ra,16(sp)
+ 4ec:	00040513          	mv	a0,s0
+ 4f0:	00c12403          	lw	s0,12(sp)
+ 4f4:	00812483          	lw	s1,8(sp)
+ 4f8:	01410113          	addi	sp,sp,20
+ 4fc:	00008067          	ret
+ 500:	00078493          	mv	s1,a5
+ 504:	fa5ff06f          	j	4a8 <strtok+0x3c>
+
+00000508 <atoi>:
+ 508:	00050693          	mv	a3,a0
+ 50c:	00000613          	li	a2,0
+ 510:	00000513          	li	a0,0
+ 514:	02d00593          	li	a1,45
+ 518:	00069a63          	bnez	a3,52c <atoi+0x24>
+ 51c:	02061c63          	bnez	a2,554 <atoi+0x4c>
+ 520:	00008067          	ret
+ 524:	00100613          	li	a2,1
+ 528:	0240006f          	j	54c <atoi+0x44>
+ 52c:	0006c783          	lbu	a5,0(a3)
+ 530:	fe0786e3          	beqz	a5,51c <atoi+0x14>
+ 534:	feb788e3          	beq	a5,a1,524 <atoi+0x1c>
+ 538:	fd078793          	addi	a5,a5,-48
+ 53c:	00351713          	slli	a4,a0,0x3
+ 540:	00e78733          	add	a4,a5,a4
+ 544:	00151793          	slli	a5,a0,0x1
+ 548:	00f70533          	add	a0,a4,a5
+ 54c:	00168693          	addi	a3,a3,1
+ 550:	fc9ff06f          	j	518 <atoi+0x10>
+ 554:	40a00533          	neg	a0,a0
+ 558:	00008067          	ret
+
+0000055c <xtoi>:
+ 55c:	00050713          	mv	a4,a0
+ 560:	03900693          	li	a3,57
+ 564:	00000513          	li	a0,0
+ 568:	00070663          	beqz	a4,574 <xtoi+0x18>
+ 56c:	00074783          	lbu	a5,0(a4)
+ 570:	00079463          	bnez	a5,578 <xtoi+0x1c>
+ 574:	00008067          	ret
+ 578:	00451513          	slli	a0,a0,0x4
+ 57c:	00f6ea63          	bltu	a3,a5,590 <xtoi+0x34>
+ 580:	fd078793          	addi	a5,a5,-48
+ 584:	00a78533          	add	a0,a5,a0
+ 588:	00170713          	addi	a4,a4,1
+ 58c:	fddff06f          	j	568 <xtoi+0xc>
+ 590:	05f7f793          	andi	a5,a5,95
+ 594:	fc978793          	addi	a5,a5,-55
+ 598:	fedff06f          	j	584 <xtoi+0x28>
+
+0000059c <mac>:
+ 59c:	857f                	0x857f
+ 59e:	00c5                	addi	ra,ra,17
+ 5a0:	00008067          	ret
+
+000005a4 <mod>:
+ 5a4:	857e                	mv	a0,t6
+ 5a6:	00c5                	addi	ra,ra,17
+ 5a8:	00008067          	ret
+
+000005ac <__umulsi3>:
+ 5ac:	00050793          	mv	a5,a0
+ 5b0:	00000513          	li	a0,0
+ 5b4:	02b7e063          	bltu	a5,a1,5d4 <__umulsi3+0x28>
+ 5b8:	02059263          	bnez	a1,5dc <__umulsi3+0x30>
+ 5bc:	00008067          	ret
+ 5c0:	0017f713          	andi	a4,a5,1
+ 5c4:	00070463          	beqz	a4,5cc <__umulsi3+0x20>
+ 5c8:	00b50533          	add	a0,a0,a1
+ 5cc:	0017d793          	srli	a5,a5,0x1
+ 5d0:	00159593          	slli	a1,a1,0x1
+ 5d4:	fe0796e3          	bnez	a5,5c0 <__umulsi3+0x14>
+ 5d8:	00008067          	ret
+ 5dc:	0015f713          	andi	a4,a1,1
+ 5e0:	00070463          	beqz	a4,5e8 <__umulsi3+0x3c>
+ 5e4:	00f50533          	add	a0,a0,a5
+ 5e8:	00179793          	slli	a5,a5,0x1
+ 5ec:	0015d593          	srli	a1,a1,0x1
+ 5f0:	fc9ff06f          	j	5b8 <__umulsi3+0xc>
+
+000005f4 <__mulsi3>:
+ 5f4:	ff410113          	addi	sp,sp,-12
+ 5f8:	00912023          	sw	s1,0(sp)
+ 5fc:	00112423          	sw	ra,8(sp)
+ 600:	00812223          	sw	s0,4(sp)
+ 604:	00000493          	li	s1,0
+ 608:	00055663          	bgez	a0,614 <__mulsi3+0x20>
+ 60c:	40a00533          	neg	a0,a0
+ 610:	00100493          	li	s1,1
+ 614:	00000413          	li	s0,0
+ 618:	0005d663          	bgez	a1,624 <__mulsi3+0x30>
+ 61c:	40b005b3          	neg	a1,a1
+ 620:	00100413          	li	s0,1
+ 624:	f89ff0ef          	jal	ra,5ac <__umulsi3>
+ 628:	00848463          	beq	s1,s0,630 <__mulsi3+0x3c>
+ 62c:	40a00533          	neg	a0,a0
+ 630:	00812083          	lw	ra,8(sp)
+ 634:	00412403          	lw	s0,4(sp)
+ 638:	00012483          	lw	s1,0(sp)
+ 63c:	00c10113          	addi	sp,sp,12
+ 640:	00008067          	ret
+
+00000644 <__udiv_umod_si3>:
+ 644:	00050793          	mv	a5,a0
+ 648:	00100713          	li	a4,1
+ 64c:	00058513          	mv	a0,a1
+ 650:	00059863          	bnez	a1,660 <__udiv_umod_si3+0x1c>
+ 654:	00008067          	ret
+ 658:	00171713          	slli	a4,a4,0x1
+ 65c:	00151513          	slli	a0,a0,0x1
+ 660:	fef56ce3          	bltu	a0,a5,658 <__udiv_umod_si3+0x14>
+ 664:	00050693          	mv	a3,a0
+ 668:	00000513          	li	a0,0
+ 66c:	00078463          	beqz	a5,674 <__udiv_umod_si3+0x30>
+ 670:	00071863          	bnez	a4,680 <__udiv_umod_si3+0x3c>
+ 674:	fe0610e3          	bnez	a2,654 <__udiv_umod_si3+0x10>
+ 678:	00078513          	mv	a0,a5
+ 67c:	fd9ff06f          	j	654 <__udiv_umod_si3+0x10>
+ 680:	00d7e663          	bltu	a5,a3,68c <__udiv_umod_si3+0x48>
+ 684:	40d787b3          	sub	a5,a5,a3
+ 688:	00e50533          	add	a0,a0,a4
+ 68c:	00175713          	srli	a4,a4,0x1
+ 690:	0016d693          	srli	a3,a3,0x1
+ 694:	fd9ff06f          	j	66c <__udiv_umod_si3+0x28>
+
+00000698 <__udivsi3>:
+ 698:	00100613          	li	a2,1
+ 69c:	fa9ff06f          	j	644 <__udiv_umod_si3>
+
+000006a0 <__umodsi3>:
+ 6a0:	00000613          	li	a2,0
+ 6a4:	fa1ff06f          	j	644 <__udiv_umod_si3>
+
+000006a8 <__div_mod_si3>:
+ 6a8:	06058e63          	beqz	a1,724 <__div_mod_si3+0x7c>
+ 6ac:	ff010113          	addi	sp,sp,-16
+ 6b0:	00812423          	sw	s0,8(sp)
+ 6b4:	00912223          	sw	s1,4(sp)
+ 6b8:	00112623          	sw	ra,12(sp)
+ 6bc:	00060413          	mv	s0,a2
+ 6c0:	00000493          	li	s1,0
+ 6c4:	00055663          	bgez	a0,6d0 <__div_mod_si3+0x28>
+ 6c8:	40a00533          	neg	a0,a0
+ 6cc:	00100493          	li	s1,1
+ 6d0:	00000793          	li	a5,0
+ 6d4:	0005d663          	bgez	a1,6e0 <__div_mod_si3+0x38>
+ 6d8:	40b005b3          	neg	a1,a1
+ 6dc:	00100793          	li	a5,1
+ 6e0:	00040613          	mv	a2,s0
+ 6e4:	00f12023          	sw	a5,0(sp)
+ 6e8:	f5dff0ef          	jal	ra,644 <__udiv_umod_si3>
+ 6ec:	00050593          	mv	a1,a0
+ 6f0:	02040463          	beqz	s0,718 <__div_mod_si3+0x70>
+ 6f4:	00012783          	lw	a5,0(sp)
+ 6f8:	00f48463          	beq	s1,a5,700 <__div_mod_si3+0x58>
+ 6fc:	40a005b3          	neg	a1,a0
+ 700:	00c12083          	lw	ra,12(sp)
+ 704:	00812403          	lw	s0,8(sp)
+ 708:	00412483          	lw	s1,4(sp)
+ 70c:	00058513          	mv	a0,a1
+ 710:	01010113          	addi	sp,sp,16
+ 714:	00008067          	ret
+ 718:	fe0484e3          	beqz	s1,700 <__div_mod_si3+0x58>
+ 71c:	40a005b3          	neg	a1,a0
+ 720:	fe1ff06f          	j	700 <__div_mod_si3+0x58>
+ 724:	00058513          	mv	a0,a1
+ 728:	00008067          	ret
+
+0000072c <__divsi3>:
+ 72c:	00100613          	li	a2,1
+ 730:	f79ff06f          	j	6a8 <__div_mod_si3>
+
+00000734 <__modsi3>:
+ 734:	00000613          	li	a2,0
+ 738:	f71ff06f          	j	6a8 <__div_mod_si3>
+
+0000073c <test_call>:
+ 73c:	0000002b          	pacst
+ 740:	0002c0b7          	lui	ra,0x2c
+ 744:	00000057          	pacld
+ 748:	00008067          	ret
+
+0000074c <banner>:
+ 74c:	ee010113          	addi	sp,sp,-288
+ 750:	000015b7          	lui	a1,0x1
+ 754:	10d00613          	li	a2,269
+ 758:	3e458593          	addi	a1,a1,996 # 13e4 <board_name+0x3e4>
+ 75c:	00410513          	addi	a0,sp,4
+ 760:	10112e23          	sw	ra,284(sp)
+ 764:	10812c23          	sw	s0,280(sp)
+ 768:	10912a23          	sw	s1,276(sp)
+ 76c:	cc1ff0ef          	jal	ra,42c <memcpy>
+ 770:	00001537          	lui	a0,0x1
+ 774:	19450513          	addi	a0,a0,404 # 1194 <board_name+0x194>
+ 778:	b85ff0ef          	jal	ra,2fc <printf>
+ 77c:	00a00513          	li	a0,10
+ 780:	931ff0ef          	jal	ra,b0 <putchar>
+ 784:	00410413          	addi	s0,sp,4
+ 788:	00044783          	lbu	a5,0(s0)
+ 78c:	00079c63          	bnez	a5,7a4 <banner+0x58>
+ 790:	11c12083          	lw	ra,284(sp)
+ 794:	11812403          	lw	s0,280(sp)
+ 798:	11412483          	lw	s1,276(sp)
+ 79c:	12010113          	addi	sp,sp,288
+ 7a0:	00008067          	ret
+ 7a4:	00144483          	lbu	s1,1(s0)
+ 7a8:	00240413          	addi	s0,s0,2
+ 7ac:	fff48493          	addi	s1,s1,-1
+ 7b0:	fff00713          	li	a4,-1
+ 7b4:	fce48ae3          	beq	s1,a4,788 <banner+0x3c>
+ 7b8:	00078513          	mv	a0,a5
+ 7bc:	00f12023          	sw	a5,0(sp)
+ 7c0:	8f1ff0ef          	jal	ra,b0 <putchar>
+ 7c4:	00012783          	lw	a5,0(sp)
+ 7c8:	fe5ff06f          	j	7ac <banner+0x60>
+
+Disassembly of section .text.startup:
+
+000007cc <main>:
+ 7cc:	f7810113          	addi	sp,sp,-136
+ 7d0:	06912e23          	sw	s1,124(sp)
+ 7d4:	800004b7          	lui	s1,0x80000
+ 7d8:	00048793          	mv	a5,s1
+ 7dc:	08812023          	sw	s0,128(sp)
+ 7e0:	08112223          	sw	ra,132(sp)
+ 7e4:	00001437          	lui	s0,0x1
+ 7e8:	0017c803          	lbu	a6,1(a5)
+ 7ec:	4f442703          	lw	a4,1268(s0) # 14f4 <threads>
+ 7f0:	0027c883          	lbu	a7,2(a5)
+ 7f4:	00100793          	li	a5,1
+ 7f8:	0ff87813          	andi	a6,a6,255
+ 7fc:	0ff8f893          	andi	a7,a7,255
+ 800:	00048493          	mv	s1,s1
+ 804:	16e7cc63          	blt	a5,a4,97c <main+0x1b0>
+ 808:	00001737          	lui	a4,0x1
+ 80c:	4f070713          	addi	a4,a4,1264 # 14f0 <board_name+0x4f0>
+ 810:	01000613          	li	a2,16
+ 814:	01000593          	li	a1,16
+ 818:	3e800513          	li	a0,1000
+ 81c:	00e12423          	sw	a4,8(sp)
+ 820:	01112223          	sw	a7,4(sp)
+ 824:	01012023          	sw	a6,0(sp)
+ 828:	d75ff0ef          	jal	ra,59c <mac>
+ 82c:	4e800793          	li	a5,1256
+ 830:	00012803          	lw	a6,0(sp)
+ 834:	00412883          	lw	a7,4(sp)
+ 838:	00812703          	lw	a4,8(sp)
+ 83c:	14f50663          	beq	a0,a5,988 <main+0x1bc>
+ 840:	000017b7          	lui	a5,0x1
+ 844:	4f078793          	addi	a5,a5,1264 # 14f0 <board_name+0x4f0>
+ 848:	000016b7          	lui	a3,0x1
+ 84c:	00001537          	lui	a0,0x1
+ 850:	00088613          	mv	a2,a7
+ 854:	00080593          	mv	a1,a6
+ 858:	0f468693          	addi	a3,a3,244 # 10f4 <board_name+0xf4>
+ 85c:	0fc50513          	addi	a0,a0,252 # 10fc <board_name+0xfc>
+ 860:	a9dff0ef          	jal	ra,2fc <printf>
+ 864:	0064d583          	lhu	a1,6(s1) # 80000006 <io+0x6>
+ 868:	00001537          	lui	a0,0x1
+ 86c:	12450513          	addi	a0,a0,292 # 1124 <board_name+0x124>
+ 870:	4e042a23          	sw	zero,1268(s0)
+ 874:	a89ff0ef          	jal	ra,2fc <printf>
+ 878:	0014c503          	lbu	a0,1(s1)
+ 87c:	0024c783          	lbu	a5,2(s1)
+ 880:	00c4a703          	lw	a4,12(s1)
+ 884:	00c4a603          	lw	a2,12(s1)
+ 888:	000f45b7          	lui	a1,0xf4
+ 88c:	24058593          	addi	a1,a1,576 # f4240 <test+0xf2d3c>
+ 890:	0ff7f413          	andi	s0,a5,255
+ 894:	00c12023          	sw	a2,0(sp)
+ 898:	00e12223          	sw	a4,4(sp)
+ 89c:	d59ff0ef          	jal	ra,5f4 <__mulsi3>
+ 8a0:	00541793          	slli	a5,s0,0x5
+ 8a4:	408787b3          	sub	a5,a5,s0
+ 8a8:	00412703          	lw	a4,4(sp)
+ 8ac:	00279793          	slli	a5,a5,0x2
+ 8b0:	008787b3          	add	a5,a5,s0
+ 8b4:	00379793          	slli	a5,a5,0x3
+ 8b8:	00170593          	addi	a1,a4,1
+ 8bc:	00f50533          	add	a0,a0,a5
+ 8c0:	dd9ff0ef          	jal	ra,698 <__udivsi3>
+ 8c4:	00012603          	lw	a2,0(sp)
+ 8c8:	00050593          	mv	a1,a0
+ 8cc:	00001537          	lui	a0,0x1
+ 8d0:	14050513          	addi	a0,a0,320 # 1140 <board_name+0x140>
+ 8d4:	a29ff0ef          	jal	ra,2fc <printf>
+ 8d8:	00a00513          	li	a0,10
+ 8dc:	fd4ff0ef          	jal	ra,b0 <putchar>
+ 8e0:	00001537          	lui	a0,0x1
+ 8e4:	16c50513          	addi	a0,a0,364 # 116c <board_name+0x16c>
+ 8e8:	901ff0ef          	jal	ra,1e8 <puts>
+ 8ec:	000017b7          	lui	a5,0x1
+ 8f0:	18478513          	addi	a0,a5,388 # 1184 <board_name+0x184>
+ 8f4:	a09ff0ef          	jal	ra,2fc <printf>
+ 8f8:	04000613          	li	a2,64
+ 8fc:	00000593          	li	a1,0
+ 900:	03c10513          	addi	a0,sp,60
+ 904:	b4dff0ef          	jal	ra,450 <memset>
+ 908:	04000593          	li	a1,64
+ 90c:	03c10513          	addi	a0,sp,60
+ 910:	fe0ff0ef          	jal	ra,f0 <gets>
+ 914:	00000413          	li	s0,0
+ 918:	03c10513          	addi	a0,sp,60
+ 91c:	00001737          	lui	a4,0x1
+ 920:	18870593          	addi	a1,a4,392 # 1188 <board_name+0x188>
+ 924:	b49ff0ef          	jal	ra,46c <strtok>
+ 928:	07c10713          	addi	a4,sp,124
+ 92c:	00241793          	slli	a5,s0,0x2
+ 930:	00f707b3          	add	a5,a4,a5
+ 934:	faa7a023          	sw	a0,-96(a5)
+ 938:	00001737          	lui	a4,0x1
+ 93c:	00050a63          	beqz	a0,950 <main+0x184>
+ 940:	00140413          	addi	s0,s0,1
+ 944:	00800793          	li	a5,8
+ 948:	00000513          	li	a0,0
+ 94c:	fcf41ae3          	bne	s0,a5,920 <main+0x154>
+ 950:	01c12403          	lw	s0,28(sp)
+ 954:	f8040ce3          	beqz	s0,8ec <main+0x120>
+ 958:	000015b7          	lui	a1,0x1
+ 95c:	18c58593          	addi	a1,a1,396 # 118c <board_name+0x18c>
+ 960:	00040513          	mv	a0,s0
+ 964:	aa1ff0ef          	jal	ra,404 <strcmp>
+ 968:	02051663          	bnez	a0,994 <main+0x1c8>
+ 96c:	00001537          	lui	a0,0x1
+ 970:	19450513          	addi	a0,a0,404 # 1194 <board_name+0x194>
+ 974:	989ff0ef          	jal	ra,2fc <printf>
+ 978:	f75ff06f          	j	8ec <main+0x120>
+ 97c:	00001737          	lui	a4,0x1
+ 980:	0e870713          	addi	a4,a4,232 # 10e8 <board_name+0xe8>
+ 984:	e8dff06f          	j	810 <main+0x44>
+ 988:	000017b7          	lui	a5,0x1
+ 98c:	0ec78793          	addi	a5,a5,236 # 10ec <board_name+0xec>
+ 990:	eb9ff06f          	j	848 <main+0x7c>
+ 994:	000015b7          	lui	a1,0x1
+ 998:	19c58593          	addi	a1,a1,412 # 119c <board_name+0x19c>
+ 99c:	00040513          	mv	a0,s0
+ 9a0:	a65ff0ef          	jal	ra,404 <strcmp>
+ 9a4:	00051a63          	bnez	a0,9b8 <main+0x1ec>
+ 9a8:	da5ff0ef          	jal	ra,74c <banner>
+ 9ac:	00001537          	lui	a0,0x1
+ 9b0:	1a450513          	addi	a0,a0,420 # 11a4 <board_name+0x1a4>
+ 9b4:	f35ff06f          	j	8e8 <main+0x11c>
+ 9b8:	000015b7          	lui	a1,0x1
+ 9bc:	1bc58593          	addi	a1,a1,444 # 11bc <board_name+0x1bc>
+ 9c0:	00040513          	mv	a0,s0
+ 9c4:	a41ff0ef          	jal	ra,404 <strcmp>
+ 9c8:	0a051863          	bnez	a0,a78 <main+0x2ac>
+ 9cc:	02012403          	lw	s0,32(sp)
+ 9d0:	00040863          	beqz	s0,9e0 <main+0x214>
+ 9d4:	00040513          	mv	a0,s0
+ 9d8:	b85ff0ef          	jal	ra,55c <xtoi>
+ 9dc:	00050413          	mv	s0,a0
+ 9e0:	10040793          	addi	a5,s0,256
+ 9e4:	00f12023          	sw	a5,0(sp)
+ 9e8:	000017b7          	lui	a5,0x1
+ 9ec:	00040593          	mv	a1,s0
+ 9f0:	1c478513          	addi	a0,a5,452 # 11c4 <board_name+0x1c4>
+ 9f4:	909ff0ef          	jal	ra,2fc <printf>
+ 9f8:	00000713          	li	a4,0
+ 9fc:	00001637          	lui	a2,0x1
+ a00:	00e406b3          	add	a3,s0,a4
+ a04:	0006c583          	lbu	a1,0(a3)
+ a08:	1cc60513          	addi	a0,a2,460 # 11cc <board_name+0x1cc>
+ a0c:	00e12223          	sw	a4,4(sp)
+ a10:	8edff0ef          	jal	ra,2fc <printf>
+ a14:	00412703          	lw	a4,4(sp)
+ a18:	01000693          	li	a3,16
+ a1c:	00001637          	lui	a2,0x1
+ a20:	00170713          	addi	a4,a4,1
+ a24:	fcd71ee3          	bne	a4,a3,a00 <main+0x234>
+ a28:	00000713          	li	a4,0
+ a2c:	00e406b3          	add	a3,s0,a4
+ a30:	0006c503          	lbu	a0,0(a3)
+ a34:	05e00613          	li	a2,94
+ a38:	fe050693          	addi	a3,a0,-32
+ a3c:	0ff6f693          	andi	a3,a3,255
+ a40:	00d67463          	bgeu	a2,a3,a48 <main+0x27c>
+ a44:	02e00513          	li	a0,46
+ a48:	00e12223          	sw	a4,4(sp)
+ a4c:	e64ff0ef          	jal	ra,b0 <putchar>
+ a50:	00412703          	lw	a4,4(sp)
+ a54:	01000693          	li	a3,16
+ a58:	00170713          	addi	a4,a4,1
+ a5c:	fcd718e3          	bne	a4,a3,a2c <main+0x260>
+ a60:	00a00513          	li	a0,10
+ a64:	e4cff0ef          	jal	ra,b0 <putchar>
+ a68:	00012783          	lw	a5,0(sp)
+ a6c:	01040413          	addi	s0,s0,16
+ a70:	f6879ce3          	bne	a5,s0,9e8 <main+0x21c>
+ a74:	e79ff06f          	j	8ec <main+0x120>
+ a78:	000015b7          	lui	a1,0x1
+ a7c:	00200613          	li	a2,2
+ a80:	1d058593          	addi	a1,a1,464 # 11d0 <board_name+0x1d0>
+ a84:	00040513          	mv	a0,s0
+ a88:	949ff0ef          	jal	ra,3d0 <strncmp>
+ a8c:	00050e63          	beqz	a0,aa8 <main+0x2dc>
+ a90:	000015b7          	lui	a1,0x1
+ a94:	00200613          	li	a2,2
+ a98:	1d458593          	addi	a1,a1,468 # 11d4 <board_name+0x1d4>
+ a9c:	00040513          	mv	a0,s0
+ aa0:	931ff0ef          	jal	ra,3d0 <strncmp>
+ aa4:	20051863          	bnez	a0,cb4 <main+0x4e8>
+ aa8:	00244703          	lbu	a4,2(s0)
+ aac:	06d00793          	li	a5,109
+ ab0:	06f71463          	bne	a4,a5,b18 <main+0x34c>
+ ab4:	02012503          	lw	a0,32(sp)
+ ab8:	aa5ff0ef          	jal	ra,55c <xtoi>
+ abc:	00a12a23          	sw	a0,20(sp)
+ ac0:	00200793          	li	a5,2
+ ac4:	00300713          	li	a4,3
+ ac8:	00e12823          	sw	a4,16(sp)
+ acc:	00178713          	addi	a4,a5,1
+ ad0:	00e12623          	sw	a4,12(sp)
+ ad4:	00279793          	slli	a5,a5,0x2
+ ad8:	07c10713          	addi	a4,sp,124
+ adc:	00f707b3          	add	a5,a4,a5
+ ae0:	fa07a503          	lw	a0,-96(a5)
+ ae4:	a79ff0ef          	jal	ra,55c <xtoi>
+ ae8:	00a12223          	sw	a0,4(sp)
+ aec:	00050593          	mv	a1,a0
+ af0:	00001537          	lui	a0,0x1
+ af4:	1c450513          	addi	a0,a0,452 # 11c4 <board_name+0x1c4>
+ af8:	805ff0ef          	jal	ra,2fc <printf>
+ afc:	00012023          	sw	zero,0(sp)
+ b00:	01412783          	lw	a5,20(sp)
+ b04:	00012703          	lw	a4,0(sp)
+ b08:	02e79263          	bne	a5,a4,b2c <main+0x360>
+ b0c:	00a00513          	li	a0,10
+ b10:	da0ff0ef          	jal	ra,b0 <putchar>
+ b14:	dd9ff06f          	j	8ec <main+0x120>
+ b18:	00100713          	li	a4,1
+ b1c:	00e12a23          	sw	a4,20(sp)
+ b20:	00100793          	li	a5,1
+ b24:	00200713          	li	a4,2
+ b28:	fa1ff06f          	j	ac8 <main+0x2fc>
+ b2c:	01012783          	lw	a5,16(sp)
+ b30:	00044703          	lbu	a4,0(s0)
+ b34:	00f407b3          	add	a5,s0,a5
+ b38:	00f12423          	sw	a5,8(sp)
+ b3c:	07200793          	li	a5,114
+ b40:	0af71063          	bne	a4,a5,be0 <main+0x414>
+ b44:	00812783          	lw	a5,8(sp)
+ b48:	0007c703          	lbu	a4,0(a5)
+ b4c:	06200793          	li	a5,98
+ b50:	02f71063          	bne	a4,a5,b70 <main+0x3a4>
+ b54:	00412783          	lw	a5,4(sp)
+ b58:	00012703          	lw	a4,0(sp)
+ b5c:	00e787b3          	add	a5,a5,a4
+ b60:	0007c583          	lbu	a1,0(a5)
+ b64:	000017b7          	lui	a5,0x1
+ b68:	1cc78513          	addi	a0,a5,460 # 11cc <board_name+0x1cc>
+ b6c:	f90ff0ef          	jal	ra,2fc <printf>
+ b70:	00812783          	lw	a5,8(sp)
+ b74:	0007c703          	lbu	a4,0(a5)
+ b78:	07700793          	li	a5,119
+ b7c:	02f71263          	bne	a4,a5,ba0 <main+0x3d4>
+ b80:	00012783          	lw	a5,0(sp)
+ b84:	00412703          	lw	a4,4(sp)
+ b88:	00179793          	slli	a5,a5,0x1
+ b8c:	00e787b3          	add	a5,a5,a4
+ b90:	00079583          	lh	a1,0(a5)
+ b94:	000017b7          	lui	a5,0x1
+ b98:	1cc78513          	addi	a0,a5,460 # 11cc <board_name+0x1cc>
+ b9c:	f60ff0ef          	jal	ra,2fc <printf>
+ ba0:	00812783          	lw	a5,8(sp)
+ ba4:	0007c703          	lbu	a4,0(a5)
+ ba8:	06c00793          	li	a5,108
+ bac:	02f71263          	bne	a4,a5,bd0 <main+0x404>
+ bb0:	00012783          	lw	a5,0(sp)
+ bb4:	00412703          	lw	a4,4(sp)
+ bb8:	00279793          	slli	a5,a5,0x2
+ bbc:	00e787b3          	add	a5,a5,a4
+ bc0:	0007a583          	lw	a1,0(a5)
+ bc4:	000017b7          	lui	a5,0x1
+ bc8:	1cc78513          	addi	a0,a5,460 # 11cc <board_name+0x1cc>
+ bcc:	f30ff0ef          	jal	ra,2fc <printf>
+ bd0:	00012783          	lw	a5,0(sp)
+ bd4:	00178793          	addi	a5,a5,1
+ bd8:	00f12023          	sw	a5,0(sp)
+ bdc:	f25ff06f          	j	b00 <main+0x334>
+ be0:	00c12783          	lw	a5,12(sp)
+ be4:	07c10713          	addi	a4,sp,124
+ be8:	00178793          	addi	a5,a5,1
+ bec:	00f12c23          	sw	a5,24(sp)
+ bf0:	00c12783          	lw	a5,12(sp)
+ bf4:	00279793          	slli	a5,a5,0x2
+ bf8:	00f707b3          	add	a5,a4,a5
+ bfc:	fa07a503          	lw	a0,-96(a5)
+ c00:	95dff0ef          	jal	ra,55c <xtoi>
+ c04:	00812703          	lw	a4,8(sp)
+ c08:	00050793          	mv	a5,a0
+ c0c:	00074683          	lbu	a3,0(a4)
+ c10:	06200713          	li	a4,98
+ c14:	02e69663          	bne	a3,a4,c40 <main+0x474>
+ c18:	00412703          	lw	a4,4(sp)
+ c1c:	00012683          	lw	a3,0(sp)
+ c20:	000017b7          	lui	a5,0x1
+ c24:	0ff57593          	andi	a1,a0,255
+ c28:	00d70733          	add	a4,a4,a3
+ c2c:	00a70023          	sb	a0,0(a4)
+ c30:	00a12623          	sw	a0,12(sp)
+ c34:	1cc78513          	addi	a0,a5,460 # 11cc <board_name+0x1cc>
+ c38:	ec4ff0ef          	jal	ra,2fc <printf>
+ c3c:	00c12783          	lw	a5,12(sp)
+ c40:	00812703          	lw	a4,8(sp)
+ c44:	00074683          	lbu	a3,0(a4)
+ c48:	07700713          	li	a4,119
+ c4c:	02e69a63          	bne	a3,a4,c80 <main+0x4b4>
+ c50:	01079593          	slli	a1,a5,0x10
+ c54:	00f12623          	sw	a5,12(sp)
+ c58:	00012783          	lw	a5,0(sp)
+ c5c:	4105d593          	srai	a1,a1,0x10
+ c60:	00179713          	slli	a4,a5,0x1
+ c64:	00412783          	lw	a5,4(sp)
+ c68:	00f70733          	add	a4,a4,a5
+ c6c:	000017b7          	lui	a5,0x1
+ c70:	1cc78513          	addi	a0,a5,460 # 11cc <board_name+0x1cc>
+ c74:	00b71023          	sh	a1,0(a4)
+ c78:	e84ff0ef          	jal	ra,2fc <printf>
+ c7c:	00c12783          	lw	a5,12(sp)
+ c80:	00812703          	lw	a4,8(sp)
+ c84:	01812603          	lw	a2,24(sp)
+ c88:	00074683          	lbu	a3,0(a4)
+ c8c:	00c12623          	sw	a2,12(sp)
+ c90:	06c00713          	li	a4,108
+ c94:	f2e69ee3          	bne	a3,a4,bd0 <main+0x404>
+ c98:	00012703          	lw	a4,0(sp)
+ c9c:	00412683          	lw	a3,4(sp)
+ ca0:	00078593          	mv	a1,a5
+ ca4:	00271713          	slli	a4,a4,0x2
+ ca8:	00d70733          	add	a4,a4,a3
+ cac:	00f72023          	sw	a5,0(a4)
+ cb0:	f15ff06f          	j	bc4 <main+0x3f8>
+ cb4:	000015b7          	lui	a1,0x1
+ cb8:	1d858593          	addi	a1,a1,472 # 11d8 <board_name+0x1d8>
+ cbc:	00040513          	mv	a0,s0
+ cc0:	f44ff0ef          	jal	ra,404 <strcmp>
+ cc4:	02051863          	bnez	a0,cf4 <main+0x528>
+ cc8:	02012503          	lw	a0,32(sp)
+ ccc:	00050a63          	beqz	a0,ce0 <main+0x514>
+ cd0:	88dff0ef          	jal	ra,55c <xtoi>
+ cd4:	01051513          	slli	a0,a0,0x10
+ cd8:	01055513          	srli	a0,a0,0x10
+ cdc:	00a49423          	sh	a0,8(s1)
+ ce0:	0084d583          	lhu	a1,8(s1)
+ ce4:	00001537          	lui	a0,0x1
+ ce8:	1dc50513          	addi	a0,a0,476 # 11dc <board_name+0x1dc>
+ cec:	e10ff0ef          	jal	ra,2fc <printf>
+ cf0:	bfdff06f          	j	8ec <main+0x120>
+ cf4:	000015b7          	lui	a1,0x1
+ cf8:	1e858593          	addi	a1,a1,488 # 11e8 <board_name+0x1e8>
+ cfc:	00040513          	mv	a0,s0
+ d00:	f04ff0ef          	jal	ra,404 <strcmp>
+ d04:	02051263          	bnez	a0,d28 <main+0x55c>
+ d08:	02012503          	lw	a0,32(sp)
+ d0c:	00050663          	beqz	a0,d18 <main+0x54c>
+ d10:	ff8ff0ef          	jal	ra,508 <atoi>
+ d14:	00a4a623          	sw	a0,12(s1)
+ d18:	00001537          	lui	a0,0x1
+ d1c:	00c4a583          	lw	a1,12(s1)
+ d20:	1f050513          	addi	a0,a0,496 # 11f0 <board_name+0x1f0>
+ d24:	fc9ff06f          	j	cec <main+0x520>
+ d28:	000015b7          	lui	a1,0x1
+ d2c:	1fc58593          	addi	a1,a1,508 # 11fc <board_name+0x1fc>
+ d30:	00040513          	mv	a0,s0
+ d34:	ed0ff0ef          	jal	ra,404 <strcmp>
+ d38:	02051663          	bnez	a0,d64 <main+0x598>
+ d3c:	02012503          	lw	a0,32(sp)
+ d40:	00050a63          	beqz	a0,d54 <main+0x588>
+ d44:	819ff0ef          	jal	ra,55c <xtoi>
+ d48:	01051513          	slli	a0,a0,0x10
+ d4c:	01055513          	srli	a0,a0,0x10
+ d50:	00a49523          	sh	a0,10(s1)
+ d54:	00001537          	lui	a0,0x1
+ d58:	00a4d583          	lhu	a1,10(s1)
+ d5c:	20450513          	addi	a0,a0,516 # 1204 <board_name+0x204>
+ d60:	f8dff06f          	j	cec <main+0x520>
+ d64:	000015b7          	lui	a1,0x1
+ d68:	21058593          	addi	a1,a1,528 # 1210 <board_name+0x210>
+ d6c:	00040513          	mv	a0,s0
+ d70:	e94ff0ef          	jal	ra,404 <strcmp>
+ d74:	02051a63          	bnez	a0,da8 <main+0x5dc>
+ d78:	02012503          	lw	a0,32(sp)
+ d7c:	f8cff0ef          	jal	ra,508 <atoi>
+ d80:	00050413          	mv	s0,a0
+ d84:	02412503          	lw	a0,36(sp)
+ d88:	f80ff0ef          	jal	ra,508 <atoi>
+ d8c:	00050593          	mv	a1,a0
+ d90:	00040513          	mv	a0,s0
+ d94:	861ff0ef          	jal	ra,5f4 <__mulsi3>
+ d98:	00050593          	mv	a1,a0
+ d9c:	00001537          	lui	a0,0x1
+ da0:	21450513          	addi	a0,a0,532 # 1214 <board_name+0x214>
+ da4:	f49ff06f          	j	cec <main+0x520>
+ da8:	000015b7          	lui	a1,0x1
+ dac:	22058593          	addi	a1,a1,544 # 1220 <board_name+0x220>
+ db0:	00040513          	mv	a0,s0
+ db4:	e50ff0ef          	jal	ra,404 <strcmp>
+ db8:	04051863          	bnez	a0,e08 <main+0x63c>
+ dbc:	02012503          	lw	a0,32(sp)
+ dc0:	f48ff0ef          	jal	ra,508 <atoi>
+ dc4:	00050413          	mv	s0,a0
+ dc8:	02412503          	lw	a0,36(sp)
+ dcc:	f3cff0ef          	jal	ra,508 <atoi>
+ dd0:	00050593          	mv	a1,a0
+ dd4:	00a12223          	sw	a0,4(sp)
+ dd8:	00040513          	mv	a0,s0
+ ddc:	959ff0ef          	jal	ra,734 <__modsi3>
+ de0:	00412583          	lw	a1,4(sp)
+ de4:	00a12023          	sw	a0,0(sp)
+ de8:	00040513          	mv	a0,s0
+ dec:	941ff0ef          	jal	ra,72c <__divsi3>
+ df0:	00012603          	lw	a2,0(sp)
+ df4:	00050593          	mv	a1,a0
+ df8:	00001537          	lui	a0,0x1
+ dfc:	22450513          	addi	a0,a0,548 # 1224 <board_name+0x224>
+ e00:	cfcff0ef          	jal	ra,2fc <printf>
+ e04:	ae9ff06f          	j	8ec <main+0x120>
+ e08:	000015b7          	lui	a1,0x1
+ e0c:	23858593          	addi	a1,a1,568 # 1238 <board_name+0x238>
+ e10:	00040513          	mv	a0,s0
+ e14:	df0ff0ef          	jal	ra,404 <strcmp>
+ e18:	04051863          	bnez	a0,e68 <main+0x69c>
+ e1c:	02012503          	lw	a0,32(sp)
+ e20:	ee8ff0ef          	jal	ra,508 <atoi>
+ e24:	00050413          	mv	s0,a0
+ e28:	02412503          	lw	a0,36(sp)
+ e2c:	edcff0ef          	jal	ra,508 <atoi>
+ e30:	00a12023          	sw	a0,0(sp)
+ e34:	02812503          	lw	a0,40(sp)
+ e38:	ed0ff0ef          	jal	ra,508 <atoi>
+ e3c:	00012583          	lw	a1,0(sp)
+ e40:	01051613          	slli	a2,a0,0x10
+ e44:	41065613          	srai	a2,a2,0x10
+ e48:	01059593          	slli	a1,a1,0x10
+ e4c:	4105d593          	srai	a1,a1,0x10
+ e50:	00040513          	mv	a0,s0
+ e54:	f48ff0ef          	jal	ra,59c <mac>
+ e58:	00050593          	mv	a1,a0
+ e5c:	00001537          	lui	a0,0x1
+ e60:	23c50513          	addi	a0,a0,572 # 123c <board_name+0x23c>
+ e64:	e89ff06f          	j	cec <main+0x520>
+ e68:	000015b7          	lui	a1,0x1
+ e6c:	24858593          	addi	a1,a1,584 # 1248 <board_name+0x248>
+ e70:	00040513          	mv	a0,s0
+ e74:	d90ff0ef          	jal	ra,404 <strcmp>
+ e78:	14051c63          	bnez	a0,fd0 <main+0x804>
+ e7c:	00001537          	lui	a0,0x1
+ e80:	25050513          	addi	a0,a0,592 # 1250 <board_name+0x250>
+ e84:	b64ff0ef          	jal	ra,1e8 <puts>
+ e88:	02012403          	lw	s0,32(sp)
+ e8c:	000015b7          	lui	a1,0x1
+ e90:	26c58593          	addi	a1,a1,620 # 126c <board_name+0x26c>
+ e94:	00040513          	mv	a0,s0
+ e98:	d6cff0ef          	jal	ra,404 <strcmp>
+ e9c:	00051863          	bnez	a0,eac <main+0x6e0>
+ ea0:	0000002b          	pacst
+ ea4:	00000057          	pacld
+ ea8:	07c0006f          	j	f24 <main+0x758>
+ eac:	000015b7          	lui	a1,0x1
+ eb0:	27058593          	addi	a1,a1,624 # 1270 <board_name+0x270>
+ eb4:	00040513          	mv	a0,s0
+ eb8:	d4cff0ef          	jal	ra,404 <strcmp>
+ ebc:	02051063          	bnez	a0,edc <main+0x710>
+ ec0:	000210b7          	lui	ra,0x21
+ ec4:	0000002b          	pacst
+ ec8:	000160b7          	lui	ra,0x16
+ ecc:	0000002b          	pacst
+ ed0:	00000057          	pacld
+ ed4:	000210b7          	lui	ra,0x21
+ ed8:	fcdff06f          	j	ea4 <main+0x6d8>
+ edc:	000015b7          	lui	a1,0x1
+ ee0:	27458593          	addi	a1,a1,628 # 1274 <board_name+0x274>
+ ee4:	00040513          	mv	a0,s0
+ ee8:	d1cff0ef          	jal	ra,404 <strcmp>
+ eec:	00051a63          	bnez	a0,f00 <main+0x734>
+ ef0:	000210b7          	lui	ra,0x21
+ ef4:	0000002b          	pacst
+ ef8:	0002c0b7          	lui	ra,0x2c
+ efc:	fa9ff06f          	j	ea4 <main+0x6d8>
+ f00:	000015b7          	lui	a1,0x1
+ f04:	27858593          	addi	a1,a1,632 # 1278 <board_name+0x278>
+ f08:	00040513          	mv	a0,s0
+ f0c:	cf8ff0ef          	jal	ra,404 <strcmp>
+ f10:	02051063          	bnez	a0,f30 <main+0x764>
+ f14:	829ff0ef          	jal	ra,73c <test_call>
+ f18:	00001537          	lui	a0,0x1
+ f1c:	28050513          	addi	a0,a0,640 # 1280 <board_name+0x280>
+ f20:	ac8ff0ef          	jal	ra,1e8 <puts>
+ f24:	00001537          	lui	a0,0x1
+ f28:	2c850513          	addi	a0,a0,712 # 12c8 <board_name+0x2c8>
+ f2c:	9bdff06f          	j	8e8 <main+0x11c>
+ f30:	000015b7          	lui	a1,0x1
+ f34:	29458593          	addi	a1,a1,660 # 1294 <board_name+0x294>
+ f38:	00040513          	mv	a0,s0
+ f3c:	cc8ff0ef          	jal	ra,404 <strcmp>
+ f40:	00051e63          	bnez	a0,f5c <main+0x790>
+ f44:	02412503          	lw	a0,36(sp)
+ f48:	dc0ff0ef          	jal	ra,508 <atoi>
+ f4c:	0000407b          	0x407b
+ f50:	00001537          	lui	a0,0x1
+ f54:	29850513          	addi	a0,a0,664 # 1298 <board_name+0x298>
+ f58:	fc9ff06f          	j	f20 <main+0x754>
+ f5c:	000015b7          	lui	a1,0x1
+ f60:	2a858593          	addi	a1,a1,680 # 12a8 <board_name+0x2a8>
+ f64:	00040513          	mv	a0,s0
+ f68:	c9cff0ef          	jal	ra,404 <strcmp>
+ f6c:	00050593          	mv	a1,a0
+ f70:	02051663          	bnez	a0,f9c <main+0x7d0>
+ f74:	00001437          	lui	s0,0x1
+ f78:	0000002b          	pacst
+ f7c:	2b440513          	addi	a0,s0,692 # 12b4 <board_name+0x2b4>
+ f80:	00b12023          	sw	a1,0(sp)
+ f84:	b78ff0ef          	jal	ra,2fc <printf>
+ f88:	00012583          	lw	a1,0(sp)
+ f8c:	10100793          	li	a5,257
+ f90:	00158593          	addi	a1,a1,1
+ f94:	fef592e3          	bne	a1,a5,f78 <main+0x7ac>
+ f98:	f8dff06f          	j	f24 <main+0x758>
+ f9c:	000015b7          	lui	a1,0x1
+ fa0:	2c058593          	addi	a1,a1,704 # 12c0 <board_name+0x2c0>
+ fa4:	00040513          	mv	a0,s0
+ fa8:	c5cff0ef          	jal	ra,404 <strcmp>
+ fac:	00051663          	bnez	a0,fb8 <main+0x7ec>
+ fb0:	0000002b          	pacst
+ fb4:	f71ff06f          	j	f24 <main+0x758>
+ fb8:	000015b7          	lui	a1,0x1
+ fbc:	2c458593          	addi	a1,a1,708 # 12c4 <board_name+0x2c4>
+ fc0:	00040513          	mv	a0,s0
+ fc4:	c40ff0ef          	jal	ra,404 <strcmp>
+ fc8:	f4051ee3          	bnez	a0,f24 <main+0x758>
+ fcc:	ed9ff06f          	j	ea4 <main+0x6d8>
+ fd0:	00044783          	lbu	a5,0(s0)
+ fd4:	90078ce3          	beqz	a5,8ec <main+0x120>
+ fd8:	00001537          	lui	a0,0x1
+ fdc:	00040593          	mv	a1,s0
+ fe0:	2e450513          	addi	a0,a0,740 # 12e4 <board_name+0x2e4>
+ fe4:	d09ff06f          	j	cec <main+0x520>
diff --git a/rtl/config.vh b/rtl/config.vh
index f9d5d83..ba1ed33 100644
--- a/rtl/config.vh
+++ b/rtl/config.vh
@@ -75,7 +75,7 @@
 // performance impact.  Note: threading is currently supported only in the
 // 3-stage pipeline version.
 
-`define __THREADING__ 
+`define __THREADING__
 
 // performance measurement:
 //
@@ -98,13 +98,30 @@
 
 `define __MAC16X16__
 
+
+
+`define __SSTACK__
+// Shadow Stack support
+//
+// The use of a shadow stack for return address authentication.
+// If a return address becomes corrupted, the return address register
+// will be restored with an internally saved return address within
+// a shadow stack.
+// Supported in threading mode via a 2nd shadow stack and stack index.
+// The scheduler must set the stack selection to match the currently used 
+// thread via ssth imm[32:12] where the immediate value represents the index.
+//
+// Code must be compiled with xsstack non-standard extension via the fork of riscv-gnu-toolchain
+// which can be found at https://github.com/AndrewGBelcher/riscv-gnu-toolchain
+
+
 // RV32I vs RV32E:
 //
 // The difference between the RV32I and RV32E regarding the logic space is 
 // minimal in typical applications with modern 5 or 6 input LUT based FPGAs, 
 // but the RV32E is better with old 4 input LUT based FPGAs.
 
-`define __RV32E__
+//`define __RV32E__
 
 // initial PC and SP
 //
@@ -116,6 +133,24 @@
 // the stack can be positioned in the top of RAM and does not match with the
 // .data.
 
+`define __HARVARD__
+
+// full harvard architecture:
+// 
+// When defined, enforses that the instruction and data buses are connected
+// to fully separate memory banks.  Although the darkriscv always use
+// harvard architecture in the core, with separate instruction and data
+// buses, the logic levels outside the core can use different architectures
+// and concepts, including von neumann, wich a single bus shared by
+// instruction and data access, as well a mix between harvard and von
+// neumann, which is possible in the case of dual-port blockrams, where is
+// possible connect two separate buses in a single memory bank.  the main
+// advantage of a single memory bank is that the .text and .data areas can
+// be better allocated, but in this case is not possible protect the .text
+// area as in the case of separate memory banks.
+//
+// for spartan-7 devices, always use full harvard architecture!
+
 `define __RESETPC__ 32'd0
 `define __RESETSP__ 32'd8192
 
@@ -172,6 +207,16 @@
 `ifdef QMTECH_SDRAM_LX16
     `define BOARD_ID 3
     `define BOARD_CK 50000000
+    `define INVRES 1
+`endif
+
+`ifdef QMTECH_SPARTAN7_S15
+    `define BOARD_ID 4
+    `define BOARD_CK_REF 50000000 
+    `define BOARD_CK_MUL 20
+    `define BOARD_CK_DIV 10
+    `define VIVADO 1 
+    `define INVRES 1
 `endif
 
 `ifndef BOARD_ID
diff --git a/rtl/darkriscv.v b/rtl/darkriscv.v
index b2c9d6f..f3c2a14 100644
--- a/rtl/darkriscv.v
+++ b/rtl/darkriscv.v
@@ -42,12 +42,20 @@
 `define MCC     7'b00100_11      // xxxi  rd,rs1,imm[11:0]
 `define RCC     7'b01100_11      // xxx   rd,rs1,rs2 
 `define MAC     7'b11111_11      // mac   rd,rs1,rs2
+`define MOD     7'b11111_10      // mod   rd,rs1,rs2
 
 // not implemented opcodes:
 
 `define FCC     7'b00011_11      // fencex
 `define CCC     7'b11100_11      // exx, csrxx
 
+// shadow stack opcodes for RA authentication
+
+ `define SSLD  7'b10101_11      // ssld
+ `define SSST  7'b01010_11      // ssst
+ `define SSTH  7'b11110_11      // ssth imm[31:12]
+
+
 // configuration file
 
 `include "../rtl/config.vh"
@@ -59,7 +67,7 @@ module darkriscv
 //) 
 (
     input             CLK,   // clock
-    input             RES,   // reset
+    input             IRES,   // reset
     input             HLT,   // halt
     
 `ifdef __THREADING__    
@@ -77,7 +85,6 @@ module darkriscv
     
     output            WR,    // write enable
     output            RD,    // read enable 
-    
     output [3:0]  DEBUG      // old-school osciloscope based debug! :)
 );
 
@@ -85,6 +92,9 @@ module darkriscv
 
     wire [31:0] ALL0  = 0;
     wire [31:0] ALL1  = -1;
+ 
+    //assign HLT = hlt || SS_HLT;
+
 
 `ifdef __THREADING__
     reg XMODE = 0;     // 0 = user, 1 = exception
@@ -94,13 +104,39 @@ module darkriscv
 
     reg [31:0] XIDATA;
 
-    reg XLUI, XAUIPC, XJAL, XJALR, XBCC, XLCC, XSCC, XMCC, XRCC, XMAC; //, XFCC, XCCC;
+
+`ifdef __SSTACK__
+
+    reg SS_RES = 0;
+	
+	reg [31:0] RECOVERY_RA = 32'd0; 
+
+    reg [31:0] SHADOW_STACK_1 [0:255];
+    reg [31:0] SHADOW_STACK_2 [0:255];
+
+    reg [31:0] SS1_INDEX_VAL = 32'd0;
+    reg [31:0] SS2_INDEX_VAL = 32'd0;
+
+    reg [31:0] SS_THREAD_SEL = 32'd0;
+
+    wire RES = IRES || SS_RES;
+    
+    reg XSSLD, XSSST, XSSTH;
+
+`else
+    wire RES = IRES;
+`endif
+    
+    
+    reg XLUI, XAUIPC, XJAL, XJALR, XBCC, XLCC, XSCC, XMCC, XRCC, XMAC, XMOD;
 
     reg [31:0] XSIMM;
     reg [31:0] XUIMM;
 
+
     always@(posedge CLK)
     begin        
+
         if(!HLT)
         begin
             XIDATA <= /*RES ? { ALL0[31:12], 5'd2, ALL0[6:0] } : HLT ? XIDATA : */IDATA;
@@ -117,6 +153,13 @@ module darkriscv
 
             XRCC   <= /*RES ? 0 : HLT ? XRCC   : */IDATA[6:0]==`RCC;
             XMAC   <= /*RES ? 0 : HLT ? XRCC   : */IDATA[6:0]==`MAC;
+            XMOD   <= /*RES ? 0 : HLT ? XRCC   : */IDATA[6:0]==`MOD;
+
+`ifdef __SSTACK__            
+            XSSLD   <= /*RES ? 0 : HLT ? XRCC   : */IDATA[6:0]==`SSLD;
+            XSSST   <= /*RES ? 0 : HLT ? XRCC   : */IDATA[6:0]==`SSST;
+            XSSTH   <= /*RES ? 0 : HLT ? XRCC   : */IDATA[6:0]==`SSTH;            
+`endif
             //XFCC   <= RES ? 0 : HLT ? XFCC   : IDATA[6:0]==`FCC;
             //XCCC   <= RES ? 0 : HLT ? XCCC   : IDATA[6:0]==`CCC;
 
@@ -155,13 +198,13 @@ module darkriscv
     
         reg [4:0] RESMODE = 0;
 
-        wire [4:0] DPTR   = RES ? RESMODE : { XMODE, XIDATA[10: 7] }; // set SP_RESET when RES==1
+        wire [4:0] DPTR   = (RES) ? RESMODE : { XMODE, XIDATA[10: 7] }; // set SP_RESET when RES==1
         wire [4:0] S1PTR  = { XMODE, XIDATA[18:15] };
         wire [4:0] S2PTR  = { XMODE, XIDATA[23:20] };
     `else
         reg [5:0] RESMODE = 0;
 
-        wire [5:0] DPTR   = RES ? RESMODE : { XMODE, XIDATA[11: 7] }; // set SP_RESET when RES==1
+        wire [5:0] DPTR   = (RES) ? RESMODE : { XMODE, XIDATA[11: 7] }; // set SP_RESET when RES==1
         wire [5:0] S1PTR  = { XMODE, XIDATA[19:15] };
         wire [5:0] S2PTR  = { XMODE, XIDATA[24:20] };
     `endif
@@ -176,13 +219,16 @@ module darkriscv
     
         reg [3:0] RESMODE = 0;
     
-        wire [3:0] DPTR   = RES ? RESMODE : XIDATA[10: 7]; // set SP_RESET when RES==1
+        wire [3:0] DPTR   = (RES) ? RESMODE : XSSLD ? 1 : XIDATA[10: 7]; // set SP_RESET when RES==1
         wire [3:0] S1PTR  = XIDATA[18:15];
         wire [3:0] S2PTR  = XIDATA[23:20];
     `else
         reg [4:0] RESMODE = 0;
-    
-        wire [4:0] DPTR   = RES ? RESMODE : XIDATA[11: 7]; // set SP_RESET when RES==1
+    `ifdef __SSTACK__
+        wire [4:0] DPTR   = (RES) ? RESMODE : XSSLD ? 1 : XIDATA[11: 7]; // set SP_RESET when RES==1
+    `else
+        wire [4:0] DPTR   = (RES) ? RESMODE : XIDATA[11: 7]; // set SP_RESET when RES==1
+    `endif
         wire [4:0] S1PTR  = XIDATA[19:15];
         wire [4:0] S2PTR  = XIDATA[24:20];    
     `endif
@@ -210,6 +256,14 @@ module darkriscv
     
     wire    RCC = FLUSH ? 0 : XRCC; // OPCODE==7'b0110011; //FCT3
     wire    MAC = FLUSH ? 0 : XMAC; // OPCODE==7'b0110011; //FCT3
+    wire    MOD = FLUSH ? 0 : XMOD; // OPCODE==7'b0110011; //FCT3
+    
+    `ifdef __SSTACK__
+    wire    SSLD = FLUSH ? 0 : XSSLD; // OPCODE==7'b1010101
+    wire    SSST = FLUSH ? 0 : XSSST; // OPCODE==7'b0101001
+    wire    SSTH = FLUSH ? 0 : XSSTH; // OPCODE==7'b0101001
+    `endif
+ 
     //wire    FCC = FLUSH ? 0 : XFCC; // OPCODE==7'b0001111; //FCT3
     //wire    CCC = FLUSH ? 0 : XCCC; // OPCODE==7'b1110011; //FCT3
 
@@ -220,13 +274,13 @@ module darkriscv
     reg [31:0] NXPC;        // 32-bit program counter t+1
     reg [31:0] PC;		    // 32-bit program counter t+0
 
-    `ifdef __RV32E__
-        reg [31:0] REG1 [0:31];	// general-purpose 16x32-bit registers (s1)
-        reg [31:0] REG2 [0:31];	// general-purpose 16x32-bit registers (s2)
-    `else
-        reg [31:0] REG1 [0:63];	// general-purpose 32x32-bit registers (s1)
-        reg [31:0] REG2 [0:63];	// general-purpose 32x32-bit registers (s2)    
-    `endif
+`ifdef __RV32E__
+    reg [31:0] REG1 [0:31];	// general-purpose 16x32-bit registers (s1)
+    reg [31:0] REG2 [0:31];	// general-purpose 16x32-bit registers (s2)
+`else
+    reg [31:0] REG1 [0:63];	// general-purpose 32x32-bit registers (s1)
+    reg [31:0] REG2 [0:63];	// general-purpose 32x32-bit registers (s2)    
+`endif
 /*
     integer i; 
     initial 
@@ -243,13 +297,13 @@ module darkriscv
     reg [31:0] NXPC;        // 32-bit program counter t+1
     reg [31:0] PC;		    // 32-bit program counter t+0
 
-    `ifdef __RV32E__
-        reg [31:0] REG1 [0:31];	// general-purpose 16x32-bit registers (s1)
-        reg [31:0] REG2 [0:31];	// general-purpose 16x32-bit registers (s2)
-    `else
-        reg [31:0] REG1 [0:31];	// general-purpose 32x32-bit registers (s1)
-        reg [31:0] REG2 [0:31];	// general-purpose 32x32-bit registers (s2)
-    `endif
+`ifdef __RV32E__
+    reg [31:0] REG1 [0:31];	// general-purpose 16x32-bit registers (s1)
+    reg [31:0] REG2 [0:31];	// general-purpose 16x32-bit registers (s2)
+`else
+    reg [31:0] REG1 [0:31];	// general-purpose 32x32-bit registers (s1)
+    reg [31:0] REG2 [0:31];	// general-purpose 32x32-bit registers (s2)
+`endif
 /*
     integer i; 
     initial 
@@ -303,7 +357,8 @@ module darkriscv
                          FCT3==4 ? U1REG^S2REGX :
                          FCT3==3 ? U1REG<U2REGX?1:0 : // unsigned
                          FCT3==2 ? S1REG<S2REGX?1:0 : // signed
-                         FCT3==0 ? (XRCC&&FCT7[5] ? U1REG-U2REGX : U1REG+S2REGX) :
+                         //FCT3==0 ? (FCT7[4]==0 ? (XRCC&&FCT7[5] ? U1REG-U2REGX : U1REG+S2REGX) : (U1REG%S2REGX)) :
+                         FCT3==0 ?  XRCC&&FCT7[5] ? U1REG-U2REGX : U1REG+S2REGX :
                          FCT3==1 ? U1REG<<U2REGX[4:0] :                         
                          //FCT3==5 ? 
 `ifdef MODEL_TECH        
@@ -326,6 +381,19 @@ module darkriscv
     wire signed [15:0] K2TMP = S2REG[15:0];
     wire signed [31:0] KDATA = K1TMP*K2TMP;
 
+`endif
+
+`ifdef __MOD__
+
+    // MOD instruction rd = s1%s2 (OPCODE==7'b1111110)
+    // 0000 0000 1100 0101 1000 0101 0111 1110 = 00c5857E
+    // 0000000 00010 00001 000 00011 1111110
+    // 00000000001000001000000111111110
+    wire  [31:0] TMP = S1REG[31:0];
+    wire  [31:0] TMP2 = S2REG[31:0];
+    wire  [31:0] TMP3 = TMP / TMP2;
+    wire  [31:0] KDATA2 = (TMP - (TMP3 * TMP2));
+
 `endif
 
     // J/B-group of instructions (OPCODE==7'b1100011)
@@ -377,53 +445,155 @@ module darkriscv
 
     always@(posedge CLK)
     begin
+        
         RESMODE <= RESMODE +1;
 
+
+`ifdef __SSTACK__
+
+        // execute shadow stack thread select, set the selector to the upper immediate value
+        SS_THREAD_SEL = SSTH ? IDATA[31:12] : RES ? 0 : SS_THREAD_SEL;
+        
+        // switch upon which stack to use based on the shadow stack selector value
+        case (SS_THREAD_SEL)
+            1: SHADOW_STACK_2[SS2_INDEX_VAL] = SSST ? REG1[1] : SHADOW_STACK_2[SS2_INDEX_VAL];
+            default: SHADOW_STACK_1[SS1_INDEX_VAL] = SSST ? REG1[1] : SHADOW_STACK_1[SS1_INDEX_VAL];
+        endcase
+
+		// handle exeptions and trigger reset signal
+        case (SS_THREAD_SEL)
+
+            1: SS_RES =	SSTH ? (SS_THREAD_SEL > 1) : 
+						SSST ? (SS2_INDEX_VAL > 254) : 
+						SSLD ? (SS2_INDEX_VAL < 1)  : 
+						SS_RES ^ RES;
+
+            default: SS_RES = SSTH ? (SS_THREAD_SEL > 1) : 
+                              SSST ? (SS1_INDEX_VAL > 254) : 
+                              SSLD ? (SS1_INDEX_VAL < 1)  : 
+                              SS_RES ^ RES;
+        endcase
+        
+        
+        // set the shadow stack stack pointer
+        case (SS_THREAD_SEL)
+
+            1: 
+            begin
+            SS2_INDEX_VAL = SS_RES ? 0 :                 // shadow stack related reset clears sp
+           		            RES ? 0 :                    // normal reset clears sp
+                            SSLD ? (SS2_INDEX_VAL - 1) : // shadow stack load opcode dec the sp
+                            SSST ? (SS2_INDEX_VAL + 1) : // shadow stack store opcode inc the sp
+                            SS2_INDEX_VAL;               // in all other cases keep the sp the same
+            
+            // if selecting other stack only proccess reset signals               
+		    SS1_INDEX_VAL = SS_RES ? 0 :                 
+		                    RES ? 0 :
+		                    SS1_INDEX_VAL;
+            end
+
+           default: 
+           begin
+           SS1_INDEX_VAL = SS_RES ? 0 :                 // shadow stack related reset clears sp
+           		           RES ? 0 :                    // normal reset clears sp
+                           SSLD ? (SS1_INDEX_VAL - 1) : // shadow stack load opcode dec the sp
+                           SSST ? (SS1_INDEX_VAL + 1) : // shadow stack store opcode inc the sp
+                           SS1_INDEX_VAL;               // in all other cases keep the sp the same
+           
+           // if selecting other stack only proccess reset signals                    
+		   SS2_INDEX_VAL = SS_RES ? 0 :
+		                   RES ? 0 :
+		                   SS2_INDEX_VAL;
+           end
+        endcase
+       
+        // execute the authentication of the return address agaisnt the current value in the shadow stack upon loading
+		if(SSLD)
+		begin
+		
+		   // based on which stack is selected, the recovery address is set to the current value in the stack, or the ra register
+		   // if values mismatch recovery ra becomes the value in the shadow stack, else it will be the ra value in the ra register
+		   case (SS_THREAD_SEL)
+			   1: RECOVERY_RA = (REG1[1]^SHADOW_STACK_2[SS2_INDEX_VAL]) != 0 ? SHADOW_STACK_2[SS2_INDEX_VAL] : REG1[1];
+			   default: RECOVERY_RA = (REG1[1]^SHADOW_STACK_1[SS1_INDEX_VAL]) != 0 ? SHADOW_STACK_1[SS1_INDEX_VAL] : REG1[1];
+		   endcase
+		end     
+`endif   
+
+
+
+
 `ifdef __3STAGE__
-	    FLUSH <= RES ? 2 : HLT ? FLUSH :        // reset and halt                              
+	    FLUSH <= (RES) ? 2 : HLT ? FLUSH :        // reset and halt                              
 	                       FLUSH ? FLUSH-1 :                           
 	                       (JAL||JALR||BMUX) ? 2 : 0;  // flush the pipeline!
 `else
-        FLUSH <= RES ? 1 : HLT ? FLUSH :        // reset and halt
+        FLUSH <= (RES) ? 1 : HLT ? FLUSH :        // reset and halt
                        (JAL||JALR||BMUX);  // flush the pipeline!
 `endif
 
+
+
+
+
+
+    `ifdef __RV32E__
+            REG1[DPTR] <=   RES ? (RESMODE[3:0]==2 ? `__RESETSP__ : 0)  :        // reset sp
+    `else
+            REG1[DPTR] <=   RES ? (RESMODE[4:0]==2 ? `__RESETSP__ : 0)  :        // reset sp
+    `endif
+                           HLT ? REG1[DPTR] :        // halt
+                           !DPTR ? 0 :                // x0 = 0, always!
+                           AUIPC ? PC+SIMM :
+                           JAL||
+                           JALR ? NXPC :
+                           LUI ? SIMM :
+                           LCC ? LDATA :
+                           MCC||RCC ? RMDATA:
+    `ifdef __MAC16X16__                  
+                           MAC ? REG2[DPTR]+KDATA :
+    `endif
+    
+    // if using a shadow stack and executing the ssld opcode, the ra register will be set to the recovery ra register
+    `ifdef __SSTACK__                  
+                           SSLD ? RECOVERY_RA :
+    `endif
+                           //MCC ? MDATA :
+                           //RCC ? RDATA : 
+                           //CCC ? CDATA : 
+                                 REG1[DPTR];
+
+
+
+
+
 `ifdef __RV32E__
-        REG1[DPTR] <=   RES ? (RESMODE[3:0]==2 ? `__RESETSP__ : 0)  :        // reset sp
-`else
-        REG1[DPTR] <=   RES ? (RESMODE[4:0]==2 ? `__RESETSP__ : 0)  :        // reset sp
-`endif
-                       HLT ? REG1[DPTR] :        // halt
-                     !DPTR ? 0 :                // x0 = 0, always!
-                     AUIPC ? PC+SIMM :
-                      JAL||
-                      JALR ? NXPC :
-                       LUI ? SIMM :
-                       LCC ? LDATA :
-                  MCC||RCC ? RMDATA:
-`ifdef __MAC16X16__                  
-                       MAC ? REG2[DPTR]+KDATA :
-`endif
-                       //MCC ? MDATA :
-                       //RCC ? RDATA : 
-                       //CCC ? CDATA : 
-                             REG1[DPTR];
-`ifdef __RV32E__
-        REG2[DPTR] <=   RES ? (RESMODE[3:0]==2 ? `__RESETSP__ : 0) :        // reset sp
+        REG2[DPTR] <=   (RES) ? (RESMODE[3:0]==2 ? `__RESETSP__ : 0) :        // reset sp
 `else        
-        REG2[DPTR] <=   RES ? (RESMODE[4:0]==2 ? `__RESETSP__ : 0) :        // reset sp
+        REG2[DPTR] <=   (RES) ? (RESMODE[4:0]==2 ? `__RESETSP__ : 0) :        // reset sp
 `endif        
                        HLT ? REG2[DPTR] :        // halt
-                     !DPTR ? 0 :                // x0 = 0, always!
-                     AUIPC ? PC+SIMM :
-                      JAL||
-                      JALR ? NXPC :
+                       !DPTR ? 0 :                // x0 = 0, always!
+                       AUIPC ? PC+SIMM :
+                       JAL||
+                       JALR ? NXPC :
                        LUI ? SIMM :
                        LCC ? LDATA :
                   MCC||RCC ? RMDATA:
 `ifdef __MAC16X16__
                        MAC ? REG2[DPTR]+KDATA :
-`endif                       
+
+`endif
+`ifdef __MOD__
+                       MOD ? REG2[DPTR]<=KDATA2 :
+
+`endif 
+
+    // if using a shadow stack and executing the ssld opcode, the ra register will be set to the recovery ra register         
+    `ifdef __SSTACK__                  
+                       SSLD ? RECOVERY_RA :
+    `endif
+              
                        //MCC ? MDATA :
                        //RCC ? RDATA : 
                        //CCC ? CDATA : 
@@ -435,31 +605,36 @@ module darkriscv
 
         NXPC <= /*RES ? `__RESETPC__ :*/ HLT ? NXPC : NXPC2[XMODE];
 
-        NXPC2[RES ? RESMODE[0] : XMODE] <=  RES ? `__RESETPC__ : HLT ? NXPC2[XMODE] :   // reset and halt
+        NXPC2[(RES) ? RESMODE[0] : XMODE] <=  (RES) ? `__RESETPC__ : HLT ? NXPC2[XMODE] :   // reset and halt
                                       JREQ ? JVAL :                            // jmp/bra
 	                                         NXPC2[XMODE]+4;                   // normal flow
 
-        XMODE <= RES ? 0 : HLT ? XMODE :        // reset and halt
+        XMODE <= (RES) ? 0 : HLT ? XMODE :        // reset and halt
 	             XMODE==0&& IREQ&&(JAL||JALR||BMUX) ? 1 :         // wait pipeflush to switch to irq
                  XMODE==1&&!IREQ&&(JAL||JALR||BMUX) ? 0 : XMODE;  // wait pipeflush to return from irq
 
 `else
         NXPC <= /*RES ? `__RESETPC__ :*/ HLT ? NXPC : NXPC2;
 	
-	    NXPC2 <=  RES ? `__RESETPC__ : HLT ? NXPC2 :   // reset and halt
+	    NXPC2 <=  (RES) ? `__RESETPC__ : HLT ? NXPC2 :   // reset and halt
 	                 JREQ ? JVAL :                    // jmp/bra
 	                        NXPC2+4;                   // normal flow
 
 `endif
 
 `else
-        NXPC <= RES ? `__RESETPC__ : HLT ? NXPC :   // reset and halt
+        NXPC <= (RES) ? `__RESETPC__ : HLT ? NXPC :   // reset and halt
               JREQ ? JVAL :                   // jmp/bra
                      NXPC+4;                   // normal flow
 `endif
         PC   <= /*RES ? `__RESETPC__ :*/ HLT ? PC : NXPC; // current program counter
     end
 
+
+
+
+         
+            
     // IO and memory interface
 
     assign DATAO = SDATA; // SCC ? SDATA : 0;
@@ -487,7 +662,11 @@ module darkriscv
 `else
     assign IADDR = NXPC;
 `endif
+ 
+    
+    // output selector as a signal for debugging, i.e on leds
+    assign DEBUG = SS_THREAD_SEL;
+
 
-    assign DEBUG = { RES, |FLUSH, WR, RD };
 
 endmodule
diff --git a/rtl/darksocv.v b/rtl/darksocv.v
index 60879be..8234494 100644
--- a/rtl/darksocv.v
+++ b/rtl/darksocv.v
@@ -93,6 +93,7 @@
     `define BOARD_CK 100000000   
 `endif
 */
+
 module darksocv
 (
     input        XCLK,      // external clock
@@ -101,18 +102,27 @@ module darksocv
     input        UART_RXD,  // UART receive line
     output       UART_TXD,  // UART transmit line
 
-    output [3:0] LED,       // on-board leds
-    output [3:0] DEBUG      // osciloscope
+    output [3:0] LED        //,       // on-board leds
 );
 
+
+
     // internal/external reset logic
 
     reg [7:0] IRES = -1;
 
 `ifdef QMTECH_SDRAM_LX16
-    always@(posedge XCLK) IRES <= XRES==0 ? -1 : IRES[7] ? IRES-1 : 0; // reset low
+    always@(posedge XCLK) IRES <= XRES==1 ? -1 : IRES[7] ? IRES-1 : 0; // reset low
 `else
-    always@(posedge XCLK) IRES <= XRES==1 ? -1 : IRES[7] ? IRES-1 : 0; // reset high
+    always@(posedge XCLK) IRES <= XRES==0 ? -1 : IRES[7] ? IRES-1 : 0; // reset high
+    
+    // IRES == 1 then reset
+    // xres == 0 everything is fine
+    // then if IRES[7] is 1 then case is -1 or 0 for IRES
+    // if IRES[7] is 0 then IRES is cleared
+    /// IRES is either -1(cleared) or if already set cleared.
+    // RES 1 is reset
+    // RES == IRES[7]
 `endif
 
     // clock generator logic
@@ -183,8 +193,12 @@ module darksocv
 
     // when there is no need for a clock generator:
 
+    wire [7:0] BOARD_IRQ;
+    
+     //   always@(posedge XCLK) IRES <= XRES==0 ? -1 : IRES[7] ? IRES-1 : 0; // reset high
+
     wire CLK = XCLK;
-    wire RES = IRES[7];    
+    wire RES = IRES[7];// || BOARD_IRQ[6];    
 `endif
     // ro/rw memories
 
@@ -215,14 +229,12 @@ module darksocv
     wire [31:0] DATAI;
     wire        WR,RD;
     wire [3:0]  BE;
-
     wire [31:0] IOMUX [0:3];
-
+    wire HLT;
+    
     reg  [15:0] GPIOFF = 0;
     reg  [15:0] LEDFF  = 0;
     
-    wire HLT;
-    
 `ifdef __ICACHE__
 
     // instruction cache
@@ -244,6 +256,7 @@ module darksocv
 
     always@(posedge CLK)
     begin
+    
         ROMFF <= ROM[IADDR[11:2]];
 
         if(IFFX2)
@@ -476,7 +489,6 @@ module darksocv
     reg IACK = 0;
     reg [31:0] TIMERFF = 0; // timer disabled
 
-    wire [7:0] BOARD_IRQ;
 
     wire   [7:0] BOARD_ID = `BOARD_ID;              // board id
     wire   [7:0] BOARD_CM = (`BOARD_CK/1000000);    // board clock (MHz)
@@ -534,10 +546,11 @@ module darksocv
     end
 
     assign BOARD_IRQ[7]   = IREQ^IACK;
+    //assign BOARD_IRQ[6]   = IREQ^IACK;
 
     // unused irqs
 
-    assign BOARD_IRQ[6:2] = 0;
+    assign BOARD_IRQ[5:2] = 0;
     assign BOARD_IRQ[0]   = 0;
 
     assign HLT = !IHIT||!DHIT||!WHIT;
@@ -582,7 +595,7 @@ module darksocv
 `else
         .CLK(!CLK),
 `endif
-        .RES(RES),
+        .IRES(RES),
         .HLT(HLT),
 `ifdef __THREADING__        
         .IREQ(IREQ^IACK),
@@ -606,8 +619,8 @@ module darksocv
   end
 `endif
 
-    assign LED   = LEDFF[3:0];
-    
-    assign DEBUG = { GPIOFF[0], XTIMER, WR, RD }; // UDEBUG;
+    assign LED   = KDEBUG[3:0];
+    assign BOARD_IRQ[6] = XRES==0 ? 0 : BOARD_IRQ[6]; // reset low
+
 
 endmodule
\ No newline at end of file
diff --git a/rtl/pins_artya7.xdc b/rtl/pins_artya7.xdc
new file mode 100644
index 0000000..863da87
--- /dev/null
+++ b/rtl/pins_artya7.xdc
@@ -0,0 +1,197 @@
+## This file is a general .xdc for the Arty S7-50 Rev. B
+## To use it in a project:
+## - uncomment the lines corresponding to used pins
+## - rename the used ports (in each line, after get_ports) according to the top level signal names in the project
+
+## Clock signal
+#set_property -dict { PACKAGE_PIN F14   IOSTANDARD LVCMOS33 } [get_ports { XCLK }]; #IO_L13P_T2_MRCC_15 Sch=uclk
+#create_clock -add -name sys_clk_pin -period 83.333 -waveform {0 41.667} [get_ports { XCLK }];
+
+#set_property -dict { PACKAGE_PIN R2    IOSTANDARD SSTL135 } [get_ports { XCLK }]; #IO_L12P_T1_MRCC_34 Sch=ddr3_clk[200]
+#create_clock -add -name sys_clk_pin -period 10.000 -waveform {0 5.000}  [get_ports { XCLK}];
+set_property -dict { PACKAGE_PIN R2    IOSTANDARD SSTL135 } [get_ports { XCLK }]; #IO_L12P_T1_MRCC_34 Sch=ddr3_clk[200]   
+create_clock -add -name sys_clk_pin -period 10.000 -waveform {0 5.000}  [get_ports { XCLK }];   
+
+## Switches
+#set_property -dict { PACKAGE_PIN H14   IOSTANDARD LVCMOS33 } [get_ports { sw[0] }]; #IO_L20N_T3_A19_15 Sch=sw[0]
+#set_property -dict { PACKAGE_PIN H18   IOSTANDARD LVCMOS33 } [get_ports { sw[1] }]; #IO_L21P_T3_DQS_15 Sch=sw[1]
+#set_property -dict { PACKAGE_PIN G18   IOSTANDARD LVCMOS33 } [get_ports { sw[2] }]; #IO_L21N_T3_DQS_A18_15 Sch=sw[2]
+#set_property -dict { PACKAGE_PIN M5    IOSTANDARD SSTL135 } [get_ports { sw[3] }]; #IO_L6N_T0_VREF_34 Sch=sw[3]
+
+## RGB LEDs
+#set_property -dict { PACKAGE_PIN J15   IOSTANDARD LVCMOS33 } [get_ports { led0_r }]; #IO_L23N_T3_FWE_B_15 Sch=led0_r
+#set_property -dict { PACKAGE_PIN G17   IOSTANDARD LVCMOS33 } [get_ports { led0_g }]; #IO_L14N_T2_SRCC_15 Sch=led0_g
+#set_property -dict { PACKAGE_PIN F15   IOSTANDARD LVCMOS33 } [get_ports { led0_b }]; #IO_L13N_T2_MRCC_15 Sch=led0_b
+#set_property -dict { PACKAGE_PIN E15   IOSTANDARD LVCMOS33 } [get_ports { led1_r }]; #IO_L15N_T2_DQS_ADV_B_15 Sch=led1_r
+#set_property -dict { PACKAGE_PIN F18   IOSTANDARD LVCMOS33 } [get_ports { led1_g }]; #IO_L16P_T2_A28_15 Sch=led1_g
+#set_property -dict { PACKAGE_PIN E14   IOSTANDARD LVCMOS33 } [get_ports { led1_b }]; #IO_L15P_T2_DQS_15 Sch=led1_b
+
+## LEDs
+set_property -dict { PACKAGE_PIN E18   IOSTANDARD LVCMOS33 } [get_ports { LED[0] }]; #IO_L16N_T2_A27_15 Sch=led[2]
+set_property -dict { PACKAGE_PIN F13   IOSTANDARD LVCMOS33 } [get_ports { LED[1] }]; #IO_L17P_T2_A26_15 Sch=led[3]
+set_property -dict { PACKAGE_PIN E13   IOSTANDARD LVCMOS33 } [get_ports { LED[2] }]; #IO_L17N_T2_A25_15 Sch=led[4]
+set_property -dict { PACKAGE_PIN H15   IOSTANDARD LVCMOS33 } [get_ports { LED[3] }]; #IO_L18P_T2_A24_15 Sch=led[5]
+
+## Buttons
+#set_property -dict { PACKAGE_PIN G15   IOSTANDARD LVCMOS33 } [get_ports { btn[0] }]; #IO_L18N_T2_A23_15 Sch=btn[0]
+#set_property -dict { PACKAGE_PIN K16   IOSTANDARD LVCMOS33 } [get_ports { btn[1] }]; #IO_L19P_T3_A22_15 Sch=btn[1]
+#set_property -dict { PACKAGE_PIN J16   IOSTANDARD LVCMOS33 } [get_ports { btn[2] }]; #IO_L19N_T3_A21_VREF_15 Sch=btn[2]
+#set_property -dict { PACKAGE_PIN H13   IOSTANDARD LVCMOS33 } [get_ports { btn[3] }]; #IO_L20P_T3_A20_15 Sch=btn[3]
+
+## PMOD Header JA
+#set_property -dict { PACKAGE_PIN L17   IOSTANDARD LVCMOS33 } [get_ports { ja[0] }]; #IO_L4P_T0_D04_14 Sch=ja_p[1]
+#set_property -dict { PACKAGE_PIN L18   IOSTANDARD LVCMOS33 } [get_ports { ja[1] }]; #IO_L4N_T0_D05_14 Sch=ja_n[1]
+#set_property -dict { PACKAGE_PIN M14   IOSTANDARD LVCMOS33 } [get_ports { ja[2] }]; #IO_L5P_T0_D06_14 Sch=ja_p[2]
+#set_property -dict { PACKAGE_PIN N14   IOSTANDARD LVCMOS33 } [get_ports { ja[3] }]; #IO_L5N_T0_D07_14 Sch=ja_n[2]
+#set_property -dict { PACKAGE_PIN M16   IOSTANDARD LVCMOS33 } [get_ports { ja[4] }]; #IO_L7P_T1_D09_14 Sch=ja_p[3]
+#set_property -dict { PACKAGE_PIN M17   IOSTANDARD LVCMOS33 } [get_ports { ja[5] }]; #IO_L7N_T1_D10_14 Sch=ja_n[3]
+#set_property -dict { PACKAGE_PIN M18   IOSTANDARD LVCMOS33 } [get_ports { ja[6] }]; #IO_L8P_T1_D11_14 Sch=ja_p[4]
+#set_property -dict { PACKAGE_PIN N18   IOSTANDARD LVCMOS33 } [get_ports { ja[7] }]; #IO_L8N_T1_D12_14 Sch=ja_n[4]
+
+## PMOD Header JB
+#set_property -dict { PACKAGE_PIN P17   IOSTANDARD LVCMOS33 } [get_ports { jb[0] }]; #IO_L9P_T1_DQS_14 Sch=jb_p[1]
+#set_property -dict { PACKAGE_PIN P18   IOSTANDARD LVCMOS33 } [get_ports { jb[1] }]; #IO_L9N_T1_DQS_D13_14 Sch=jb_n[1]
+#set_property -dict { PACKAGE_PIN R18   IOSTANDARD LVCMOS33 } [get_ports { jb[2] }]; #IO_L10P_T1_D14_14 Sch=jb_p[2]
+#set_property -dict { PACKAGE_PIN T18   IOSTANDARD LVCMOS33 } [get_ports { jb[3] }]; #IO_L10N_T1_D15_14 Sch=jb_n[2]
+#set_property -dict { PACKAGE_PIN P14   IOSTANDARD LVCMOS33 } [get_ports { jb[4] }]; #IO_L11P_T1_SRCC_14 Sch=jb_p[3]
+#set_property -dict { PACKAGE_PIN P15   IOSTANDARD LVCMOS33 } [get_ports { jb[5] }]; #IO_L11N_T1_SRCC_14 Sch=jb_n[3]
+#set_property -dict { PACKAGE_PIN N15   IOSTANDARD LVCMOS33 } [get_ports { jb[6] }]; #IO_L12P_T1_MRCC_14 Sch=jb_p[4]
+#set_property -dict { PACKAGE_PIN P16   IOSTANDARD LVCMOS33 } [get_ports { jb[7] }]; #IO_L12N_T1_MRCC_14 Sch=jb_n[4]
+
+## PMOD Header JC
+#set_property -dict { PACKAGE_PIN U15   IOSTANDARD LVCMOS33 } [get_ports { jc[0] }]; #IO_L18P_T2_A12_D28_14 Sch=jc1/ck_io[41]
+#set_property -dict { PACKAGE_PIN V16   IOSTANDARD LVCMOS33 } [get_ports { jc[1] }]; #IO_L18N_T2_A11_D27_14 Sch=jc2/ck_io[40]
+#set_property -dict { PACKAGE_PIN U17   IOSTANDARD LVCMOS33 } [get_ports { jc[2] }]; #IO_L15P_T2_DQS_RDWR_B_14 Sch=jc3/ck_io[39]
+#set_property -dict { PACKAGE_PIN U18   IOSTANDARD LVCMOS33 } [get_ports { jc[3] }]; #IO_L15N_T2_DQS_DOUT_CSO_B_14 Sch=jc4/ck_io[38]
+#set_property -dict { PACKAGE_PIN U16   IOSTANDARD LVCMOS33 } [get_ports { jc[4] }]; #IO_L16P_T2_CSI_B_14 Sch=jc7/ck_io[37]
+#set_property -dict { PACKAGE_PIN P13   IOSTANDARD LVCMOS33 } [get_ports { jc[5] }]; #IO_L19P_T3_A10_D26_14 Sch=jc8/ck_io[36]
+#set_property -dict { PACKAGE_PIN R13   IOSTANDARD LVCMOS33 } [get_ports { jc[6] }]; #IO_L19N_T3_A09_D25_VREF_14 Sch=jc9/ck_io[35]
+#set_property -dict { PACKAGE_PIN V14   IOSTANDARD LVCMOS33 } [get_ports { jc[7] }]; #IO_L20P_T3_A08_D24_14 Sch=jc10/ck_io[34]
+
+## PMOD Header JD
+#set_property -dict { PACKAGE_PIN V15   IOSTANDARD LVCMOS33 } [get_ports { jd[0] }]; #IO_L20N_T3_A07_D23_14 Sch=jd1/ck_io[33]
+#set_property -dict { PACKAGE_PIN U12   IOSTANDARD LVCMOS33 } [get_ports { jd[1] }]; #IO_L21P_T3_DQS_14 Sch=jd2/ck_io[32]
+#set_property -dict { PACKAGE_PIN V13   IOSTANDARD LVCMOS33 } [get_ports { jd[2] }]; #IO_L21N_T3_DQS_A06_D22_14 Sch=jd3/ck_io[31]
+#set_property -dict { PACKAGE_PIN T12   IOSTANDARD LVCMOS33 } [get_ports { jd[3] }]; #IO_L22P_T3_A05_D21_14 Sch=jd4/ck_io[30]
+#set_property -dict { PACKAGE_PIN T13   IOSTANDARD LVCMOS33 } [get_ports { jd[4] }]; #IO_L22N_T3_A04_D20_14 Sch=jd7/ck_io[29]
+#set_property -dict { PACKAGE_PIN R11   IOSTANDARD LVCMOS33 } [get_ports { jd[5] }]; #IO_L23P_T3_A03_D19_14 Sch=jd8/ck_io[28]
+#set_property -dict { PACKAGE_PIN T11   IOSTANDARD LVCMOS33 } [get_ports { jd[6] }]; #IO_L23N_T3_A02_D18_14 Sch=jd9/ck_io[27]
+#set_property -dict { PACKAGE_PIN U11   IOSTANDARD LVCMOS33 } [get_ports { jd[7] }]; #IO_L24P_T3_A01_D17_14 Sch=jd10/ck_io[26]
+
+## USB-UART Interface
+set_property -dict { PACKAGE_PIN R12   IOSTANDARD LVCMOS33 } [get_ports { UART_TXD }]; #IO_25_14 Sch=uart_rxd_out
+set_property -dict { PACKAGE_PIN V12   IOSTANDARD LVCMOS33 } [get_ports { UART_RXD }]; #IO_L24N_T3_A00_D16_14 Sch=uart_txd_in
+## ChipKit Outer Digital Header
+set_property -dict { PACKAGE_PIN L13   IOSTANDARD LVCMOS33 } [get_ports { trigger }]; #IO_0_14 Sch=ck_io[0]
+#set_property -dict { PACKAGE_PIN N13   IOSTANDARD LVCMOS33 } [get_ports { rtcsig }]; #IO_L6N_T0_D08_VREF_14   Sch=ck_io[1]
+#set_property -dict { PACKAGE_PIN L16   IOSTANDARD LVCMOS33 } [get_ports { latch }]; #IO_L3N_T0_DQS_EMCCLK_14 Sch=ck_io[2]
+#set_property -dict { PACKAGE_PIN R14   IOSTANDARD LVCMOS33 } [get_ports { ck_io3 }]; #IO_L13P_T2_MRCC_14      Sch=ck_io[3]
+#set_property -dict { PACKAGE_PIN T14   IOSTANDARD LVCMOS33 } [get_ports { ck_io4 }]; #IO_L13N_T2_MRCC_14      Sch=ck_io[4]
+#set_property -dict { PACKAGE_PIN R16   IOSTANDARD LVCMOS33 } [get_ports { ck_io5 }]; #IO_L14P_T2_SRCC_14      Sch=ck_io[5]
+#set_property -dict { PACKAGE_PIN R17   IOSTANDARD LVCMOS33 } [get_ports { ck_io6 }]; #IO_L14N_T2_SRCC_14      Sch=ck_io[6]
+#set_property -dict { PACKAGE_PIN V17   IOSTANDARD LVCMOS33 } [get_ports { ck_io7 }]; #IO_L16N_T2_A15_D31_14   Sch=ck_io[7]
+#set_property -dict { PACKAGE_PIN R15   IOSTANDARD LVCMOS33 } [get_ports { ck_io8 }]; #IO_L17P_T2_A14_D30_14   Sch=ck_io[8]
+#set_property -dict { PACKAGE_PIN T15   IOSTANDARD LVCMOS33 } [get_ports { ck_io9 }]; #IO_L17N_T2_A13_D29_14   Sch=ck_io[9]
+
+## ChipKit SPI Header
+## NOTE: The ChipKit SPI header ports can also be used as digital I/O and share FPGA pins with ck_io10-13. Do not use both at the same time.
+#set_property -dict { PACKAGE_PIN H16   IOSTANDARD LVCMOS33 } [get_ports { ck_io10_ss   }]; #IO_L22P_T3_A17_15   Sch=ck_io10_ss
+#set_property -dict { PACKAGE_PIN H17   IOSTANDARD LVCMOS33 } [get_ports { ck_io11_mosi }]; #IO_L22N_T3_A16_15   Sch=ck_io11_mosi
+#set_property -dict { PACKAGE_PIN K14   IOSTANDARD LVCMOS33 } [get_ports { ck_io12_miso }]; #IO_L23P_T3_FOE_B_15 Sch=ck_io12_miso
+set_property -dict { PACKAGE_PIN G16   IOSTANDARD LVCMOS33 } [get_ports { rtcsig  }]; #IO_L14P_T2_SRCC_15  Sch=ck_io13_sck
+
+## ChipKit Inner Digital Header
+## NOTE: these pins are shared with PMOD Headers JC and JD and cannot be used at the same time as the applicable PMOD interface(s)
+#set_property -dict { PACKAGE_PIN U11   IOSTANDARD LVCMOS33 } [get_ports { ck_io26 }]; #IO_L24P_T3_A01_D17_14        Sch=jd10/ck_io[26]
+#set_property -dict { PACKAGE_PIN T11   IOSTANDARD LVCMOS33 } [get_ports { ck_io27 }]; #IO_L23N_T3_A02_D18_14        Sch=jd9/ck_io[27]
+#set_property -dict { PACKAGE_PIN R11   IOSTANDARD LVCMOS33 } [get_ports { ck_io28 }]; #IO_L23P_T3_A03_D19_14        Sch=jd8/ck_io[28]
+#set_property -dict { PACKAGE_PIN T13   IOSTANDARD LVCMOS33 } [get_ports { ck_io29 }]; #IO_L22N_T3_A04_D20_14        Sch=jd7/ck_io[29]
+#set_property -dict { PACKAGE_PIN T12   IOSTANDARD LVCMOS33 } [get_ports { ck_io30 }]; #IO_L22P_T3_A05_D21_14        Sch=jd4/ck_io[30]
+#set_property -dict { PACKAGE_PIN V13   IOSTANDARD LVCMOS33 } [get_ports { ck_io31 }]; #IO_L21N_T3_DQS_A06_D22_14    Sch=jd3/ck_io[31]
+#set_property -dict { PACKAGE_PIN U12   IOSTANDARD LVCMOS33 } [get_ports { ck_io32 }]; #IO_L21P_T3_DQS_14            Sch=jd2/ck_io[32]
+#set_property -dict { PACKAGE_PIN V15   IOSTANDARD LVCMOS33 } [get_ports { ck_io33 }]; #IO_L20N_T3_A07_D23_14        Sch=jd1/ck_io[33]
+#set_property -dict { PACKAGE_PIN V14   IOSTANDARD LVCMOS33 } [get_ports { ck_io34 }]; #IO_L20P_T3_A08_D24_14        Sch=jc10/ck_io[34]
+#set_property -dict { PACKAGE_PIN R13   IOSTANDARD LVCMOS33 } [get_ports { ck_io35 }]; #IO_L19N_T3_A09_D25_VREF_14   Sch=jc9/ck_io[35]
+#set_property -dict { PACKAGE_PIN P13   IOSTANDARD LVCMOS33 } [get_ports { ck_io36 }]; #IO_L19P_T3_A10_D26_14        Sch=jc8/ck_io[36]
+#set_property -dict { PACKAGE_PIN U16   IOSTANDARD LVCMOS33 } [get_ports { ck_io37 }]; #IO_L16P_T2_CSI_B_14          Sch=jc7/ck_io[37]
+#set_property -dict { PACKAGE_PIN U18   IOSTANDARD LVCMOS33 } [get_ports { ck_io38 }]; #IO_L15N_T2_DQS_DOUT_CSO_B_14 Sch=jc4/ck_io[38]
+#set_property -dict { PACKAGE_PIN U17   IOSTANDARD LVCMOS33 } [get_ports { ck_io39 }]; #IO_L15P_T2_DQS_RDWR_B_14     Sch=jc3/ck_io[39]
+#set_property -dict { PACKAGE_PIN V16   IOSTANDARD LVCMOS33 } [get_ports { ck_io40 }]; #IO_L18N_T2_A11_D27_14        Sch=jc2/ck_io[40]
+#set_property -dict { PACKAGE_PIN U15   IOSTANDARD LVCMOS33 } [get_ports { ck_io41 }]; #IO_L18P_T2_A12_D28_14        Sch=jc1/ck_io[41]
+
+## Dedicated Analog Inputs
+#set_property -dict { PACKAGE_PIN J10   } [get_ports { vp_in }]; #IO_L1P_T0_AD4P_35 Sch=v_p
+#set_property -dict { PACKAGE_PIN K9    } [get_ports { vn_in }]; #IO_L1N_T0_AD4N_35 Sch=v_n
+
+## ChipKit Outer Analog Header - as Single-Ended Analog Inputs
+## NOTE: These ports can be used as single-ended analog inputs with voltages from 0-3.3V (ChipKit analog pins A0-A5) or as digital I/O.
+## WARNING: Do not use both sets of constraints at the same time!
+## NOTE: The following constraints should be used with the XADC IP core when using these ports as analog inputs.
+#set_property -dict { PACKAGE_PIN B13   IOSTANDARD LVCMOS33 } [get_ports { vaux0_p  }]; #IO_L1P_T0_AD0P_15    Sch=ck_an_p[0]   ChipKit pin=A0
+#set_property -dict { PACKAGE_PIN A13   IOSTANDARD LVCMOS33 } [get_ports { vaux0_n  }]; #IO_L1N_T0_AD0N_15    Sch=ck_an_n[0]   ChipKit pin=A0
+#set_property -dict { PACKAGE_PIN B15   IOSTANDARD LVCMOS33 } [get_ports { vaux1_p }]; #IO_L3P_T0_DQS_AD1P_15 Sch=ck_an_p[1]   ChipKit pin=A1
+#set_property -dict { PACKAGE_PIN A15   IOSTANDARD LVCMOS33 } [get_ports { vaux1_n }]; #IO_L3N_T0_DQS_AD1N_15 Sch=ck_an_n[1]   ChipKit pin=A1
+#set_property -dict { PACKAGE_PIN E12   IOSTANDARD LVCMOS33 } [get_ports { vaux9_p }]; #IO_L5P_T0_AD9P_15     Sch=ck_an_p[2]   ChipKit pin=A2
+#set_property -dict { PACKAGE_PIN D12   IOSTANDARD LVCMOS33 } [get_ports { vaux9_n }]; #IO_L5N_T0_AD9N_15     Sch=ck_an_n[2]   ChipKit pin=A2
+#set_property -dict { PACKAGE_PIN B17   IOSTANDARD LVCMOS33 } [get_ports { vaux2_p }]; #IO_L7P_T1_AD2P_15     Sch=ck_an_p[3]   ChipKit pin=A3
+#set_property -dict { PACKAGE_PIN A17   IOSTANDARD LVCMOS33 } [get_ports { vaux2_n }]; #IO_L7N_T1_AD2N_15     Sch=ck_an_n[3]   ChipKit pin=A3
+#set_property -dict { PACKAGE_PIN C17   IOSTANDARD LVCMOS33 } [get_ports { vaux10_p }]; #IO_L8P_T1_AD10P_15   Sch=ck_an_p[4]   ChipKit pin=A4
+#set_property -dict { PACKAGE_PIN B18   IOSTANDARD LVCMOS33 } [get_ports { vaux10_n }]; #IO_L8N_T1_AD10N_15   Sch=ck_an_n[4]   ChipKit pin=A4
+#set_property -dict { PACKAGE_PIN E16   IOSTANDARD LVCMOS33 } [get_ports { vaux11_p }]; #IO_L10P_T1_AD11P_15  Sch=ck_an_p[5]   ChipKit pin=A5
+#set_property -dict { PACKAGE_PIN E17   IOSTANDARD LVCMOS33 } [get_ports { vaux11_n }]; #IO_L10N_T1_AD11N_15  Sch=ck_an_n[5]   ChipKit pin=A5
+## ChipKit Outer Analog Header - as Digital I/O
+## NOTE: The following constraints should be used when using these ports as digital I/O.
+#set_property -dict { PACKAGE_PIN G13   IOSTANDARD LVCMOS33 } [get_ports { ck_a0 }]; #IO_0_15            Sch=ck_a[0]
+#set_property -dict { PACKAGE_PIN B16   IOSTANDARD LVCMOS33 } [get_ports { ck_a1 }]; #IO_L4P_T0_15       Sch=ck_a[1]
+#set_property -dict { PACKAGE_PIN A16   IOSTANDARD LVCMOS33 } [get_ports { ck_a2 }]; #IO_L4N_T0_15       Sch=ck_a[2]
+#set_property -dict { PACKAGE_PIN C13   IOSTANDARD LVCMOS33 } [get_ports { ck_a3 }]; #IO_L6P_T0_15       Sch=ck_a[3]
+#set_property -dict { PACKAGE_PIN C14   IOSTANDARD LVCMOS33 } [get_ports { ck_a4 }]; #IO_L6N_T0_VREF_15  Sch=ck_a[4]
+#set_property -dict { PACKAGE_PIN D18   IOSTANDARD LVCMOS33 } [get_ports { ck_a5 }]; #IO_L11P_T1_SRCC_15 Sch=ck_a[5]
+
+## ChipKit Inner Analog Header - as Differential Analog Inputs
+## NOTE: These ports can be used as differential analog inputs with voltages from 0-1.0V (ChipKit analog pins A6-A11) or as digital I/O.
+## WARNING: Do not use both sets of constraints at the same time!
+## NOTE: The following constraints should be used with the XADC core when using these ports as analog inputs.
+#set_property -dict { PACKAGE_PIN B14   IOSTANDARD LVCMOS33 } [get_ports { vaux8_p }]; #IO_L2P_T0_AD8P_15     Sch=ad_p[8]    ChipKit pin=A5
+#set_property -dict { PACKAGE_PIN A14   IOSTANDARD LVCMOS33 } [get_ports { vaux8_p }]; #IO_L2N_T0_AD8N_15     Sch=ad_n[8]    ChipKit pin=A6
+#set_property -dict { PACKAGE_PIN D16   IOSTANDARD LVCMOS33 } [get_ports { vaux3_n }]; #IO_L9P_T1_DQS_AD3P_15 Sch=ad_p[3]    ChipKit pin=A7
+#set_property -dict { PACKAGE_PIN D17   IOSTANDARD LVCMOS33 } [get_ports { vaux3_n }]; #IO_L9N_T1_DQS_AD3N_15 Sch=ad_n[3]    ChipKit pin=A8
+## ChipKit Inner Analog Header - as Digital I/O
+## NOTE: The following constraints should be used when using the inner analog header ports as digital I/O.
+#set_property -dict { PACKAGE_PIN B14   IOSTANDARD LVCMOS33 } [get_ports { ck_a6  }]; #IO_L2P_T0_AD8P_15     Sch=ad_p[8]
+#set_property -dict { PACKAGE_PIN A14   IOSTANDARD LVCMOS33 } [get_ports { ck_a7  }]; #IO_L2N_T0_AD8N_15     Sch=ad_n[8]
+#set_property -dict { PACKAGE_PIN D16   IOSTANDARD LVCMOS33 } [get_ports { ck_a8  }]; #IO_L9P_T1_DQS_AD3P_15 Sch=ad_p[3]
+#set_property -dict { PACKAGE_PIN D17   IOSTANDARD LVCMOS33 } [get_ports { ck_a9  }]; #IO_L9N_T1_DQS_AD3N_15 Sch=ad_n[3]
+#set_property -dict { PACKAGE_PIN D14   IOSTANDARD LVCMOS33 } [get_ports { ck_a10 }]; #IO_L12P_T1_MRCC_15    Sch=ck_a10_r   (Cannot be used as an analog input)
+#set_property -dict { PACKAGE_PIN D15   IOSTANDARD LVCMOS33 } [get_ports { ck_a11 }]; #IO_L12N_T1_MRCC_15    Sch=ck_a11_r   (Cannot be used as an analog input)
+
+## ChipKit I2C
+#set_property -dict { PACKAGE_PIN J14   IOSTANDARD LVCMOS33 } [get_ports { ck_scl }]; #IO_L24N_T3_RS0_15 Sch=ck_scl
+#set_property -dict { PACKAGE_PIN J13   IOSTANDARD LVCMOS33 } [get_ports { ck_sda }]; #IO_L24P_T3_RS1_15 Sch=ck_sda
+
+## Misc. ChipKit Ports
+#set_property -dict { PACKAGE_PIN K13   IOSTANDARD LVCMOS33 } [get_ports { ck_ioa }]; #IO_25_15 Sch=ck_ioa
+set_property -dict { PACKAGE_PIN C18   IOSTANDARD LVCMOS33 } [get_ports { XRES }]; #IO_L11N_T1_SRCC_15
+
+## Quad SPI Flash
+## Note: the SCK clock signal can be driven using the STARTUPE2 primitive
+#set_property -dict { PACKAGE_PIN M13   IOSTANDARD LVCMOS33 } [get_ports { qspi_cs }]; #IO_L6P_T0_FCS_B_14 Sch=qspi_cs
+#set_property -dict { PACKAGE_PIN K17   IOSTANDARD LVCMOS33 } [get_ports { qspi_dq[0] }]; #IO_L1P_T0_D00_MOSI_14 Sch=qspi_dq[0]
+#set_property -dict { PACKAGE_PIN K18   IOSTANDARD LVCMOS33 } [get_ports { qspi_dq[1] }]; #IO_L1N_T0_D01_DIN_14 Sch=qspi_dq[1]
+#set_property -dict { PACKAGE_PIN L14   IOSTANDARD LVCMOS33 } [get_ports { qspi_dq[2] }]; #IO_L2P_T0_D02_14 Sch=qspi_dq[2]
+#set_property -dict { PACKAGE_PIN M15   IOSTANDARD LVCMOS33 } [get_ports { qspi_dq[3] }]; #IO_L2N_T0_D03_14 Sch=qspi_dq[3]
+
+## Configuration options, can be used for all designs
+#set_property BITSTREAM.CONFIG.CONFIGRATE 50 [current_design]
+#set_property CONFIG_VOLTAGE 3.3 [current_design]
+#set_property CFGBVS VCCO [current_design]
+#set_property BITSTREAM.CONFIG.SPI_BUSWIDTH 4 [current_design]
+#set_property CONFIG_MODE SPIx4 [current_design] 
+
+## SW3 is assigned to a pin M5 in the 1.35v bank. This pin can also be used as
+## the VREF for BANK 34. To ensure that SW3 does not define the reference voltage
+## and to be able to use this pin as an ordinary I/O the following property must
+## be set to enable an internal VREF for BANK 34. Since a 1.35v supply is being
+## used the internal reference is set to half that value (i.e. 0.675v). Note that
+## this property must be set even if SW3 is not used in the design.
+#set_property INTERNAL_VREF 0.675 [get_iobanks 34]
diff --git a/socbackup.txt b/socbackup.txt
new file mode 100644
index 0000000..2632500
--- /dev/null
+++ b/socbackup.txt
@@ -0,0 +1,661 @@
+/*
+ * Copyright (c) 2018, Marcelo Samsoniuk
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * 
+ * * Redistributions of source code must retain the above copyright notice, this
+ *   list of conditions and the following disclaimer.
+ * 
+ * * Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ * 
+ * * Neither the name of the copyright holder nor the names of its
+ *   contributors may be used to endorse or promote products derived from
+ *   this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+ */
+
+`timescale 1ns / 1ps
+`include "../rtl/config.vh"
+
+// the following defines are user defined:
+
+//`define __ICACHE__              // instruction cache
+//`define __DCACHE__              // data cache (bug: simulation only)
+//`define __WAITSTATES__          // wait-state tests, no cache
+//`define __3STAGE__              // single phase 3-state pipeline 
+//`define __THREADING__           // interrupt controller
+
+// the board is automatically defined in the xst/xise files via 
+// Makefile or ISE otherwise, please define you board name here:
+
+//`define AVNET_MICROBOARD_LX9
+//`define XILINX_AC701_A200
+//`define QMTECH_SDRAM_LX16
+
+// the following defines are automatically defined:
+/*
+`ifdef __ICARUS__
+    `define SIMULATION 1
+`endif
+
+`ifdef XILINX_ISIM
+    `define SIMULATION 2
+`endif
+
+`ifdef MODEL_TECH
+    `define SIMULATION 3
+`endif
+
+`ifdef XILINX_SIMULATOR
+    `define SIMULATION 4
+`endif
+
+`ifdef AVNET_MICROBOARD_LX9
+    `define BOARD_ID 1
+    `define BOARD_CK 100000000
+    
+    // example of DCM logic:
+    //
+    //`define BOARD_CK_REF 66666666 
+    //`define BOARD_CK_MUL 3
+    //`define BOARD_CK_DIV 2
+`endif
+
+`ifdef XILINX_AC701_A200
+    `define BOARD_ID 2
+    //`define BOARD_CK 90000000
+    `define BOARD_CK_REF 90000000 
+    `define BOARD_CK_MUL 4
+    `define BOARD_CK_DIV 2
+`endif
+
+`ifdef QMTECH_SDRAM_LX16
+    `define BOARD_ID 3
+    `define BOARD_CK 50000000
+`endif
+
+`ifndef BOARD_ID
+    `define BOARD_ID 0    
+    `define BOARD_CK 100000000   
+`endif
+*/
+module darksocv
+(
+    input        XCLK,      // external clock
+    input        XRES,      // external reset
+    
+    input        UART_RXD,  // UART receive line
+    output       UART_TXD,  // UART transmit line
+
+    output [3:0] LED,       // on-board leds
+    input       latch,
+    output      be_int,
+    input      sclk
+   // output [3:0] DEBUG      // osciloscope
+);
+
+    reg be_int_reg;
+    reg[7:0] clk_count = 0;
+    always@(posedge sclk)
+    begin
+        if(latch)
+        begin
+            clk_count = clk_count + 1;
+            be_int_reg = 1;
+        end
+        else
+        begin
+            clk_count = 0;
+            be_int_reg = 0;
+        end
+    end
+    
+    always@(posedge latch)
+    begin
+       // be_int_reg = 0;
+        clk_count = 0;
+
+    end
+    
+    assign be_int = be_int_reg ? 1'bz : (latch ? 0 : 1'bz);
+
+
+    // internal/external reset logic
+
+    reg [7:0] IRES = -1;
+
+`ifdef QMTECH_SDRAM_LX16
+    always@(posedge XCLK) IRES <= XRES==1 ? -1 : IRES[7] ? IRES-1 : 0; // reset low
+`else
+    always@(posedge XCLK) IRES <= XRES==0 ? -1 : IRES[7] ? IRES-1 : 0; // reset high
+    // IRES == 1 then reset
+    // xres == 0 everything is fine
+    // then if IRES[7] is 1 then case is -1 or 0 for IRES
+    // if IRES[7] is 0 then IRES is cleared
+    /// IRES is either -1(cleared) or if already set cleared.
+    // RES 1 is reset
+    // RES == IRES[7]
+`endif
+
+    // clock generator logic
+    
+`ifdef BOARD_CK_REF
+
+    //`define BOARD_CK (`BOARD_CK_REF * `BOARD_CK_MUL / `BOARD_CK_DIV)
+
+    wire DCM_LOCKED;
+    
+    // useful script to calculate MUL/DIV values:
+    // 
+    // awk 'BEGIN { for(m=2;m<=32;m++) for(d=1;d<=32;d++) print 66.666*m/d,m,d }' | sort -n
+    // 
+    // example: reference w/ 66MHz, m=19, d=13 and fx=97.4MHz. not so useful after I discovered 
+    // that my evaluation board already has external clock generator :D
+    
+   DCM_SP #(
+      .CLKDV_DIVIDE(2.0),                   // CLKDV divide value
+                                            // (1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,9,10,11,12,13,14,15,16).
+      .CLKFX_DIVIDE(`BOARD_CK_DIV),                     // Divide value on CLKFX outputs - D - (1-32)
+      .CLKFX_MULTIPLY(`BOARD_CK_MUL),                   // Multiply value on CLKFX outputs - M - (2-32)
+      .CLKIN_DIVIDE_BY_2("FALSE"),          // CLKIN divide by two (TRUE/FALSE)
+      .CLKIN_PERIOD((1e9/`BOARD_CK_REF)),                  // Input clock period specified in nS
+      .CLKOUT_PHASE_SHIFT("NONE"),          // Output phase shift (NONE, FIXED, VARIABLE)
+      .CLK_FEEDBACK("1X"),                  // Feedback source (NONE, 1X, 2X)
+      .DESKEW_ADJUST("SYSTEM_SYNCHRONOUS"), // SYSTEM_SYNCHRNOUS or SOURCE_SYNCHRONOUS
+      .DFS_FREQUENCY_MODE("LOW"),           // Unsupported - Do not change value
+      .DLL_FREQUENCY_MODE("LOW"),           // Unsupported - Do not change value
+      .DSS_MODE("NONE"),                    // Unsupported - Do not change value
+      .DUTY_CYCLE_CORRECTION("TRUE"),       // Unsupported - Do not change value
+      .FACTORY_JF(16'hc080),                // Unsupported - Do not change value
+      .PHASE_SHIFT(0),                      // Amount of fixed phase shift (-255 to 255)
+      .STARTUP_WAIT("FALSE")                // Delay config DONE until DCM_SP LOCKED (TRUE/FALSE)
+   )
+   DCM_SP_inst (
+      //.CLK0(CLK0),         // 1-bit output: 0 degree clock output
+      //.CLK180(CLK180),     // 1-bit output: 180 degree clock output
+      //.CLK270(CLK270),     // 1-bit output: 270 degree clock output
+      //.CLK2X(CLK2X),       // 1-bit output: 2X clock frequency clock output
+      //.CLK2X180(CLK2X180), // 1-bit output: 2X clock frequency, 180 degree clock output
+      //.CLK90(CLK90),       // 1-bit output: 90 degree clock output
+      //.CLKDV(CLKDV),       // 1-bit output: Divided clock output
+      .CLKFX(CLK),       // 1-bit output: Digital Frequency Synthesizer output (DFS)
+      //.CLKFX180(CLKFX180), // 1-bit output: 180 degree CLKFX output
+      .LOCKED(DCM_LOCKED),     // 1-bit output: DCM_SP Lock Output
+      //.PSDONE(PSDONE),     // 1-bit output: Phase shift done output
+      //.STATUS(STATUS),     // 8-bit output: DCM_SP status output
+      //.CLKFB(CLKFB),       // 1-bit input: Clock feedback input
+      .CLKIN(XCLK),       // 1-bit input: Clock input
+      //.DSSEN(DSSEN),       // 1-bit input: Unsupported, specify to GND.
+      //.PSCLK(PSCLK),       // 1-bit input: Phase shift clock input
+      .PSEN(1'b0),         // 1-bit input: Phase shift enable
+      //.PSINCDEC(PSINCDEC), // 1-bit input: Phase shift increment/decrement input
+      .RST(IRES[7])            // 1-bit input: Active high reset input
+   );
+
+    reg [7:0] DRES = -1;
+    
+    always@(posedge CLK)
+    begin    
+        DRES <= DCM_LOCKED==0 ? -1 : DRES ? DRES-1 : 0;
+    end
+
+    wire RES = DRES[7];
+
+`else    
+
+    // when there is no need for a clock generator:
+
+    wire [7:0] BOARD_IRQ;
+    
+     //   always@(posedge XCLK) IRES <= XRES==0 ? -1 : IRES[7] ? IRES-1 : 0; // reset high
+
+
+
+    wire CLK = XCLK;
+    wire RES = IRES[7];// || BOARD_IRQ[6];    
+`endif
+    // ro/rw memories
+
+    reg [31:0] ROM [0:1023]; // ro memory
+    reg [31:0] RAM [0:1023]; // rw memory
+
+    // memory initialization
+
+    integer i;
+    initial
+    begin
+        for(i=0;i!=1024;i=i+1)
+        begin        
+            ROM[i] = 32'd0;
+            RAM[i] = 32'd0;
+        end
+
+        $readmemh("../src/darksocv.rom",ROM);        
+        $readmemh("../src/darksocv.ram",RAM);
+    end
+
+    // darkriscv bus interface
+
+    wire [31:0] IADDR;
+    wire [31:0] DADDR;
+    wire [31:0] IDATA;    
+    wire [31:0] DATAO;        
+    wire [31:0] DATAI;
+    wire        WR,RD;
+    wire [3:0]  BE;
+
+    wire [31:0] IOMUX [0:3];
+
+    reg  [15:0] GPIOFF = 0;
+    reg  [15:0] LEDFF  = 0;
+    
+    wire HLT;
+    
+`ifdef __ICACHE__
+
+    // instruction cache
+
+    reg  [55:0] ICACHE [0:63]; // instruction cache
+    reg  [63:0] ITAG = 0;      // instruction cache tag
+    
+    wire [5:0]  IPTR    = IADDR[7:2];
+    wire [55:0] ICACHEO = ICACHE[IPTR];
+    wire [31:0] ICACHED = ICACHEO[31: 0]; // data
+    wire [31:8] ICACHEA = ICACHEO[55:32]; // address
+    
+    wire IHIT = ITAG[IPTR] && ICACHEA==IADDR[31:8];
+
+    reg  IFFX = 0;
+    reg IFFX2 = 0;
+    
+    reg [31:0] ROMFF;
+
+    always@(posedge CLK)
+    begin
+        ROMFF <= ROM[IADDR[11:2]];
+
+        if(IFFX2)
+        begin
+            IFFX2 <= 0;
+            IFFX  <= 0;
+        end
+        else    
+        if(!IHIT)
+        begin
+            ICACHE[IPTR] <= { IADDR[31:8], ROMFF };
+            ITAG[IPTR]    <= IFFX; // cached!
+            IFFX          <= 1;
+            IFFX2         <= IFFX;
+        end
+    end
+
+    assign IDATA = ICACHED;
+
+`else
+
+    reg [31:0] ROMFF;
+
+`ifdef __WAITSTATES__
+    
+    reg [1:0] IHITACK = 0;
+    
+    wire IHIT = !(IHITACK!=1);
+    
+    always@(posedge CLK) // stage #1.0
+    begin
+        IHITACK <= RES ? 1 : IHITACK ? IHITACK-1 : 1; // wait-states
+    end    
+`else
+
+    wire IHIT = 1;
+    
+`endif
+
+    always@(posedge CLK) // stage #0.5    
+    begin
+        if(!HLT)
+        begin
+            ROMFF <= ROM[IADDR[11:2]];
+        end
+    end
+
+    //assign IDATA = ROM[IADDR[11:2]];
+
+//    always@(posedge CLK)
+//    begin   
+//        // weird bug appears to be related to the "sw ra,12(sp)" instruction.
+//        if(WR&&DADDR[31]==0&&DADDR[12]==0)
+//        begin
+//            ROMBUG <= IADDR;
+//        end
+//    end
+    
+    assign IDATA = ROMFF;
+
+`endif
+
+`ifdef __DCACHE__
+
+    // data cache
+
+    reg  [55:0] DCACHE [0:63]; // data cache
+    reg  [63:0] DTAG = 0;      // data cache tag
+
+    wire [5:0]  DPTR    = DADDR[7:2];
+    wire [55:0] DCACHEO = DCACHE[DPTR];
+    wire [31:0] DCACHED = DCACHEO[31: 0]; // data
+    wire [31:8] DCACHEA = DCACHEO[55:32]; // address
+
+    wire DHIT = RD&&!DADDR[31]&&DADDR[12] ? DTAG[DPTR] && DCACHEA==DADDR[31:8] : 1;
+
+    reg   FFX = 0;
+    reg  FFX2 = 0;
+    
+    reg [31:0] RAMFF;    
+
+    reg        WTAG    = 0;
+    reg [31:0] WCACHEA = 0;
+    
+    wire WHIT = WR&&!DADDR[31]&&DADDR[12] ? WTAG&&WCACHEA==DADDR : 1;
+
+    always@(posedge CLK)
+    begin
+        RAMFF <= RAM[DADDR[11:2]];
+
+        if(FFX2)
+        begin
+            FFX2 <= 0;
+            FFX  <= 0;
+            WCACHEA <= 0;
+            WTAG <= 0;
+        end
+        else
+        if(!WHIT)
+        begin
+            //individual byte/word/long selection, thanks to HYF!
+            if(BE[0]) RAM[DADDR[11:2]][0 * 8 + 7: 0 * 8] <= DATAO[0 * 8 + 7: 0 * 8];
+            if(BE[1]) RAM[DADDR[11:2]][1 * 8 + 7: 1 * 8] <= DATAO[1 * 8 + 7: 1 * 8];
+            if(BE[2]) RAM[DADDR[11:2]][2 * 8 + 7: 2 * 8] <= DATAO[2 * 8 + 7: 2 * 8];
+            if(BE[3]) RAM[DADDR[11:2]][3 * 8 + 7: 3 * 8] <= DATAO[3 * 8 + 7: 3 * 8];        
+
+            DCACHE[DPTR][0 * 8 + 7: 0 * 8] <= BE[0] ? DATAO[0 * 8 + 7: 0 * 8] : RAMFF[0 * 8 + 7: 0 * 8];
+            DCACHE[DPTR][1 * 8 + 7: 1 * 8] <= BE[1] ? DATAO[1 * 8 + 7: 1 * 8] : RAMFF[1 * 8 + 7: 1 * 8];
+            DCACHE[DPTR][2 * 8 + 7: 2 * 8] <= BE[2] ? DATAO[2 * 8 + 7: 2 * 8] : RAMFF[2 * 8 + 7: 2 * 8];
+            DCACHE[DPTR][3 * 8 + 7: 3 * 8] <= BE[3] ? DATAO[3 * 8 + 7: 3 * 8] : RAMFF[3 * 8 + 7: 3 * 8];
+
+            DCACHE[DPTR][55:32] <= DADDR[31:8];
+            
+            //DCACHE[DPTR] <= { DADDR[31:8],
+            //                        BE[3] ? DATAO[3 * 8 + 7: 3 * 8] : RAMFF[3 * 8 + 7: 3 * 8],
+            //                        BE[2] ? DATAO[2 * 8 + 7: 2 * 8] : RAMFF[2 * 8 + 7: 2 * 8],
+            //                        BE[1] ? DATAO[1 * 8 + 7: 1 * 8] : RAMFF[1 * 8 + 7: 1 * 8],
+            //                        BE[0] ? DATAO[0 * 8 + 7: 0 * 8] : RAMFF[0 * 8 + 7: 0 * 8]
+            //                };
+
+            DTAG[DPTR]   <= FFX; // cached!
+            WTAG         <= FFX;
+
+            WCACHEA      <= DADDR;
+
+            FFX          <= 1;
+            FFX2         <= FFX;
+        end
+        else
+        if(!DHIT)
+        begin
+            DCACHE[DPTR] <= { DADDR[31:8], RAMFF };
+            DTAG[DPTR]   <= FFX; // cached!
+            FFX          <= 1;
+            FFX2         <= FFX;
+        end        
+    end
+    
+    assign DATAI = DADDR[31] ? IOMUX[DADDR[3:2]] : DCACHED;
+
+`else
+
+    // no cache!
+
+    reg [31:0] RAMFF;
+`ifdef __WAITSTATES__
+    
+    reg [1:0] DACK = 0;
+    
+    wire WHIT = 1;
+    wire DHIT = !((WR||RD) && DACK!=1);
+    
+    always@(posedge CLK) // stage #1.0
+    begin
+        DACK <= RES ? 0 : DACK ? DACK-1 : (RD||WR) ? 1 : 0; // wait-states
+    end
+
+`elsif __3STAGE__
+
+    // for single phase clock: 1 wait state in read op always required!
+
+    reg [1:0] DACK = 0;
+    
+    wire WHIT = 1;
+    wire DHIT = !((RD||WR) && DACK!=1); // the WR operatio does not need ws. in this config.
+    
+    always@(posedge CLK) // stage #1.0
+    begin
+        DACK <= RES ? 0 : DACK ? DACK-1 : (RD||WR) ? 1 : 0; // wait-states
+    end
+
+`else
+
+    // for dual phase clock: 0 wait state
+
+    wire WHIT = 1;
+    wire DHIT = 1;
+
+`endif
+    
+    always@(posedge CLK) // stage #1.5
+    begin
+        RAMFF <= RAM[DADDR[11:2]];
+    end
+
+    //assign DATAI = DADDR[31] ? IOMUX  : RAM[DADDR[11:2]];
+    
+    reg [31:0] IOMUXFF;
+
+    //individual byte/word/long selection, thanks to HYF!
+    
+    always@(posedge CLK)
+    begin    
+
+`ifdef __3STAGE__
+
+        // read-modify-write operation w/ 1 wait-state:
+
+        if(!HLT&&WR&&DADDR[31]==0&&DADDR[12]==1)
+        begin
+            RAM[DADDR[11:2]] <= {
+                                    BE[3] ? DATAO[3 * 8 + 7: 3 * 8] : RAMFF[3 * 8 + 7: 3 * 8],
+                                    BE[2] ? DATAO[2 * 8 + 7: 2 * 8] : RAMFF[2 * 8 + 7: 2 * 8],
+                                    BE[1] ? DATAO[1 * 8 + 7: 1 * 8] : RAMFF[1 * 8 + 7: 1 * 8],
+                                    BE[0] ? DATAO[0 * 8 + 7: 0 * 8] : RAMFF[0 * 8 + 7: 0 * 8]
+                                };
+        end
+
+`else
+        // write-only operation w/ 0 wait-states:
+
+        if(WR&&DADDR[31]==0&&DADDR[12]==1&&BE[3]) RAM[DADDR[11:2]][3 * 8 + 7: 3 * 8] <= DATAO[3 * 8 + 7: 3 * 8];
+        if(WR&&DADDR[31]==0&&DADDR[12]==1&&BE[2]) RAM[DADDR[11:2]][2 * 8 + 7: 2 * 8] <= DATAO[2 * 8 + 7: 2 * 8];
+        if(WR&&DADDR[31]==0&&DADDR[12]==1&&BE[1]) RAM[DADDR[11:2]][1 * 8 + 7: 1 * 8] <= DATAO[1 * 8 + 7: 1 * 8];
+        if(WR&&DADDR[31]==0&&DADDR[12]==1&&BE[0]) RAM[DADDR[11:2]][0 * 8 + 7: 0 * 8] <= DATAO[0 * 8 + 7: 0 * 8];
+
+`endif
+
+        IOMUXFF <= IOMUX[DADDR[3:2]]; // read w/ 2 wait-states
+    end    
+
+    //assign DATAI = DADDR[31] ? IOMUX[DADDR[3:2]]  : RAMFF;
+    assign DATAI = DADDR[31] ? /*IOMUX[DADDR[3:2]]*/ IOMUXFF  : RAMFF;
+
+`endif
+
+    // io for debug
+
+    reg IREQ = 0;
+    reg IACK = 0;
+    reg [31:0] TIMERFF = 0; // timer disabled
+
+
+    wire   [7:0] BOARD_ID = `BOARD_ID;              // board id
+    wire   [7:0] BOARD_CM = (`BOARD_CK/1000000);    // board clock (MHz)
+    wire   [7:0] BOARD_CK = (`BOARD_CK/10000)%100;  // board clock (kHz)
+
+    assign IOMUX[0] = { BOARD_IRQ, BOARD_CK, BOARD_CM, BOARD_ID };
+    //assign IOMUX[1] = from UART!
+    assign IOMUX[2] = { GPIOFF, LEDFF };
+    assign IOMUX[3] = TIMERFF;
+
+    reg [31:0] TIMER = 0;
+
+    reg XTIMER = 0;
+
+    always@(posedge CLK)
+    begin
+        if(WR&&DADDR[31]&&DADDR[3:0]==4'b1000)
+        begin
+            LEDFF <= DATAO[15:0];
+        end
+
+        if(WR&&DADDR[31]&&DADDR[3:0]==4'b1010)
+        begin
+            GPIOFF <= DATAO[31:16];
+        end
+
+        if(RES)
+            TIMERFF <= 0;
+        else
+        if(WR&&DADDR[31]&&DADDR[3:0]==4'b1100)
+        begin
+            TIMERFF <= DATAO[31:0];
+        end
+        
+`ifdef __THREADING__
+        if(RES)
+            IACK <= IREQ;
+        else
+        if(WR&&DADDR[31]&&DADDR[3:0]==4'b0011)
+        begin
+            IACK <= IREQ;
+        end
+        
+        if(TIMERFF)
+        begin        
+            TIMER <= TIMER ? TIMER-1 : TIMERFF;
+        
+            if(TIMER==0)
+            begin
+                IREQ <= !IACK;
+                XTIMER <= !XTIMER;
+            end
+        end
+`endif        
+    end
+
+    assign BOARD_IRQ[7]   = IREQ^IACK;
+    //assign BOARD_IRQ[6]   = IREQ^IACK;
+
+    // unused irqs
+
+    assign BOARD_IRQ[5:2] = 0;
+    assign BOARD_IRQ[0]   = 0;
+
+    assign HLT = !IHIT||!DHIT||!WHIT;
+
+    // darkuart
+  
+    wire [3:0] UDEBUG;
+    wire       UART_IRQ;
+
+    darkuart
+//    #( 
+//      .BAUD((`BOARD_CK/115200))
+//    )
+    uart0
+    (
+      .CLK(CLK),
+      .RES(RES),
+      .RD(!HLT&&RD&&DADDR[31]&&DADDR[3:2]==1),
+      .WR(!HLT&&WR&&DADDR[31]&&DADDR[3:2]==1),
+      .BE(BE),
+      .DATAI(DATAO),
+      .DATAO(IOMUX[1]),
+      .IRQ(BOARD_IRQ[1]),
+      .RXD(UART_RXD),
+      .TXD(UART_TXD),
+      .DEBUG(UDEBUG)
+    );
+
+    // darkriscv
+
+    wire [3:0] KDEBUG;
+
+    darkriscv
+//    #(
+//        .RESET_PC(32'h00000000),
+//        .RESET_SP(32'h00002000)
+//    ) 
+    core0 
+    (
+`ifdef __3STAGE__
+        .CLK(CLK),
+`else
+        .CLK(!CLK),
+`endif
+        .IRES(RES),
+        .HLT(HLT),
+`ifdef __THREADING__        
+        .IREQ(IREQ^IACK),
+`endif        
+        .IDATA(IDATA),
+        .IADDR(IADDR),
+        .DATAI(DATAI),
+        .DATAO(DATAO),
+        .DADDR(DADDR),        
+        .BE(BE),
+        .WR(WR),
+        .RD(RD),
+        .PAC_IRQ(BOARD_IRQ[6]),
+        .DEBUG(KDEBUG)
+    );
+
+`ifdef __ICARUS__
+  initial
+  begin
+    $dumpfile("darksocv.vcd");
+    $dumpvars(0, core0);
+  end
+`endif
+
+    //assign LED   = KDEBUG[3:0];//LEDFF[3:0];
+        assign LED   = KDEBUG[3:0];// BOARD_IRQ[6];//LEDFF[3:0];
+        assign BOARD_IRQ[6] = XRES==0 ? 0 : BOARD_IRQ[6]; // reset low
+        
+        //assign CS_cell = gate ? 1'bz : CS_sc;
+
+
+    //assign DEBUG = { GPIOFF[0], XTIMER, WR, RD }; // UDEBUG;
+
+endmodule
\ No newline at end of file
diff --git a/src/Makefile b/src/Makefile
index 4fdde5d..5147500 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -33,19 +33,20 @@ endif
 
 ifndef CROSS
 
-    ARCH = rv32e
+    ARCH = rv32i
+	#ABI = ilp32e
     #ARCH = rv32i
     
     #TODO: better way to switch little/big-endian:
     #ENDIAN = _le # gcc for little-endian
     #ENDIAN = _be # gcc for big-endian
 
-    CROSS = riscv32-embedded$(ENDIAN)-elf
+    CROSS = riscv32-unknown$(ENDIAN)-elf
     #CROSS = riscv-elf
     #CROSS = riscv32-unknown-elf
     #CROSS = riscv32-embedded-elf
     
-    CCPATH = /usr/local/share/gcc-$(CROSS)/bin/
+    CCPATH = /opt/riscv-exp/bin
     #CCPATH = /usr/local/share/toolchain-$(CROSS)/bin    
 endif
 
@@ -59,7 +60,7 @@ endif
     OC = $(CCPATH)/$(CROSS)-objcopy
     OD = $(CCPATH)/$(CROSS)-objdump
 
-CCFLAGS = -Wall -I./include -Os -fomit-frame-pointer -march=$(ARCH) -D__RISCV__ -DBUILD="\"$(BUILD)\"" -DARCH="\"$(ARCH)\""
+CCFLAGS = -Wall -I./include -Os -fomit-frame-pointer -march=$(ARCH) -mabi=ilp32e -D__RISCV__ -DBUILD="\"$(BUILD)\"" -DARCH="\"$(ARCH)\""
 ASFLAGS = -march=$(ARCH)
 LDFLAGS = -T$(PROJ).ld -Map=$(PROJ).map # -Ttext=0
 
@@ -76,11 +77,22 @@ SRCS = boot.c stdio.c main.c io.c banner.c
 all:
 	make $(PROJ).rom
 	make $(PROJ).ram
-	#make $(PROJ).bin
+	make $(PROJ).bin
 	#make $(PROJ).x86
 
 clean:
-	-rm *.s *.o $(PROJ).{bin,lst,map,ram,rom,x86,text,data,bin}
+	rm -rf *.s 
+	rm -rf *.o 
+	rm -rf $(PROJ).rom
+	rm -rf $(PROJ).ram
+	rm -rf $(PROJ).lst
+	rm -rf $(PROJ).map
+	rm -rf $(PROJ).x86
+	rm -rf $(PROJ).text
+	rm -rf $(PROJ).data
+	rm -rf $(PROJ).bin
+	#rm -rf $(PROJ).ld
+#{bin,lst,map,ram,rom,x86,text,data,bin,ld}
 
 %.o: %.s
 	$(AS) $(ASFLAGS) -c $< -o $@
diff --git a/src/banner.c b/src/banner.c
index f07f58c..a43c2f5 100644
--- a/src/banner.c
+++ b/src/banner.c
@@ -28,7 +28,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
  */
 
-#define RLE 1
+//#define RLE 1
 
 #include <stdio.h>
 
@@ -89,7 +89,7 @@ void banner(void)
   printf("0x00 };\n");
 
 #else
-  
+  /*
   char rle_logo[] = { 
       0x20, 0x0e, 0x76, 0x20, 0x0a, 0x01, 0x20, 0x12, 0x76, 0x1c, 0x0a,
       0x01, 0x72, 0x0d, 0x20, 0x07, 0x76, 0x1a, 0x0a, 0x01, 0x72, 0x10,
@@ -115,11 +115,11 @@ void banner(void)
       0x01, 0x54, 0x01, 0x53, 0x01, 0x20, 0x01, 0x57, 0x01, 0x41, 0x01,
       0x4e, 0x01, 0x54, 0x01, 0x20, 0x01, 0x54, 0x01, 0x4f, 0x01, 0x20,
       0x01, 0x42, 0x01, 0x45, 0x01, 0x20, 0x01, 0x46, 0x01, 0x52, 0x01,
-      0x45, 0x02, 0x0a, 0x02, 0x00 };
+      0x45, 0x02, 0x0a, 0x02, 0x00 };*/
 
   //printf("\33[H\33[2J");
   putchar('\n');
-  
+  /*
   register int c,s;
   register char *p = rle_logo;
   
@@ -130,6 +130,6 @@ void banner(void)
       
       while(s--) putchar(c);
   }
-
+*/
 #endif
 }
diff --git a/src/banner.o b/src/banner.o
index 02b8e91..71695a2 100644
Binary files a/src/banner.o and b/src/banner.o differ
diff --git a/src/banner.s b/src/banner.s
index 05ade35..090a1ab 100644
--- a/src/banner.s
+++ b/src/banner.s
@@ -1,46 +1,79 @@
 	.file	"banner.c"
 	.option nopic
+	.attribute arch, "rv32i2p0"
+	.attribute unaligned_access, 0
+	.attribute stack_align, 4
+	.text
+	.section	.rodata.str1.4,"aMS",@progbits,1
+	.align	2
+.LC0:
+	.string	"  char rle_logo[] = {"
+	.align	2
+.LC1:
+	.ascii	"              vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n            "
+	.ascii	"      vvvvvvvvvvvvvvvvvvvvvvvvvvvv\nrrrrrrrrrrrrr       vvvv"
+	.ascii	"vvvvvvvvvvvvvvvvvvvvvv\nrrrrrrrrrrrrrrrr      vvvvvvvvvvvvvv"
+	.ascii	"vvvvvvvvvv\nrrrrrrrrrrrrrrrrrr    vvvvvvvvvvvvvvvvvvvvvvvv\n"
+	.ascii	"rrrrrrrrrrrrrrrrrr    vvvvvvvvvvvvvvvvvvvvvvvv\nrrrrrrrrrrrr"
+	.ascii	"rrrrrr    vvvvvvvvvvvvvvvvvvvvvvvv\nrrrrrrrrrrrrrrrr      vv"
+	.ascii	"vvvvvvvvvvvvvvvvvvvv  \nrrrrrrrrrrrrr       vvvvvvvvvvvvvvvv"
+	.ascii	"vvvvvv    \nrr                vvvvvvvvvvvvvvvvvvvvvv      \n"
+	.ascii	"rr            vvvvvvvvvvvvvvvvvvvvvvvv      rr\nrrrr      vv"
+	.ascii	"vvvvvvvvvvvvvvvvvvvvvvvv      rrrr\nrrrrrr      vvvvvvvvvvvv"
+	.ascii	"vvvvvvvvvv      rrrrrr\nrrrrrrrr      vvvvvvvvvvvvvvvvvv    "
+	.ascii	"  rrrrrrrr\nrrrrrrrrrr      vvvvvvvvvvvvvv      rrrrrrrrrr\n"
+	.ascii	"rrrrrrrrrrrr      vvvvvvvvvv      rrrrrrrrrrrr\nrrrrrrrrrrrr"
+	.ascii	"rr      v"
+	.string	"vvvvv      rrrrrrrrrrrrrr\nrrrrrrrrrrrrrrrr      vv      rrrrrrrrrrrrrrrr\nrrrrrrrrrrrrrrrrrr          rrrrrrrrrrrrrrrrrr\nrrrrrrrrrrrrrrrrrrrr      rrrrrrrrrrrrrrrrrrrr\nrrrrrrrrrrrrrrrrrrrrrr  rrrrrrrrrrrrrrrrrrrrrr\n\n       INSTRUCTION SETS WANT TO BE FREE\n\n"
+	.align	2
+.LC2:
+	.string	"0x%x, 0x%x, "
+	.align	2
+.LC3:
+	.string	"0x00 };"
 	.text
 	.align	2
 	.globl	banner
 	.type	banner, @function
 banner:
-	addi	sp,sp,-288
-	lui	a1,%hi(.LC0)
-	li	a2,269
-	addi	a1,a1,%lo(.LC0)
-	addi	a0,sp,4
-	sw	ra,284(sp)
-	sw	s0,280(sp)
-	sw	s1,276(sp)
-	call	memcpy
-	li	a0,10
-	call	putchar
-	addi	s0,sp,4
-.L2:
-	lbu	a5,0(s0)
-	bnez	a5,.L5
-	lw	ra,284(sp)
-	lw	s0,280(sp)
-	lw	s1,276(sp)
-	addi	sp,sp,288
-	jr	ra
-.L5:
-	addi	s0,s0,2
-	lbu	s1,-1(s0)
+	ssst
+	lui	a0,%hi(.LC0)
+	addi	sp,sp,-12
+	addi	a0,a0,%lo(.LC0)
+	sw	s0,4(sp)
+	sw	ra,8(sp)
+	sw	s1,0(sp)
+	lui	s0,%hi(.LC1)
+	call	puts
+	addi	s0,s0,%lo(.LC1)
+	li	a2,0
+	li	a1,0
+	lui	a5,%hi(.LC2)
+.L6:
+	lbu	s1,0(s0)
+	beq	s1,a1,.L2
+	beq	a1,zero,.L3
+	addi	a0,a5,%lo(.LC2)
+	call	printf
+	lui	a5,%hi(.LC2)
 .L3:
-	addi	s1,s1,-1
-	li	a4,-1
-	beq	s1,a4,.L2
-	mv	a0,a5
-	sw	a5,0(sp)
-	call	putchar
-	lw	a5,0(sp)
-	j	.L3
+	beq	s1,zero,.L4
+	li	a2,1
+.L5:
+	addi	s0,s0,1
+	mv	a1,s1
+	j	.L6
+.L2:
+	addi	a2,a2,1
+	mv	s1,a1
+	j	.L5
+.L4:
+	lw	s0,4(sp)
+	lw	ra,8(sp)
+	lw	s1,0(sp)
+	lui	a0,%hi(.LC3)
+	addi	a0,a0,%lo(.LC3)
+	addi	sp,sp,12
+	tail	puts
 	.size	banner, .-banner
-	.section	.rodata.str1.4,"aMS",@progbits,1
-	.align	2
-.LC0:
-	.ascii	" \016v \n\001 \022v\034\n\001"
-	.string	"r\r \007v\032\n\001r\020 \006v\030\n\001r\022 \004v\030\n\001r\022 \004v\030\n\001r\022 \004v\030\n\001r\020 \006v\026 \002\n\001r\r \007v\026 \004\n\001r\002 \020v\026 \006\n\001r\002 \fv\030 \006r\002\n\001r\004 \006v\032 \006r\004\n\001r\006 \006v\026 \006r\006\n\001r\b \006v\022 \006r\b\n\001r\n \006v\016 \006r\n\n\001r\f \006v\n \006r\f\n\001r\016 \006v\006 \006r\016\n\001r\020 \006v\002 \006r\020\n\001r\022 \nr\022\n\001r\024 \006r\024\n\001r\026 \002r\026\n\002 \007I\001N\001S\001T\001R\001U\001C\001T\001I\001O\001N\001 \001S\001E\001T\001S\001 \001W\001A\001N\001T\001 \001T\001O\001 \001B\001E\001 \001F\001R\001E\002\n\002"
-	.ident	"GCC: (GNU) 9.0.0 20180818 (experimental)"
+	.ident	"GCC: (GNU) 9.2.0"
diff --git a/src/boot.o b/src/boot.o
index ec473fb..9dbefac 100644
Binary files a/src/boot.o and b/src/boot.o differ
diff --git a/src/boot.s b/src/boot.s
index cf58d77..ae8a260 100644
--- a/src/boot.s
+++ b/src/boot.s
@@ -1,15 +1,19 @@
 	.file	"boot.c"
 	.option nopic
+	.attribute arch, "rv32i2p0"
+	.attribute unaligned_access, 0
+	.attribute stack_align, 4
 	.text
 	.align	2
 	.globl	boot
 	.type	boot, @function
 boot:
+	ssst
 	lui	a5,%hi(threads)
-	addi	sp,sp,-16
-	sw	s0,8(sp)
+	addi	sp,sp,-12
+	sw	s0,4(sp)
 	lw	s0,%lo(threads)(a5)
-	sw	ra,12(sp)
+	sw	ra,8(sp)
 	addi	a4,s0,1
 	andi	s0,s0,1
 	addi	a0,s0,48
@@ -17,7 +21,7 @@ boot:
 	call	putchar
 	lui	a5,%hi(io)
 	addi	a5,a5,%lo(io)
-	bnez	s0,.L2
+	bne	s0,zero,.L2
 	li	a4,49
 	sw	a4,0(sp)
 	li	a4,1
@@ -30,12 +34,16 @@ boot:
 	sw	a4,12(a5)
 .L4:
 	lhu	a4,8(a5)
+	slli	a4,a4,16
+	srli	a4,a4,16
 	xori	a4,a4,1
 	sh	a4,8(a5)
 	lhu	a4,10(a5)
+	slli	a4,a4,16
+	srli	a4,a4,16
 	xori	a4,a4,1
 	sh	a4,10(a5)
 	sb	zero,3(a5)
 	j	.L4
 	.size	boot, .-boot
-	.ident	"GCC: (GNU) 9.0.0 20180818 (experimental)"
+	.ident	"GCC: (GNU) 9.2.0"
diff --git a/src/darksocv.bin b/src/darksocv.bin
index cbf7cfa..bf5310f 100755
Binary files a/src/darksocv.bin and b/src/darksocv.bin differ
diff --git a/src/darksocv.data b/src/darksocv.data
index 2cd9c5f..3b85766 100755
Binary files a/src/darksocv.data and b/src/darksocv.data differ
diff --git a/src/darksocv.ld b/src/darksocv.ld
index 84b89e5..2ddcaa8 100644
--- a/src/darksocv.ld
+++ b/src/darksocv.ld
@@ -1,61 +1,27 @@
-/* Copyright (c) 2018, Marcelo Samsoniuk
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- * * Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- * 
- * * Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- * 
- * * Neither the name of the copyright holder nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
 MEMORY
 {
+    IO (rw!x) : ORIGIN = 0x80000000, LENGTH = 0x10
     ROM (x!rw) : ORIGIN = 0x00000000, LENGTH = 0x1000
     RAM (rw!x) : ORIGIN = 0x00001000, LENGTH = 0x1000
-    IO  (rw!x) : ORIGIN = 0x80000000, LENGTH = 0x10
 }
-
 SECTIONS
 {
+    .io :
+    {
+        io.o(COMMON)
+    } > IO
     .text :
     {
         boot.o(.text)
         *(.text)
-
     } > ROM
-
     .data :
     {
+        *(.sbss)
+        *(.rodata*)
         *(.data)
         *(.bss)
         *(.rela*)
-        *(.rodata*)
-        *(.sbss)
-
+ *(COMMON)
     } > RAM
-
-    .io :
-    {
-        io.o(COMMON)
-
-    } > IO
 }
diff --git a/src/darksocv.ld.src b/src/darksocv.ld.src
new file mode 100644
index 0000000..7d364cc
--- /dev/null
+++ b/src/darksocv.ld.src
@@ -0,0 +1,89 @@
+/* Copyright (c) 2018, Marcelo Samsoniuk
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * 
+ * * Redistributions of source code must retain the above copyright notice, this
+ *   list of conditions and the following disclaimer.
+ * 
+ * * Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ * 
+ * * Neither the name of the copyright holder nor the names of its
+ *   contributors may be used to endorse or promote products derived from
+ *   this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+    Memory Architectures:
+
+	- Harvard: separate instruction (ROM) and data (RAM), has the
+	  advantage that is possible make the ROM memory readonly, in a way
+	  that bugs in the code cannot destruct the code.  Also, the use of
+	  separate ROM and RAM makes possible share the dual-port ROM and/or
+	  RAM between two cores.
+
+	- Von Neumann: unified instruction and data in a single memory
+	  (MEM), has the advantage that the .text and .data are contigous
+	  and without gaps, which means that the memory is better utilized. 
+	  However, as long there is no physical separation, a bug in the
+	  code can destroy both data and code.  Also, as long both ports of
+	  the dual-port MEM is already in use, there is no way to share to
+	  more than one core.
+*/
+
+MEMORY
+{
+    IO  (rw!x) : ORIGIN = 0x80000000, LENGTH = 0x10
+#if HARVARD
+    ROM (x!rw) : ORIGIN = 0x00000000, LENGTH = 0x1000
+    RAM (rw!x) : ORIGIN = 0x00001000, LENGTH = 0x1000
+#else
+    MEM (rwx)  : ORIGIN = 0x00000000, LENGTH = 0x2000
+#endif
+}
+
+SECTIONS
+{
+    .io :
+    {
+        io.o(COMMON)
+
+    } > IO
+
+    .text :
+    {
+        boot.o(.text)
+        *(.text)
+#if HARVARD
+    } > ROM
+#else
+    } > MEM
+#endif
+    .data :
+    {
+        *(.sbss)    
+        *(.rodata*)
+        *(.data)
+        *(.bss)
+        *(.rela*)
+	*(COMMON)
+#if HARVARD
+    } > RAM
+#else
+    } > MEM
+#endif
+}
diff --git a/src/darksocv.lst b/src/darksocv.lst
index bd523d1..8328d80 100644
--- a/src/darksocv.lst
+++ b/src/darksocv.lst
@@ -5,1052 +5,822 @@ darksocv.o:     file format elf32-littleriscv
 Disassembly of section .text:
 
 00000000 <boot>:
-   0:	000017b7          	lui	a5,0x1
-   4:	ff010113          	addi	sp,sp,-16
-   8:	00812423          	sw	s0,8(sp)
-   c:	55c7a403          	lw	s0,1372(a5) # 155c <threads>
-  10:	00112623          	sw	ra,12(sp)
-  14:	00140713          	addi	a4,s0,1
-  18:	00147413          	andi	s0,s0,1
-  1c:	03040513          	addi	a0,s0,48
-  20:	54e7ae23          	sw	a4,1372(a5)
-  24:	06c000ef          	jal	ra,90 <putchar>
-  28:	800007b7          	lui	a5,0x80000
-  2c:	00078793          	mv	a5,a5
-  30:	00041e63          	bnez	s0,4c <boot+0x4c>
-  34:	03100713          	li	a4,49
-  38:	00e12023          	sw	a4,0(sp)
-  3c:	00100713          	li	a4,1
-  40:	00e7a623          	sw	a4,12(a5) # 8000000c <io+0xc>
-  44:	760000ef          	jal	ra,7a4 <main>
-  48:	ffdff06f          	j	44 <boot+0x44>
-  4c:	00012703          	lw	a4,0(sp)
-  50:	00e7a623          	sw	a4,12(a5)
-  54:	0087d703          	lhu	a4,8(a5)
-  58:	00174713          	xori	a4,a4,1
-  5c:	00e79423          	sh	a4,8(a5)
-  60:	00a7d703          	lhu	a4,10(a5)
-  64:	00174713          	xori	a4,a4,1
-  68:	00e79523          	sh	a4,10(a5)
-  6c:	000781a3          	sb	zero,3(a5)
-  70:	fe5ff06f          	j	54 <boot+0x54>
-
-00000074 <getchar>:
-  74:	800007b7          	lui	a5,0x80000
-  78:	00078793          	mv	a5,a5
-  7c:	0047c703          	lbu	a4,4(a5) # 80000004 <io+0x4>
-  80:	00277713          	andi	a4,a4,2
-  84:	fe070ce3          	beqz	a4,7c <getchar+0x8>
-  88:	0057c503          	lbu	a0,5(a5)
-  8c:	00008067          	ret
-
-00000090 <putchar>:
-  90:	800007b7          	lui	a5,0x80000
-  94:	00a00713          	li	a4,10
-  98:	00078793          	mv	a5,a5
-  9c:	00e51c63          	bne	a0,a4,b4 <putchar+0x24>
-  a0:	0047c703          	lbu	a4,4(a5) # 80000004 <io+0x4>
-  a4:	00177713          	andi	a4,a4,1
-  a8:	fe071ce3          	bnez	a4,a0 <putchar+0x10>
-  ac:	00d00713          	li	a4,13
-  b0:	00e782a3          	sb	a4,5(a5)
-  b4:	0047c703          	lbu	a4,4(a5)
-  b8:	00177713          	andi	a4,a4,1
-  bc:	fe071ce3          	bnez	a4,b4 <putchar+0x24>
-  c0:	0ff57713          	andi	a4,a0,255
-  c4:	00e782a3          	sb	a4,5(a5)
-  c8:	00070513          	mv	a0,a4
+   0:	0000002b          	ssst
+   4:	000017b7          	lui	a5,0x1
+   8:	ff410113          	addi	sp,sp,-12
+   c:	00812223          	sw	s0,4(sp)
+  10:	2787a403          	lw	s0,632(a5) # 1278 <threads>
+  14:	00112423          	sw	ra,8(sp)
+  18:	00140713          	addi	a4,s0,1
+  1c:	00147413          	andi	s0,s0,1
+  20:	03040513          	addi	a0,s0,48
+  24:	26e7ac23          	sw	a4,632(a5)
+  28:	0a8000ef          	jal	ra,d0 <putchar>
+  2c:	800007b7          	lui	a5,0x80000
+  30:	00078793          	mv	a5,a5
+  34:	00041e63          	bnez	s0,50 <boot+0x50>
+  38:	03100713          	li	a4,49
+  3c:	00e12023          	sw	a4,0(sp)
+  40:	00100713          	li	a4,1
+  44:	00e7a623          	sw	a4,12(a5) # 8000000c <io+0xc>
+  48:	069000ef          	jal	ra,8b0 <main>
+  4c:	ffdff06f          	j	48 <boot+0x48>
+  50:	00012703          	lw	a4,0(sp)
+  54:	27100693          	li	a3,625
+  58:	00e7a623          	sw	a4,12(a5)
+  5c:	00068713          	mv	a4,a3
+  60:	00000013          	nop
+  64:	00000013          	nop
+  68:	00000013          	nop
+  6c:	00000013          	nop
+  70:	fff70713          	addi	a4,a4,-1
+  74:	fe0716e3          	bnez	a4,60 <boot+0x60>
+  78:	0087d703          	lhu	a4,8(a5)
+  7c:	01071713          	slli	a4,a4,0x10
+  80:	01075713          	srli	a4,a4,0x10
+  84:	00174713          	xori	a4,a4,1
+  88:	00e79423          	sh	a4,8(a5)
+  8c:	00a7d703          	lhu	a4,10(a5)
+  90:	01071713          	slli	a4,a4,0x10
+  94:	01075713          	srli	a4,a4,0x10
+  98:	00174713          	xori	a4,a4,1
+  9c:	00e79523          	sh	a4,10(a5)
+  a0:	000781a3          	sb	zero,3(a5)
+  a4:	fb9ff06f          	j	5c <boot+0x5c>
+
+000000a8 <getchar>:
+  a8:	0000002b          	ssst
+  ac:	800007b7          	lui	a5,0x80000
+  b0:	00078793          	mv	a5,a5
+  b4:	0047c703          	lbu	a4,4(a5) # 80000004 <io+0x4>
+  b8:	00277713          	andi	a4,a4,2
+  bc:	fe070ce3          	beqz	a4,b4 <getchar+0xc>
+  c0:	0057c503          	lbu	a0,5(a5)
+  c4:	0ff57513          	andi	a0,a0,255
+  c8:	00000057          	ssld
   cc:	00008067          	ret
 
-000000d0 <gets>:
-  d0:	fe810113          	addi	sp,sp,-24
-  d4:	00812823          	sw	s0,16(sp)
-  d8:	00912623          	sw	s1,12(sp)
-  dc:	00112a23          	sw	ra,20(sp)
-  e0:	00050493          	mv	s1,a0
-  e4:	00050413          	mv	s0,a0
-  e8:	fff58713          	addi	a4,a1,-1
-  ec:	02070063          	beqz	a4,10c <gets+0x3c>
-  f0:	00b12223          	sw	a1,4(sp)
-  f4:	00e12023          	sw	a4,0(sp)
-  f8:	f7dff0ef          	jal	ra,74 <getchar>
-  fc:	00a00693          	li	a3,10
- 100:	00012703          	lw	a4,0(sp)
- 104:	00412583          	lw	a1,4(sp)
- 108:	02d51863          	bne	a0,a3,138 <gets+0x68>
- 10c:	00a00513          	li	a0,10
- 110:	f81ff0ef          	jal	ra,90 <putchar>
- 114:	00040023          	sb	zero,0(s0)
- 118:	00941463          	bne	s0,s1,120 <gets+0x50>
- 11c:	00000493          	li	s1,0
- 120:	01412083          	lw	ra,20(sp)
- 124:	01012403          	lw	s0,16(sp)
- 128:	00048513          	mv	a0,s1
- 12c:	00c12483          	lw	s1,12(sp)
- 130:	01810113          	addi	sp,sp,24
- 134:	00008067          	ret
- 138:	00b12423          	sw	a1,8(sp)
- 13c:	00e12223          	sw	a4,4(sp)
- 140:	00d00693          	li	a3,13
- 144:	00a12023          	sw	a0,0(sp)
- 148:	fcd502e3          	beq	a0,a3,10c <gets+0x3c>
- 14c:	f45ff0ef          	jal	ra,90 <putchar>
- 150:	00012783          	lw	a5,0(sp)
- 154:	00800693          	li	a3,8
- 158:	00412703          	lw	a4,4(sp)
- 15c:	00812583          	lw	a1,8(sp)
- 160:	00d79e63          	bne	a5,a3,17c <gets+0xac>
- 164:	00940863          	beq	s0,s1,174 <gets+0xa4>
- 168:	fe040fa3          	sb	zero,-1(s0)
- 16c:	00058713          	mv	a4,a1
- 170:	fff40413          	addi	s0,s0,-1
- 174:	00070593          	mv	a1,a4
- 178:	f71ff06f          	j	e8 <gets+0x18>
- 17c:	00f40023          	sb	a5,0(s0)
- 180:	00140413          	addi	s0,s0,1
- 184:	ff1ff06f          	j	174 <gets+0xa4>
-
-00000188 <putstr>:
- 188:	ff410113          	addi	sp,sp,-12
- 18c:	00812223          	sw	s0,4(sp)
- 190:	00112423          	sw	ra,8(sp)
- 194:	00050413          	mv	s0,a0
- 198:	00051663          	bnez	a0,1a4 <putstr+0x1c>
- 19c:	00001437          	lui	s0,0x1
- 1a0:	0cc40413          	addi	s0,s0,204 # 10cc <board_name+0xcc>
- 1a4:	00044503          	lbu	a0,0(s0)
- 1a8:	00051a63          	bnez	a0,1bc <putstr+0x34>
- 1ac:	00812083          	lw	ra,8(sp)
- 1b0:	00412403          	lw	s0,4(sp)
- 1b4:	00c10113          	addi	sp,sp,12
- 1b8:	00008067          	ret
- 1bc:	00140413          	addi	s0,s0,1
- 1c0:	ed1ff0ef          	jal	ra,90 <putchar>
- 1c4:	fe1ff06f          	j	1a4 <putstr+0x1c>
-
-000001c8 <puts>:
- 1c8:	ff410113          	addi	sp,sp,-12
- 1cc:	00112423          	sw	ra,8(sp)
- 1d0:	fb9ff0ef          	jal	ra,188 <putstr>
- 1d4:	00812083          	lw	ra,8(sp)
- 1d8:	00a00513          	li	a0,10
- 1dc:	00c10113          	addi	sp,sp,12
- 1e0:	eb1ff06f          	j	90 <putchar>
-
-000001e4 <putdx>:
- 1e4:	fac10113          	addi	sp,sp,-84
- 1e8:	00b12023          	sw	a1,0(sp)
- 1ec:	000015b7          	lui	a1,0x1
- 1f0:	04812623          	sw	s0,76(sp)
- 1f4:	04912423          	sw	s1,72(sp)
- 1f8:	02c00613          	li	a2,44
- 1fc:	08c58493          	addi	s1,a1,140 # 108c <board_name+0x8c>
- 200:	00050413          	mv	s0,a0
- 204:	08c58593          	addi	a1,a1,140
- 208:	01c10513          	addi	a0,sp,28
- 20c:	04112823          	sw	ra,80(sp)
- 210:	210000ef          	jal	ra,420 <memcpy>
- 214:	01400613          	li	a2,20
- 218:	02c48593          	addi	a1,s1,44
- 21c:	00810513          	addi	a0,sp,8
- 220:	200000ef          	jal	ra,420 <memcpy>
- 224:	00012703          	lw	a4,0(sp)
- 228:	00810793          	addi	a5,sp,8
- 22c:	00070463          	beqz	a4,234 <putdx+0x50>
- 230:	01c10793          	addi	a5,sp,28
- 234:	01800493          	li	s1,24
- 238:	0007a583          	lw	a1,0(a5)
- 23c:	00059c63          	bnez	a1,254 <putdx+0x70>
- 240:	05012083          	lw	ra,80(sp)
- 244:	04c12403          	lw	s0,76(sp)
- 248:	04812483          	lw	s1,72(sp)
- 24c:	05410113          	addi	sp,sp,84
- 250:	00008067          	ret
- 254:	00100713          	li	a4,1
- 258:	00e58463          	beq	a1,a4,260 <putdx+0x7c>
- 25c:	04b46063          	bltu	s0,a1,29c <putdx+0xb8>
- 260:	00012683          	lw	a3,0(sp)
- 264:	00001737          	lui	a4,0x1
- 268:	00f12223          	sw	a5,4(sp)
- 26c:	0d470713          	addi	a4,a4,212 # 10d4 <board_name+0xd4>
- 270:	02068c63          	beqz	a3,2a8 <putdx+0xc4>
- 274:	00040513          	mv	a0,s0
- 278:	414000ef          	jal	ra,68c <__udivsi3>
- 27c:	00a00593          	li	a1,10
- 280:	414000ef          	jal	ra,694 <__umodsi3>
- 284:	000017b7          	lui	a5,0x1
- 288:	0d478713          	addi	a4,a5,212 # 10d4 <board_name+0xd4>
- 28c:	00a70533          	add	a0,a4,a0
- 290:	00054503          	lbu	a0,0(a0)
- 294:	dfdff0ef          	jal	ra,90 <putchar>
- 298:	00412783          	lw	a5,4(sp)
- 29c:	ff848493          	addi	s1,s1,-8
- 2a0:	00478793          	addi	a5,a5,4
- 2a4:	f95ff06f          	j	238 <putdx+0x54>
- 2a8:	00448693          	addi	a3,s1,4
- 2ac:	00d456b3          	srl	a3,s0,a3
- 2b0:	00f6f693          	andi	a3,a3,15
- 2b4:	00d706b3          	add	a3,a4,a3
- 2b8:	0006c503          	lbu	a0,0(a3)
- 2bc:	dd5ff0ef          	jal	ra,90 <putchar>
- 2c0:	00945533          	srl	a0,s0,s1
- 2c4:	000017b7          	lui	a5,0x1
- 2c8:	00f57513          	andi	a0,a0,15
- 2cc:	0d478713          	addi	a4,a5,212 # 10d4 <board_name+0xd4>
- 2d0:	00a70733          	add	a4,a4,a0
- 2d4:	00074503          	lbu	a0,0(a4)
- 2d8:	fbdff06f          	j	294 <putdx+0xb0>
-
-000002dc <putx>:
- 2dc:	00000593          	li	a1,0
- 2e0:	f05ff06f          	j	1e4 <putdx>
-
-000002e4 <putd>:
- 2e4:	00100593          	li	a1,1
- 2e8:	efdff06f          	j	1e4 <putdx>
-
-000002ec <printf>:
- 2ec:	fdc10113          	addi	sp,sp,-36
- 2f0:	02f12023          	sw	a5,32(sp)
- 2f4:	01010793          	addi	a5,sp,16
- 2f8:	00812423          	sw	s0,8(sp)
- 2fc:	00112623          	sw	ra,12(sp)
- 300:	00912223          	sw	s1,4(sp)
- 304:	00050413          	mv	s0,a0
- 308:	00b12823          	sw	a1,16(sp)
- 30c:	00c12a23          	sw	a2,20(sp)
- 310:	00d12c23          	sw	a3,24(sp)
- 314:	00e12e23          	sw	a4,28(sp)
- 318:	00f12023          	sw	a5,0(sp)
- 31c:	00044503          	lbu	a0,0(s0)
- 320:	00051c63          	bnez	a0,338 <printf+0x4c>
- 324:	00c12083          	lw	ra,12(sp)
- 328:	00812403          	lw	s0,8(sp)
- 32c:	00412483          	lw	s1,4(sp)
- 330:	02410113          	addi	sp,sp,36
- 334:	00008067          	ret
- 338:	02500793          	li	a5,37
- 33c:	00140493          	addi	s1,s0,1
- 340:	06f51a63          	bne	a0,a5,3b4 <printf+0xc8>
- 344:	00144503          	lbu	a0,1(s0)
- 348:	07300793          	li	a5,115
- 34c:	02f51063          	bne	a0,a5,36c <printf+0x80>
- 350:	00012783          	lw	a5,0(sp)
- 354:	0007a503          	lw	a0,0(a5)
- 358:	00478713          	addi	a4,a5,4
- 35c:	00e12023          	sw	a4,0(sp)
- 360:	e29ff0ef          	jal	ra,188 <putstr>
- 364:	00148413          	addi	s0,s1,1
- 368:	fb5ff06f          	j	31c <printf+0x30>
- 36c:	07800793          	li	a5,120
- 370:	00f51e63          	bne	a0,a5,38c <printf+0xa0>
- 374:	00012783          	lw	a5,0(sp)
- 378:	0007a503          	lw	a0,0(a5)
- 37c:	00478713          	addi	a4,a5,4
- 380:	00e12023          	sw	a4,0(sp)
- 384:	f59ff0ef          	jal	ra,2dc <putx>
- 388:	fddff06f          	j	364 <printf+0x78>
- 38c:	06400793          	li	a5,100
- 390:	00f51e63          	bne	a0,a5,3ac <printf+0xc0>
- 394:	00012783          	lw	a5,0(sp)
- 398:	0007a503          	lw	a0,0(a5)
- 39c:	00478713          	addi	a4,a5,4
- 3a0:	00e12023          	sw	a4,0(sp)
- 3a4:	f41ff0ef          	jal	ra,2e4 <putd>
- 3a8:	fbdff06f          	j	364 <printf+0x78>
- 3ac:	ce5ff0ef          	jal	ra,90 <putchar>
- 3b0:	fb5ff06f          	j	364 <printf+0x78>
- 3b4:	cddff0ef          	jal	ra,90 <putchar>
- 3b8:	00040493          	mv	s1,s0
- 3bc:	fa9ff06f          	j	364 <printf+0x78>
-
-000003c0 <strncmp>:
- 3c0:	fff60613          	addi	a2,a2,-1
- 3c4:	00000793          	li	a5,0
- 3c8:	00f50733          	add	a4,a0,a5
- 3cc:	00074683          	lbu	a3,0(a4)
- 3d0:	00f58733          	add	a4,a1,a5
- 3d4:	00074703          	lbu	a4,0(a4)
- 3d8:	00c78a63          	beq	a5,a2,3ec <strncmp+0x2c>
- 3dc:	00068863          	beqz	a3,3ec <strncmp+0x2c>
- 3e0:	00070663          	beqz	a4,3ec <strncmp+0x2c>
- 3e4:	00178793          	addi	a5,a5,1
- 3e8:	fee680e3          	beq	a3,a4,3c8 <strncmp+0x8>
- 3ec:	40e68533          	sub	a0,a3,a4
- 3f0:	00008067          	ret
-
-000003f4 <strcmp>:
- 3f4:	fff00613          	li	a2,-1
- 3f8:	fc9ff06f          	j	3c0 <strncmp>
-
-000003fc <strlen>:
- 3fc:	00000793          	li	a5,0
- 400:	00f50733          	add	a4,a0,a5
- 404:	00074703          	lbu	a4,0(a4)
- 408:	00070863          	beqz	a4,418 <strlen+0x1c>
- 40c:	00178793          	addi	a5,a5,1
- 410:	00f50733          	add	a4,a0,a5
- 414:	fe0716e3          	bnez	a4,400 <strlen+0x4>
- 418:	00078513          	mv	a0,a5
- 41c:	00008067          	ret
-
-00000420 <memcpy>:
- 420:	00000793          	li	a5,0
- 424:	00c79463          	bne	a5,a2,42c <memcpy+0xc>
- 428:	00008067          	ret
- 42c:	00f58733          	add	a4,a1,a5
- 430:	00074683          	lbu	a3,0(a4)
- 434:	00f50733          	add	a4,a0,a5
- 438:	00178793          	addi	a5,a5,1
- 43c:	00d70023          	sb	a3,0(a4)
- 440:	fe5ff06f          	j	424 <memcpy+0x4>
-
-00000444 <memset>:
- 444:	00c50633          	add	a2,a0,a2
- 448:	00050793          	mv	a5,a0
- 44c:	00c79463          	bne	a5,a2,454 <memset+0x10>
- 450:	00008067          	ret
- 454:	00178793          	addi	a5,a5,1
- 458:	feb78fa3          	sb	a1,-1(a5)
- 45c:	ff1ff06f          	j	44c <memset+0x8>
-
-00000460 <strtok>:
- 460:	fec10113          	addi	sp,sp,-20
- 464:	00812623          	sw	s0,12(sp)
- 468:	00050413          	mv	s0,a0
- 46c:	00058513          	mv	a0,a1
- 470:	00912423          	sw	s1,8(sp)
- 474:	00112823          	sw	ra,16(sp)
- 478:	00058493          	mv	s1,a1
- 47c:	f81ff0ef          	jal	ra,3fc <strlen>
- 480:	00050693          	mv	a3,a0
- 484:	00041863          	bnez	s0,494 <strtok+0x34>
- 488:	000017b7          	lui	a5,0x1
- 48c:	5607a403          	lw	s0,1376(a5) # 1560 <nxt.1625>
- 490:	04040863          	beqz	s0,4e0 <strtok+0x80>
- 494:	00040793          	mv	a5,s0
- 498:	0007c703          	lbu	a4,0(a5)
- 49c:	00071863          	bnez	a4,4ac <strtok+0x4c>
- 4a0:	000017b7          	lui	a5,0x1
- 4a4:	5607a023          	sw	zero,1376(a5) # 1560 <nxt.1625>
- 4a8:	0380006f          	j	4e0 <strtok+0x80>
- 4ac:	00068613          	mv	a2,a3
- 4b0:	00078513          	mv	a0,a5
- 4b4:	00048593          	mv	a1,s1
- 4b8:	00d12223          	sw	a3,4(sp)
- 4bc:	00f12023          	sw	a5,0(sp)
- 4c0:	f01ff0ef          	jal	ra,3c0 <strncmp>
- 4c4:	00012783          	lw	a5,0(sp)
- 4c8:	00412683          	lw	a3,4(sp)
- 4cc:	00178713          	addi	a4,a5,1
- 4d0:	02051463          	bnez	a0,4f8 <strtok+0x98>
- 4d4:	00078023          	sb	zero,0(a5)
- 4d8:	000017b7          	lui	a5,0x1
- 4dc:	56e7a023          	sw	a4,1376(a5) # 1560 <nxt.1625>
- 4e0:	00040513          	mv	a0,s0
- 4e4:	01012083          	lw	ra,16(sp)
- 4e8:	00c12403          	lw	s0,12(sp)
- 4ec:	00812483          	lw	s1,8(sp)
- 4f0:	01410113          	addi	sp,sp,20
- 4f4:	00008067          	ret
- 4f8:	00070793          	mv	a5,a4
- 4fc:	f9dff06f          	j	498 <strtok+0x38>
-
-00000500 <atoi>:
- 500:	00000693          	li	a3,0
- 504:	00000793          	li	a5,0
- 508:	02d00613          	li	a2,45
- 50c:	00051c63          	bnez	a0,524 <atoi+0x24>
- 510:	02069e63          	bnez	a3,54c <atoi+0x4c>
- 514:	00078513          	mv	a0,a5
- 518:	00008067          	ret
- 51c:	00100693          	li	a3,1
- 520:	0240006f          	j	544 <atoi+0x44>
- 524:	00054703          	lbu	a4,0(a0)
- 528:	fe0704e3          	beqz	a4,510 <atoi+0x10>
- 52c:	fec708e3          	beq	a4,a2,51c <atoi+0x1c>
- 530:	00379593          	slli	a1,a5,0x3
- 534:	fd070713          	addi	a4,a4,-48
- 538:	00b70733          	add	a4,a4,a1
- 53c:	00179793          	slli	a5,a5,0x1
- 540:	00f707b3          	add	a5,a4,a5
- 544:	00150513          	addi	a0,a0,1
- 548:	fc5ff06f          	j	50c <atoi+0xc>
- 54c:	40f007b3          	neg	a5,a5
- 550:	fc5ff06f          	j	514 <atoi+0x14>
-
-00000554 <xtoi>:
- 554:	00050693          	mv	a3,a0
- 558:	03900613          	li	a2,57
- 55c:	00000513          	li	a0,0
- 560:	00068663          	beqz	a3,56c <xtoi+0x18>
- 564:	0006c783          	lbu	a5,0(a3)
- 568:	00079463          	bnez	a5,570 <xtoi+0x1c>
- 56c:	00008067          	ret
- 570:	00451713          	slli	a4,a0,0x4
- 574:	00f66a63          	bltu	a2,a5,588 <xtoi+0x34>
- 578:	fd078793          	addi	a5,a5,-48
- 57c:	00e78533          	add	a0,a5,a4
- 580:	00168693          	addi	a3,a3,1
- 584:	fddff06f          	j	560 <xtoi+0xc>
- 588:	05f7f793          	andi	a5,a5,95
- 58c:	fc978793          	addi	a5,a5,-55
- 590:	fedff06f          	j	57c <xtoi+0x28>
-
-00000594 <mac>:
- 594:	857f                	0x857f
- 596:	00c5                	addi	ra,ra,17
- 598:	00008067          	ret
-
-0000059c <__umulsi3>:
- 59c:	00050793          	mv	a5,a0
- 5a0:	00000513          	li	a0,0
- 5a4:	02b7e063          	bltu	a5,a1,5c4 <__umulsi3+0x28>
- 5a8:	02059263          	bnez	a1,5cc <__umulsi3+0x30>
- 5ac:	00008067          	ret
- 5b0:	0017f713          	andi	a4,a5,1
- 5b4:	00070463          	beqz	a4,5bc <__umulsi3+0x20>
- 5b8:	00b50533          	add	a0,a0,a1
- 5bc:	0017d793          	srli	a5,a5,0x1
- 5c0:	00159593          	slli	a1,a1,0x1
- 5c4:	fe0796e3          	bnez	a5,5b0 <__umulsi3+0x14>
- 5c8:	00008067          	ret
- 5cc:	0015f713          	andi	a4,a1,1
- 5d0:	00070463          	beqz	a4,5d8 <__umulsi3+0x3c>
- 5d4:	00f50533          	add	a0,a0,a5
- 5d8:	00179793          	slli	a5,a5,0x1
- 5dc:	0015d593          	srli	a1,a1,0x1
- 5e0:	fc9ff06f          	j	5a8 <__umulsi3+0xc>
-
-000005e4 <__mulsi3>:
- 5e4:	ff410113          	addi	sp,sp,-12
- 5e8:	00912023          	sw	s1,0(sp)
- 5ec:	00112423          	sw	ra,8(sp)
- 5f0:	00812223          	sw	s0,4(sp)
- 5f4:	00000493          	li	s1,0
- 5f8:	00055663          	bgez	a0,604 <__mulsi3+0x20>
- 5fc:	40a00533          	neg	a0,a0
- 600:	00100493          	li	s1,1
- 604:	00000413          	li	s0,0
- 608:	0005d663          	bgez	a1,614 <__mulsi3+0x30>
- 60c:	40b005b3          	neg	a1,a1
- 610:	00100413          	li	s0,1
- 614:	f89ff0ef          	jal	ra,59c <__umulsi3>
- 618:	00050793          	mv	a5,a0
- 61c:	00848463          	beq	s1,s0,624 <__mulsi3+0x40>
- 620:	40a007b3          	neg	a5,a0
- 624:	00812083          	lw	ra,8(sp)
- 628:	00412403          	lw	s0,4(sp)
- 62c:	00012483          	lw	s1,0(sp)
- 630:	00078513          	mv	a0,a5
- 634:	00c10113          	addi	sp,sp,12
+000000d0 <putchar>:
+  d0:	0000002b          	ssst
+  d4:	800007b7          	lui	a5,0x80000
+  d8:	00a00713          	li	a4,10
+  dc:	00078793          	mv	a5,a5
+  e0:	00e51c63          	bne	a0,a4,f8 <putchar+0x28>
+  e4:	0047c703          	lbu	a4,4(a5) # 80000004 <io+0x4>
+  e8:	00177713          	andi	a4,a4,1
+  ec:	fe071ce3          	bnez	a4,e4 <putchar+0x14>
+  f0:	00d00713          	li	a4,13
+  f4:	00e782a3          	sb	a4,5(a5)
+  f8:	0047c703          	lbu	a4,4(a5)
+  fc:	00177713          	andi	a4,a4,1
+ 100:	fe071ce3          	bnez	a4,f8 <putchar+0x28>
+ 104:	0ff57713          	andi	a4,a0,255
+ 108:	00070513          	mv	a0,a4
+ 10c:	00e782a3          	sb	a4,5(a5)
+ 110:	00000057          	ssld
+ 114:	00008067          	ret
+
+00000118 <gets>:
+ 118:	0000002b          	ssst
+ 11c:	fe810113          	addi	sp,sp,-24
+ 120:	00812823          	sw	s0,16(sp)
+ 124:	00912623          	sw	s1,12(sp)
+ 128:	00112a23          	sw	ra,20(sp)
+ 12c:	00050493          	mv	s1,a0
+ 130:	00050413          	mv	s0,a0
+ 134:	fff58713          	addi	a4,a1,-1
+ 138:	02070063          	beqz	a4,158 <gets+0x40>
+ 13c:	00b12223          	sw	a1,4(sp)
+ 140:	00e12023          	sw	a4,0(sp)
+ 144:	f65ff0ef          	jal	ra,a8 <getchar>
+ 148:	00a00693          	li	a3,10
+ 14c:	00012703          	lw	a4,0(sp)
+ 150:	00412583          	lw	a1,4(sp)
+ 154:	02d51a63          	bne	a0,a3,188 <gets+0x70>
+ 158:	00a00513          	li	a0,10
+ 15c:	f75ff0ef          	jal	ra,d0 <putchar>
+ 160:	00040023          	sb	zero,0(s0)
+ 164:	00941463          	bne	s0,s1,16c <gets+0x54>
+ 168:	00000493          	li	s1,0
+ 16c:	01012403          	lw	s0,16(sp)
+ 170:	01412083          	lw	ra,20(sp)
+ 174:	00048513          	mv	a0,s1
+ 178:	00c12483          	lw	s1,12(sp)
+ 17c:	01810113          	addi	sp,sp,24
+ 180:	00000057          	ssld
+ 184:	00008067          	ret
+ 188:	00b12423          	sw	a1,8(sp)
+ 18c:	00e12223          	sw	a4,4(sp)
+ 190:	00d00693          	li	a3,13
+ 194:	00a12023          	sw	a0,0(sp)
+ 198:	fcd500e3          	beq	a0,a3,158 <gets+0x40>
+ 19c:	f35ff0ef          	jal	ra,d0 <putchar>
+ 1a0:	00012783          	lw	a5,0(sp)
+ 1a4:	00800693          	li	a3,8
+ 1a8:	00412703          	lw	a4,4(sp)
+ 1ac:	00812583          	lw	a1,8(sp)
+ 1b0:	00d79e63          	bne	a5,a3,1cc <gets+0xb4>
+ 1b4:	00940863          	beq	s0,s1,1c4 <gets+0xac>
+ 1b8:	fe040fa3          	sb	zero,-1(s0)
+ 1bc:	00058713          	mv	a4,a1
+ 1c0:	fff40413          	addi	s0,s0,-1
+ 1c4:	00070593          	mv	a1,a4
+ 1c8:	f6dff06f          	j	134 <gets+0x1c>
+ 1cc:	00f40023          	sb	a5,0(s0)
+ 1d0:	00140413          	addi	s0,s0,1
+ 1d4:	ff1ff06f          	j	1c4 <gets+0xac>
+
+000001d8 <putstr>:
+ 1d8:	0000002b          	ssst
+ 1dc:	ff810113          	addi	sp,sp,-8
+ 1e0:	00812023          	sw	s0,0(sp)
+ 1e4:	00112223          	sw	ra,4(sp)
+ 1e8:	00050413          	mv	s0,a0
+ 1ec:	00051663          	bnez	a0,1f8 <putstr+0x20>
+ 1f0:	00001437          	lui	s0,0x1
+ 1f4:	08c40413          	addi	s0,s0,140 # 108c <board_name+0x8c>
+ 1f8:	00044503          	lbu	a0,0(s0)
+ 1fc:	00051c63          	bnez	a0,214 <putstr+0x3c>
+ 200:	00012403          	lw	s0,0(sp)
+ 204:	00412083          	lw	ra,4(sp)
+ 208:	00810113          	addi	sp,sp,8
+ 20c:	00000057          	ssld
+ 210:	00008067          	ret
+ 214:	00140413          	addi	s0,s0,1
+ 218:	eb9ff0ef          	jal	ra,d0 <putchar>
+ 21c:	fddff06f          	j	1f8 <putstr+0x20>
+
+00000220 <puts>:
+ 220:	0000002b          	ssst
+ 224:	ffc10113          	addi	sp,sp,-4
+ 228:	00112023          	sw	ra,0(sp)
+ 22c:	fadff0ef          	jal	ra,1d8 <putstr>
+ 230:	00012083          	lw	ra,0(sp)
+ 234:	00a00513          	li	a0,10
+ 238:	00410113          	addi	sp,sp,4
+ 23c:	e95ff06f          	j	d0 <putchar>
+
+00000240 <putdx>:
+ 240:	0000002b          	ssst
+ 244:	fac10113          	addi	sp,sp,-84
+ 248:	00b12023          	sw	a1,0(sp)
+ 24c:	000015b7          	lui	a1,0x1
+ 250:	04812623          	sw	s0,76(sp)
+ 254:	04912423          	sw	s1,72(sp)
+ 258:	02c00613          	li	a2,44
+ 25c:	0a858493          	addi	s1,a1,168 # 10a8 <board_name+0xa8>
+ 260:	00050413          	mv	s0,a0
+ 264:	0a858593          	addi	a1,a1,168
+ 268:	01c10513          	addi	a0,sp,28
+ 26c:	04112823          	sw	ra,80(sp)
+ 270:	224000ef          	jal	ra,494 <memcpy>
+ 274:	01400613          	li	a2,20
+ 278:	02c48593          	addi	a1,s1,44
+ 27c:	00810513          	addi	a0,sp,8
+ 280:	214000ef          	jal	ra,494 <memcpy>
+ 284:	00012703          	lw	a4,0(sp)
+ 288:	00810793          	addi	a5,sp,8
+ 28c:	00070463          	beqz	a4,294 <putdx+0x54>
+ 290:	01c10793          	addi	a5,sp,28
+ 294:	01800493          	li	s1,24
+ 298:	0007a583          	lw	a1,0(a5)
+ 29c:	00059e63          	bnez	a1,2b8 <putdx+0x78>
+ 2a0:	04c12403          	lw	s0,76(sp)
+ 2a4:	05012083          	lw	ra,80(sp)
+ 2a8:	04812483          	lw	s1,72(sp)
+ 2ac:	05410113          	addi	sp,sp,84
+ 2b0:	00000057          	ssld
+ 2b4:	00008067          	ret
+ 2b8:	00100713          	li	a4,1
+ 2bc:	00e58463          	beq	a1,a4,2c4 <putdx+0x84>
+ 2c0:	04b46063          	bltu	s0,a1,300 <putdx+0xc0>
+ 2c4:	00012683          	lw	a3,0(sp)
+ 2c8:	00001737          	lui	a4,0x1
+ 2cc:	00f12223          	sw	a5,4(sp)
+ 2d0:	09470713          	addi	a4,a4,148 # 1094 <board_name+0x94>
+ 2d4:	02068c63          	beqz	a3,30c <putdx+0xcc>
+ 2d8:	00040513          	mv	a0,s0
+ 2dc:	478000ef          	jal	ra,754 <__udivsi3>
+ 2e0:	00a00593          	li	a1,10
+ 2e4:	47c000ef          	jal	ra,760 <__umodsi3>
+ 2e8:	000017b7          	lui	a5,0x1
+ 2ec:	09478713          	addi	a4,a5,148 # 1094 <board_name+0x94>
+ 2f0:	00a70733          	add	a4,a4,a0
+ 2f4:	00074503          	lbu	a0,0(a4)
+ 2f8:	dd9ff0ef          	jal	ra,d0 <putchar>
+ 2fc:	00412783          	lw	a5,4(sp)
+ 300:	ff848493          	addi	s1,s1,-8
+ 304:	00478793          	addi	a5,a5,4
+ 308:	f91ff06f          	j	298 <putdx+0x58>
+ 30c:	00448693          	addi	a3,s1,4
+ 310:	00d456b3          	srl	a3,s0,a3
+ 314:	00f6f693          	andi	a3,a3,15
+ 318:	00d706b3          	add	a3,a4,a3
+ 31c:	0006c503          	lbu	a0,0(a3)
+ 320:	db1ff0ef          	jal	ra,d0 <putchar>
+ 324:	00945533          	srl	a0,s0,s1
+ 328:	00f57513          	andi	a0,a0,15
+ 32c:	fbdff06f          	j	2e8 <putdx+0xa8>
+
+00000330 <putx>:
+ 330:	0000002b          	ssst
+ 334:	00000593          	li	a1,0
+ 338:	f09ff06f          	j	240 <putdx>
+
+0000033c <putd>:
+ 33c:	0000002b          	ssst
+ 340:	00100593          	li	a1,1
+ 344:	efdff06f          	j	240 <putdx>
+
+00000348 <printf>:
+ 348:	0000002b          	ssst
+ 34c:	fdc10113          	addi	sp,sp,-36
+ 350:	02f12023          	sw	a5,32(sp)
+ 354:	01010793          	addi	a5,sp,16
+ 358:	00812423          	sw	s0,8(sp)
+ 35c:	00112623          	sw	ra,12(sp)
+ 360:	00912223          	sw	s1,4(sp)
+ 364:	00050413          	mv	s0,a0
+ 368:	00b12823          	sw	a1,16(sp)
+ 36c:	00c12a23          	sw	a2,20(sp)
+ 370:	00d12c23          	sw	a3,24(sp)
+ 374:	00e12e23          	sw	a4,28(sp)
+ 378:	00f12023          	sw	a5,0(sp)
+ 37c:	00044503          	lbu	a0,0(s0)
+ 380:	00051e63          	bnez	a0,39c <printf+0x54>
+ 384:	00812403          	lw	s0,8(sp)
+ 388:	00c12083          	lw	ra,12(sp)
+ 38c:	00412483          	lw	s1,4(sp)
+ 390:	02410113          	addi	sp,sp,36
+ 394:	00000057          	ssld
+ 398:	00008067          	ret
+ 39c:	02500793          	li	a5,37
+ 3a0:	00140493          	addi	s1,s0,1
+ 3a4:	06f51a63          	bne	a0,a5,418 <printf+0xd0>
+ 3a8:	00144503          	lbu	a0,1(s0)
+ 3ac:	07300793          	li	a5,115
+ 3b0:	02f51063          	bne	a0,a5,3d0 <printf+0x88>
+ 3b4:	00012783          	lw	a5,0(sp)
+ 3b8:	0007a503          	lw	a0,0(a5)
+ 3bc:	00478713          	addi	a4,a5,4
+ 3c0:	00e12023          	sw	a4,0(sp)
+ 3c4:	e15ff0ef          	jal	ra,1d8 <putstr>
+ 3c8:	00148413          	addi	s0,s1,1
+ 3cc:	fb1ff06f          	j	37c <printf+0x34>
+ 3d0:	07800793          	li	a5,120
+ 3d4:	00f51e63          	bne	a0,a5,3f0 <printf+0xa8>
+ 3d8:	00012783          	lw	a5,0(sp)
+ 3dc:	0007a503          	lw	a0,0(a5)
+ 3e0:	00478713          	addi	a4,a5,4
+ 3e4:	00e12023          	sw	a4,0(sp)
+ 3e8:	f49ff0ef          	jal	ra,330 <putx>
+ 3ec:	fddff06f          	j	3c8 <printf+0x80>
+ 3f0:	06400793          	li	a5,100
+ 3f4:	00f51e63          	bne	a0,a5,410 <printf+0xc8>
+ 3f8:	00012783          	lw	a5,0(sp)
+ 3fc:	0007a503          	lw	a0,0(a5)
+ 400:	00478713          	addi	a4,a5,4
+ 404:	00e12023          	sw	a4,0(sp)
+ 408:	f35ff0ef          	jal	ra,33c <putd>
+ 40c:	fbdff06f          	j	3c8 <printf+0x80>
+ 410:	cc1ff0ef          	jal	ra,d0 <putchar>
+ 414:	fb5ff06f          	j	3c8 <printf+0x80>
+ 418:	cb9ff0ef          	jal	ra,d0 <putchar>
+ 41c:	00040493          	mv	s1,s0
+ 420:	fa9ff06f          	j	3c8 <printf+0x80>
+
+00000424 <strncmp>:
+ 424:	0000002b          	ssst
+ 428:	fff60613          	addi	a2,a2,-1
+ 42c:	00000793          	li	a5,0
+ 430:	00f50733          	add	a4,a0,a5
+ 434:	00074683          	lbu	a3,0(a4)
+ 438:	00f58733          	add	a4,a1,a5
+ 43c:	00074703          	lbu	a4,0(a4)
+ 440:	00c78a63          	beq	a5,a2,454 <strncmp+0x30>
+ 444:	00068863          	beqz	a3,454 <strncmp+0x30>
+ 448:	00070663          	beqz	a4,454 <strncmp+0x30>
+ 44c:	00178793          	addi	a5,a5,1
+ 450:	fee680e3          	beq	a3,a4,430 <strncmp+0xc>
+ 454:	40e68533          	sub	a0,a3,a4
+ 458:	00000057          	ssld
+ 45c:	00008067          	ret
+
+00000460 <strcmp>:
+ 460:	0000002b          	ssst
+ 464:	fff00613          	li	a2,-1
+ 468:	fbdff06f          	j	424 <strncmp>
+
+0000046c <strlen>:
+ 46c:	0000002b          	ssst
+ 470:	00050793          	mv	a5,a0
+ 474:	00000513          	li	a0,0
+ 478:	00a78733          	add	a4,a5,a0
+ 47c:	00074703          	lbu	a4,0(a4)
+ 480:	00071663          	bnez	a4,48c <strlen+0x20>
+ 484:	00000057          	ssld
+ 488:	00008067          	ret
+ 48c:	00150513          	addi	a0,a0,1
+ 490:	fe9ff06f          	j	478 <strlen+0xc>
+
+00000494 <memcpy>:
+ 494:	0000002b          	ssst
+ 498:	00000793          	li	a5,0
+ 49c:	00c79663          	bne	a5,a2,4a8 <memcpy+0x14>
+ 4a0:	00000057          	ssld
+ 4a4:	00008067          	ret
+ 4a8:	00f58733          	add	a4,a1,a5
+ 4ac:	00074683          	lbu	a3,0(a4)
+ 4b0:	00f50733          	add	a4,a0,a5
+ 4b4:	00178793          	addi	a5,a5,1
+ 4b8:	00d70023          	sb	a3,0(a4)
+ 4bc:	fe1ff06f          	j	49c <memcpy+0x8>
+
+000004c0 <memset>:
+ 4c0:	0000002b          	ssst
+ 4c4:	00c50633          	add	a2,a0,a2
+ 4c8:	00050793          	mv	a5,a0
+ 4cc:	00c79663          	bne	a5,a2,4d8 <memset+0x18>
+ 4d0:	00000057          	ssld
+ 4d4:	00008067          	ret
+ 4d8:	00178793          	addi	a5,a5,1
+ 4dc:	feb78fa3          	sb	a1,-1(a5)
+ 4e0:	fedff06f          	j	4cc <memset+0xc>
+
+000004e4 <strtok>:
+ 4e4:	0000002b          	ssst
+ 4e8:	fec10113          	addi	sp,sp,-20
+ 4ec:	00812623          	sw	s0,12(sp)
+ 4f0:	00050413          	mv	s0,a0
+ 4f4:	00058513          	mv	a0,a1
+ 4f8:	00b12023          	sw	a1,0(sp)
+ 4fc:	00112823          	sw	ra,16(sp)
+ 500:	00912423          	sw	s1,8(sp)
+ 504:	f69ff0ef          	jal	ra,46c <strlen>
+ 508:	00012583          	lw	a1,0(sp)
+ 50c:	00050613          	mv	a2,a0
+ 510:	00041863          	bnez	s0,520 <strtok+0x3c>
+ 514:	000017b7          	lui	a5,0x1
+ 518:	27c7a403          	lw	s0,636(a5) # 127c <nxt.1625>
+ 51c:	04040463          	beqz	s0,564 <strtok+0x80>
+ 520:	00040493          	mv	s1,s0
+ 524:	0004c783          	lbu	a5,0(s1)
+ 528:	00079863          	bnez	a5,538 <strtok+0x54>
+ 52c:	000017b7          	lui	a5,0x1
+ 530:	2607ae23          	sw	zero,636(a5) # 127c <nxt.1625>
+ 534:	0300006f          	j	564 <strtok+0x80>
+ 538:	00048513          	mv	a0,s1
+ 53c:	00c12223          	sw	a2,4(sp)
+ 540:	00b12023          	sw	a1,0(sp)
+ 544:	ee1ff0ef          	jal	ra,424 <strncmp>
+ 548:	00012583          	lw	a1,0(sp)
+ 54c:	00412603          	lw	a2,4(sp)
+ 550:	00148793          	addi	a5,s1,1
+ 554:	02051663          	bnez	a0,580 <strtok+0x9c>
+ 558:	00001737          	lui	a4,0x1
+ 55c:	00048023          	sb	zero,0(s1)
+ 560:	26f72e23          	sw	a5,636(a4) # 127c <nxt.1625>
+ 564:	00040513          	mv	a0,s0
+ 568:	00c12403          	lw	s0,12(sp)
+ 56c:	01012083          	lw	ra,16(sp)
+ 570:	00812483          	lw	s1,8(sp)
+ 574:	01410113          	addi	sp,sp,20
+ 578:	00000057          	ssld
+ 57c:	00008067          	ret
+ 580:	00078493          	mv	s1,a5
+ 584:	fa1ff06f          	j	524 <strtok+0x40>
+
+00000588 <atoi>:
+ 588:	0000002b          	ssst
+ 58c:	00050693          	mv	a3,a0
+ 590:	00000613          	li	a2,0
+ 594:	00000513          	li	a0,0
+ 598:	02d00593          	li	a1,45
+ 59c:	00069c63          	bnez	a3,5b4 <atoi+0x2c>
+ 5a0:	02061e63          	bnez	a2,5dc <atoi+0x54>
+ 5a4:	00000057          	ssld
+ 5a8:	00008067          	ret
+ 5ac:	00100613          	li	a2,1
+ 5b0:	0240006f          	j	5d4 <atoi+0x4c>
+ 5b4:	0006c783          	lbu	a5,0(a3)
+ 5b8:	fe0784e3          	beqz	a5,5a0 <atoi+0x18>
+ 5bc:	feb788e3          	beq	a5,a1,5ac <atoi+0x24>
+ 5c0:	fd078793          	addi	a5,a5,-48
+ 5c4:	00351713          	slli	a4,a0,0x3
+ 5c8:	00e78733          	add	a4,a5,a4
+ 5cc:	00151793          	slli	a5,a0,0x1
+ 5d0:	00f70533          	add	a0,a4,a5
+ 5d4:	00168693          	addi	a3,a3,1
+ 5d8:	fc5ff06f          	j	59c <atoi+0x14>
+ 5dc:	40a00533          	neg	a0,a0
+ 5e0:	fc5ff06f          	j	5a4 <atoi+0x1c>
+
+000005e4 <xtoi>:
+ 5e4:	0000002b          	ssst
+ 5e8:	00050713          	mv	a4,a0
+ 5ec:	03900693          	li	a3,57
+ 5f0:	00000513          	li	a0,0
+ 5f4:	00070663          	beqz	a4,600 <xtoi+0x1c>
+ 5f8:	00074783          	lbu	a5,0(a4)
+ 5fc:	00079663          	bnez	a5,608 <xtoi+0x24>
+ 600:	00000057          	ssld
+ 604:	00008067          	ret
+ 608:	00451513          	slli	a0,a0,0x4
+ 60c:	00f6ea63          	bltu	a3,a5,620 <xtoi+0x3c>
+ 610:	fd078793          	addi	a5,a5,-48
+ 614:	00a78533          	add	a0,a5,a0
+ 618:	00170713          	addi	a4,a4,1
+ 61c:	fd9ff06f          	j	5f4 <xtoi+0x10>
+ 620:	05f7f793          	andi	a5,a5,95
+ 624:	fc978793          	addi	a5,a5,-55
+ 628:	fedff06f          	j	614 <xtoi+0x30>
+
+0000062c <mac>:
+ 62c:	0000002b          	ssst
+ 630:	857f                	0x857f
+ 632:	00c5                	addi	ra,ra,17
+ 634:	00000057          	ssld
  638:	00008067          	ret
 
-0000063c <__udiv_umod_si3>:
- 63c:	00100793          	li	a5,1
- 640:	00059a63          	bnez	a1,654 <__udiv_umod_si3+0x18>
- 644:	00058513          	mv	a0,a1
+0000063c <mod>:
+ 63c:	0000002b          	ssst
+ 640:	857e                	mv	a0,t6
+ 642:	00c5                	addi	ra,ra,17
+ 644:	00000057          	ssld
  648:	00008067          	ret
- 64c:	00179793          	slli	a5,a5,0x1
- 650:	00159593          	slli	a1,a1,0x1
- 654:	fea5ece3          	bltu	a1,a0,64c <__udiv_umod_si3+0x10>
- 658:	00058713          	mv	a4,a1
- 65c:	00000593          	li	a1,0
- 660:	00050463          	beqz	a0,668 <__udiv_umod_si3+0x2c>
- 664:	00079863          	bnez	a5,674 <__udiv_umod_si3+0x38>
- 668:	fc061ee3          	bnez	a2,644 <__udiv_umod_si3+0x8>
- 66c:	00050593          	mv	a1,a0
- 670:	fd5ff06f          	j	644 <__udiv_umod_si3+0x8>
- 674:	00e56663          	bltu	a0,a4,680 <__udiv_umod_si3+0x44>
- 678:	40e50533          	sub	a0,a0,a4
- 67c:	00f585b3          	add	a1,a1,a5
- 680:	0017d793          	srli	a5,a5,0x1
- 684:	00175713          	srli	a4,a4,0x1
- 688:	fd9ff06f          	j	660 <__udiv_umod_si3+0x24>
-
-0000068c <__udivsi3>:
- 68c:	00100613          	li	a2,1
- 690:	fadff06f          	j	63c <__udiv_umod_si3>
-
-00000694 <__umodsi3>:
- 694:	00000613          	li	a2,0
- 698:	fa5ff06f          	j	63c <__udiv_umod_si3>
 
-0000069c <__div_mod_si3>:
- 69c:	06058e63          	beqz	a1,718 <__div_mod_si3+0x7c>
- 6a0:	ff010113          	addi	sp,sp,-16
- 6a4:	00812423          	sw	s0,8(sp)
- 6a8:	00112623          	sw	ra,12(sp)
- 6ac:	00912223          	sw	s1,4(sp)
- 6b0:	00060793          	mv	a5,a2
- 6b4:	00000413          	li	s0,0
- 6b8:	00055663          	bgez	a0,6c4 <__div_mod_si3+0x28>
+0000064c <__umulsi3>:
+ 64c:	0000002b          	ssst
+ 650:	00050793          	mv	a5,a0
+ 654:	04b56263          	bltu	a0,a1,698 <__umulsi3+0x4c>
+ 658:	00000513          	li	a0,0
+ 65c:	02058a63          	beqz	a1,690 <__umulsi3+0x44>
+ 660:	0015f713          	andi	a4,a1,1
+ 664:	00070463          	beqz	a4,66c <__umulsi3+0x20>
+ 668:	00f50533          	add	a0,a0,a5
+ 66c:	00179793          	slli	a5,a5,0x1
+ 670:	0015d593          	srli	a1,a1,0x1
+ 674:	fe9ff06f          	j	65c <__umulsi3+0x10>
+ 678:	0017f713          	andi	a4,a5,1
+ 67c:	00070463          	beqz	a4,684 <__umulsi3+0x38>
+ 680:	00b50533          	add	a0,a0,a1
+ 684:	0017d793          	srli	a5,a5,0x1
+ 688:	00159593          	slli	a1,a1,0x1
+ 68c:	fe0796e3          	bnez	a5,678 <__umulsi3+0x2c>
+ 690:	00000057          	ssld
+ 694:	00008067          	ret
+ 698:	00000513          	li	a0,0
+ 69c:	ff1ff06f          	j	68c <__umulsi3+0x40>
+
+000006a0 <__mulsi3>:
+ 6a0:	0000002b          	ssst
+ 6a4:	ff410113          	addi	sp,sp,-12
+ 6a8:	00912023          	sw	s1,0(sp)
+ 6ac:	00112423          	sw	ra,8(sp)
+ 6b0:	00812223          	sw	s0,4(sp)
+ 6b4:	00000493          	li	s1,0
+ 6b8:	00055663          	bgez	a0,6c4 <__mulsi3+0x24>
  6bc:	40a00533          	neg	a0,a0
- 6c0:	00100413          	li	s0,1
- 6c4:	00000493          	li	s1,0
- 6c8:	0005d663          	bgez	a1,6d4 <__div_mod_si3+0x38>
+ 6c0:	00100493          	li	s1,1
+ 6c4:	00000413          	li	s0,0
+ 6c8:	0005d663          	bgez	a1,6d4 <__mulsi3+0x34>
  6cc:	40b005b3          	neg	a1,a1
- 6d0:	00100493          	li	s1,1
- 6d4:	00078613          	mv	a2,a5
- 6d8:	00f12023          	sw	a5,0(sp)
- 6dc:	f61ff0ef          	jal	ra,63c <__udiv_umod_si3>
- 6e0:	00012783          	lw	a5,0(sp)
- 6e4:	00050593          	mv	a1,a0
- 6e8:	02078263          	beqz	a5,70c <__div_mod_si3+0x70>
- 6ec:	00940463          	beq	s0,s1,6f4 <__div_mod_si3+0x58>
- 6f0:	40a005b3          	neg	a1,a0
- 6f4:	00c12083          	lw	ra,12(sp)
- 6f8:	00812403          	lw	s0,8(sp)
- 6fc:	00412483          	lw	s1,4(sp)
- 700:	00058513          	mv	a0,a1
- 704:	01010113          	addi	sp,sp,16
- 708:	00008067          	ret
- 70c:	fe0404e3          	beqz	s0,6f4 <__div_mod_si3+0x58>
- 710:	40a005b3          	neg	a1,a0
- 714:	fe1ff06f          	j	6f4 <__div_mod_si3+0x58>
- 718:	00058513          	mv	a0,a1
- 71c:	00008067          	ret
-
-00000720 <__divsi3>:
- 720:	00100613          	li	a2,1
- 724:	f79ff06f          	j	69c <__div_mod_si3>
-
-00000728 <__modsi3>:
- 728:	00000613          	li	a2,0
- 72c:	f71ff06f          	j	69c <__div_mod_si3>
-
-00000730 <banner>:
- 730:	ee010113          	addi	sp,sp,-288
- 734:	000015b7          	lui	a1,0x1
- 738:	10d00613          	li	a2,269
- 73c:	44c58593          	addi	a1,a1,1100 # 144c <board_name+0x44c>
- 740:	00410513          	addi	a0,sp,4
- 744:	10112e23          	sw	ra,284(sp)
- 748:	10812c23          	sw	s0,280(sp)
- 74c:	10912a23          	sw	s1,276(sp)
- 750:	cd1ff0ef          	jal	ra,420 <memcpy>
- 754:	00a00513          	li	a0,10
- 758:	939ff0ef          	jal	ra,90 <putchar>
- 75c:	00410413          	addi	s0,sp,4
- 760:	00044783          	lbu	a5,0(s0)
- 764:	00079c63          	bnez	a5,77c <banner+0x4c>
- 768:	11c12083          	lw	ra,284(sp)
- 76c:	11812403          	lw	s0,280(sp)
- 770:	11412483          	lw	s1,276(sp)
- 774:	12010113          	addi	sp,sp,288
- 778:	00008067          	ret
- 77c:	00240413          	addi	s0,s0,2
- 780:	fff44483          	lbu	s1,-1(s0)
- 784:	fff48493          	addi	s1,s1,-1
- 788:	fff00713          	li	a4,-1
- 78c:	fce48ae3          	beq	s1,a4,760 <banner+0x30>
- 790:	00078513          	mv	a0,a5
- 794:	00f12023          	sw	a5,0(sp)
- 798:	8f9ff0ef          	jal	ra,90 <putchar>
- 79c:	00012783          	lw	a5,0(sp)
- 7a0:	fe5ff06f          	j	784 <banner+0x54>
+ 6d0:	00100413          	li	s0,1
+ 6d4:	f79ff0ef          	jal	ra,64c <__umulsi3>
+ 6d8:	00848463          	beq	s1,s0,6e0 <__mulsi3+0x40>
+ 6dc:	40a00533          	neg	a0,a0
+ 6e0:	00412403          	lw	s0,4(sp)
+ 6e4:	00812083          	lw	ra,8(sp)
+ 6e8:	00012483          	lw	s1,0(sp)
+ 6ec:	00c10113          	addi	sp,sp,12
+ 6f0:	00000057          	ssld
+ 6f4:	00008067          	ret
+
+000006f8 <__udiv_umod_si3>:
+ 6f8:	0000002b          	ssst
+ 6fc:	00050793          	mv	a5,a0
+ 700:	00100713          	li	a4,1
+ 704:	00058513          	mv	a0,a1
+ 708:	00059a63          	bnez	a1,71c <__udiv_umod_si3+0x24>
+ 70c:	00000057          	ssld
+ 710:	00008067          	ret
+ 714:	00171713          	slli	a4,a4,0x1
+ 718:	00151513          	slli	a0,a0,0x1
+ 71c:	fef56ce3          	bltu	a0,a5,714 <__udiv_umod_si3+0x1c>
+ 720:	00050693          	mv	a3,a0
+ 724:	00000513          	li	a0,0
+ 728:	00078463          	beqz	a5,730 <__udiv_umod_si3+0x38>
+ 72c:	00071863          	bnez	a4,73c <__udiv_umod_si3+0x44>
+ 730:	fc061ee3          	bnez	a2,70c <__udiv_umod_si3+0x14>
+ 734:	00078513          	mv	a0,a5
+ 738:	fd5ff06f          	j	70c <__udiv_umod_si3+0x14>
+ 73c:	00d7e663          	bltu	a5,a3,748 <__udiv_umod_si3+0x50>
+ 740:	40d787b3          	sub	a5,a5,a3
+ 744:	00e50533          	add	a0,a0,a4
+ 748:	00175713          	srli	a4,a4,0x1
+ 74c:	0016d693          	srli	a3,a3,0x1
+ 750:	fd9ff06f          	j	728 <__udiv_umod_si3+0x30>
+
+00000754 <__udivsi3>:
+ 754:	0000002b          	ssst
+ 758:	00100613          	li	a2,1
+ 75c:	f9dff06f          	j	6f8 <__udiv_umod_si3>
+
+00000760 <__umodsi3>:
+ 760:	0000002b          	ssst
+ 764:	00000613          	li	a2,0
+ 768:	f91ff06f          	j	6f8 <__udiv_umod_si3>
+
+0000076c <__div_mod_si3>:
+ 76c:	08058263          	beqz	a1,7f0 <__div_mod_si3+0x84>
+ 770:	0000002b          	ssst
+ 774:	ff010113          	addi	sp,sp,-16
+ 778:	00812423          	sw	s0,8(sp)
+ 77c:	00912223          	sw	s1,4(sp)
+ 780:	00112623          	sw	ra,12(sp)
+ 784:	00060413          	mv	s0,a2
+ 788:	00000493          	li	s1,0
+ 78c:	00055663          	bgez	a0,798 <__div_mod_si3+0x2c>
+ 790:	40a00533          	neg	a0,a0
+ 794:	00100493          	li	s1,1
+ 798:	00000793          	li	a5,0
+ 79c:	0005d663          	bgez	a1,7a8 <__div_mod_si3+0x3c>
+ 7a0:	40b005b3          	neg	a1,a1
+ 7a4:	00100793          	li	a5,1
+ 7a8:	00040613          	mv	a2,s0
+ 7ac:	00f12023          	sw	a5,0(sp)
+ 7b0:	f49ff0ef          	jal	ra,6f8 <__udiv_umod_si3>
+ 7b4:	00050593          	mv	a1,a0
+ 7b8:	02040663          	beqz	s0,7e4 <__div_mod_si3+0x78>
+ 7bc:	00012783          	lw	a5,0(sp)
+ 7c0:	00f48463          	beq	s1,a5,7c8 <__div_mod_si3+0x5c>
+ 7c4:	40a005b3          	neg	a1,a0
+ 7c8:	00812403          	lw	s0,8(sp)
+ 7cc:	00c12083          	lw	ra,12(sp)
+ 7d0:	00412483          	lw	s1,4(sp)
+ 7d4:	00058513          	mv	a0,a1
+ 7d8:	01010113          	addi	sp,sp,16
+ 7dc:	00000057          	ssld
+ 7e0:	00008067          	ret
+ 7e4:	fe0482e3          	beqz	s1,7c8 <__div_mod_si3+0x5c>
+ 7e8:	40a005b3          	neg	a1,a0
+ 7ec:	fddff06f          	j	7c8 <__div_mod_si3+0x5c>
+ 7f0:	00058513          	mv	a0,a1
+ 7f4:	00008067          	ret
+
+000007f8 <__divsi3>:
+ 7f8:	0000002b          	ssst
+ 7fc:	00100613          	li	a2,1
+ 800:	f6dff06f          	j	76c <__div_mod_si3>
+
+00000804 <__modsi3>:
+ 804:	0000002b          	ssst
+ 808:	00000613          	li	a2,0
+ 80c:	f61ff06f          	j	76c <__div_mod_si3>
+
+00000810 <test_call>:
+ 810:	0000002b          	ssst
+ 814:	0000002b          	ssst
+ 818:	0002c0b7          	lui	ra,0x2c
+ 81c:	00000057          	ssld
+ 820:	00000057          	ssld
+ 824:	00008067          	ret
+
+00000828 <banner>:
+ 828:	0000002b          	ssst
+ 82c:	ee010113          	addi	sp,sp,-288
+ 830:	000015b7          	lui	a1,0x1
+ 834:	10d00613          	li	a2,269
+ 838:	16858593          	addi	a1,a1,360 # 1168 <board_name+0x168>
+ 83c:	00410513          	addi	a0,sp,4
+ 840:	10112e23          	sw	ra,284(sp)
+ 844:	10812c23          	sw	s0,280(sp)
+ 848:	10912a23          	sw	s1,276(sp)
+ 84c:	c49ff0ef          	jal	ra,494 <memcpy>
+ 850:	00001537          	lui	a0,0x1
+ 854:	16050513          	addi	a0,a0,352 # 1160 <board_name+0x160>
+ 858:	af1ff0ef          	jal	ra,348 <printf>
+ 85c:	00a00513          	li	a0,10
+ 860:	871ff0ef          	jal	ra,d0 <putchar>
+ 864:	00410413          	addi	s0,sp,4
+ 868:	00044783          	lbu	a5,0(s0)
+ 86c:	00079e63          	bnez	a5,888 <banner+0x60>
+ 870:	11812403          	lw	s0,280(sp)
+ 874:	11c12083          	lw	ra,284(sp)
+ 878:	11412483          	lw	s1,276(sp)
+ 87c:	12010113          	addi	sp,sp,288
+ 880:	00000057          	ssld
+ 884:	00008067          	ret
+ 888:	00144483          	lbu	s1,1(s0)
+ 88c:	00240413          	addi	s0,s0,2
+ 890:	fff48493          	addi	s1,s1,-1
+ 894:	fff00713          	li	a4,-1
+ 898:	fce488e3          	beq	s1,a4,868 <banner+0x40>
+ 89c:	00078513          	mv	a0,a5
+ 8a0:	00f12023          	sw	a5,0(sp)
+ 8a4:	82dff0ef          	jal	ra,d0 <putchar>
+ 8a8:	00012783          	lw	a5,0(sp)
+ 8ac:	fe5ff06f          	j	890 <banner+0x68>
 
 Disassembly of section .text.startup:
 
-000007a4 <main>:
- 7a4:	f7810113          	addi	sp,sp,-136
- 7a8:	08112223          	sw	ra,132(sp)
- 7ac:	08812023          	sw	s0,128(sp)
- 7b0:	06912e23          	sw	s1,124(sp)
- 7b4:	80000437          	lui	s0,0x80000
- 7b8:	f79ff0ef          	jal	ra,730 <banner>
- 7bc:	00044783          	lbu	a5,0(s0) # 80000000 <io+0x0>
- 7c0:	00001737          	lui	a4,0x1
- 7c4:	00070713          	mv	a4,a4
- 7c8:	00279793          	slli	a5,a5,0x2
- 7cc:	00e787b3          	add	a5,a5,a4
- 7d0:	00044603          	lbu	a2,0(s0)
- 7d4:	0007a583          	lw	a1,0(a5)
- 7d8:	00001537          	lui	a0,0x1
- 7dc:	0f450513          	addi	a0,a0,244 # 10f4 <board_name+0xf4>
- 7e0:	b0dff0ef          	jal	ra,2ec <printf>
- 7e4:	000015b7          	lui	a1,0x1
- 7e8:	00001537          	lui	a0,0x1
- 7ec:	10858593          	addi	a1,a1,264 # 1108 <board_name+0x108>
- 7f0:	12850513          	addi	a0,a0,296 # 1128 <board_name+0x128>
- 7f4:	af9ff0ef          	jal	ra,2ec <printf>
- 7f8:	00040793          	mv	a5,s0
- 7fc:	0017c483          	lbu	s1,1(a5)
- 800:	0027c303          	lbu	t1,2(a5)
- 804:	000017b7          	lui	a5,0x1
- 808:	55c7a683          	lw	a3,1372(a5) # 155c <threads>
- 80c:	00040613          	mv	a2,s0
- 810:	00100713          	li	a4,1
- 814:	00c12023          	sw	a2,0(sp)
- 818:	0ff4f493          	andi	s1,s1,255
- 81c:	0ff37313          	andi	t1,t1,255
- 820:	00078413          	mv	s0,a5
- 824:	26d74063          	blt	a4,a3,a84 <main+0x2e0>
- 828:	00001737          	lui	a4,0x1
- 82c:	55870713          	addi	a4,a4,1368 # 1558 <board_name+0x558>
- 830:	01000613          	li	a2,16
- 834:	01000593          	li	a1,16
- 838:	3e800513          	li	a0,1000
- 83c:	00e12423          	sw	a4,8(sp)
- 840:	00612223          	sw	t1,4(sp)
- 844:	d51ff0ef          	jal	ra,594 <mac>
- 848:	4e800793          	li	a5,1256
- 84c:	00412303          	lw	t1,4(sp)
- 850:	00812703          	lw	a4,8(sp)
- 854:	22f50e63          	beq	a0,a5,a90 <main+0x2ec>
- 858:	000017b7          	lui	a5,0x1
- 85c:	55878793          	addi	a5,a5,1368 # 1558 <board_name+0x558>
- 860:	000016b7          	lui	a3,0x1
- 864:	00001537          	lui	a0,0x1
- 868:	00030613          	mv	a2,t1
- 86c:	14868693          	addi	a3,a3,328 # 1148 <board_name+0x148>
- 870:	00048593          	mv	a1,s1
- 874:	15050513          	addi	a0,a0,336 # 1150 <board_name+0x150>
- 878:	a75ff0ef          	jal	ra,2ec <printf>
- 87c:	00012783          	lw	a5,0(sp)
- 880:	00001537          	lui	a0,0x1
- 884:	17850513          	addi	a0,a0,376 # 1178 <board_name+0x178>
- 888:	0067d583          	lhu	a1,6(a5)
- 88c:	54042e23          	sw	zero,1372(s0)
- 890:	a5dff0ef          	jal	ra,2ec <printf>
- 894:	00012783          	lw	a5,0(sp)
- 898:	000f45b7          	lui	a1,0xf4
- 89c:	24058593          	addi	a1,a1,576 # f4240 <test+0xf2cd4>
- 8a0:	0017c503          	lbu	a0,1(a5)
- 8a4:	0027c783          	lbu	a5,2(a5)
- 8a8:	0ff7f413          	andi	s0,a5,255
- 8ac:	00012783          	lw	a5,0(sp)
- 8b0:	00c7a483          	lw	s1,12(a5)
- 8b4:	00c7a603          	lw	a2,12(a5)
- 8b8:	00c12223          	sw	a2,4(sp)
- 8bc:	d29ff0ef          	jal	ra,5e4 <__mulsi3>
- 8c0:	00541793          	slli	a5,s0,0x5
- 8c4:	408787b3          	sub	a5,a5,s0
- 8c8:	00279793          	slli	a5,a5,0x2
- 8cc:	008787b3          	add	a5,a5,s0
- 8d0:	00379793          	slli	a5,a5,0x3
- 8d4:	00f50533          	add	a0,a0,a5
- 8d8:	00148593          	addi	a1,s1,1
- 8dc:	db1ff0ef          	jal	ra,68c <__udivsi3>
- 8e0:	00412603          	lw	a2,4(sp)
- 8e4:	00050593          	mv	a1,a0
- 8e8:	00001537          	lui	a0,0x1
- 8ec:	19450513          	addi	a0,a0,404 # 1194 <board_name+0x194>
- 8f0:	9fdff0ef          	jal	ra,2ec <printf>
- 8f4:	00a00513          	li	a0,10
- 8f8:	f98ff0ef          	jal	ra,90 <putchar>
- 8fc:	00001537          	lui	a0,0x1
- 900:	1c050513          	addi	a0,a0,448 # 11c0 <board_name+0x1c0>
- 904:	8c5ff0ef          	jal	ra,1c8 <puts>
- 908:	000017b7          	lui	a5,0x1
- 90c:	5687a403          	lw	s0,1384(a5) # 1568 <ip>
- 910:	000017b7          	lui	a5,0x1
- 914:	5667d783          	lhu	a5,1382(a5) # 1566 <port>
- 918:	00845493          	srli	s1,s0,0x8
- 91c:	01045313          	srli	t1,s0,0x10
- 920:	0ff47293          	andi	t0,s0,255
- 924:	0ff37313          	andi	t1,t1,255
- 928:	01845393          	srli	t2,s0,0x18
- 92c:	0ff4f493          	andi	s1,s1,255
- 930:	00001537          	lui	a0,0x1
- 934:	00038713          	mv	a4,t2
- 938:	00030693          	mv	a3,t1
- 93c:	00028593          	mv	a1,t0
- 940:	00048613          	mv	a2,s1
- 944:	1e050513          	addi	a0,a0,480 # 11e0 <board_name+0x1e0>
- 948:	00712823          	sw	t2,16(sp)
- 94c:	00612623          	sw	t1,12(sp)
- 950:	00512423          	sw	t0,8(sp)
- 954:	00f12223          	sw	a5,4(sp)
- 958:	995ff0ef          	jal	ra,2ec <printf>
- 95c:	123457b7          	lui	a5,0x12345
- 960:	00001537          	lui	a0,0x1
- 964:	67878793          	addi	a5,a5,1656 # 12345678 <test+0x1234410c>
- 968:	01200713          	li	a4,18
- 96c:	03400693          	li	a3,52
- 970:	05600613          	li	a2,86
- 974:	07800593          	li	a1,120
- 978:	1f850513          	addi	a0,a0,504 # 11f8 <board_name+0x1f8>
- 97c:	971ff0ef          	jal	ra,2ec <printf>
- 980:	01012383          	lw	t2,16(sp)
- 984:	00c12303          	lw	t1,12(sp)
- 988:	00812283          	lw	t0,8(sp)
- 98c:	00001537          	lui	a0,0x1
- 990:	00038713          	mv	a4,t2
- 994:	00030693          	mv	a3,t1
- 998:	00028593          	mv	a1,t0
- 99c:	00040793          	mv	a5,s0
- 9a0:	00048613          	mv	a2,s1
- 9a4:	21850513          	addi	a0,a0,536 # 1218 <board_name+0x218>
- 9a8:	945ff0ef          	jal	ra,2ec <printf>
- 9ac:	00412703          	lw	a4,4(sp)
- 9b0:	00001537          	lui	a0,0x1
- 9b4:	23850513          	addi	a0,a0,568 # 1238 <board_name+0x238>
- 9b8:	00070693          	mv	a3,a4
- 9bc:	00875613          	srli	a2,a4,0x8
- 9c0:	0ff77593          	andi	a1,a4,255
- 9c4:	929ff0ef          	jal	ra,2ec <printf>
- 9c8:	00001537          	lui	a0,0x1
- 9cc:	00b00713          	li	a4,11
- 9d0:	00a00693          	li	a3,10
- 9d4:	00b00613          	li	a2,11
- 9d8:	00a00593          	li	a1,10
- 9dc:	25450513          	addi	a0,a0,596 # 1254 <board_name+0x254>
- 9e0:	90dff0ef          	jal	ra,2ec <printf>
- 9e4:	00a00513          	li	a0,10
- 9e8:	ea8ff0ef          	jal	ra,90 <putchar>
- 9ec:	00001537          	lui	a0,0x1
- 9f0:	27050513          	addi	a0,a0,624 # 1270 <board_name+0x270>
- 9f4:	fd4ff0ef          	jal	ra,1c8 <puts>
- 9f8:	000017b7          	lui	a5,0x1
- 9fc:	28878513          	addi	a0,a5,648 # 1288 <board_name+0x288>
- a00:	8edff0ef          	jal	ra,2ec <printf>
- a04:	04000613          	li	a2,64
- a08:	00000593          	li	a1,0
- a0c:	03c10513          	addi	a0,sp,60
- a10:	a35ff0ef          	jal	ra,444 <memset>
- a14:	04000593          	li	a1,64
- a18:	03c10513          	addi	a0,sp,60
- a1c:	eb4ff0ef          	jal	ra,d0 <gets>
- a20:	00000413          	li	s0,0
- a24:	03c10513          	addi	a0,sp,60
- a28:	000014b7          	lui	s1,0x1
- a2c:	28c48593          	addi	a1,s1,652 # 128c <board_name+0x28c>
- a30:	a31ff0ef          	jal	ra,460 <strtok>
- a34:	00241793          	slli	a5,s0,0x2
- a38:	07c10713          	addi	a4,sp,124
- a3c:	00f707b3          	add	a5,a4,a5
- a40:	faa7a023          	sw	a0,-96(a5)
- a44:	00050a63          	beqz	a0,a58 <main+0x2b4>
- a48:	00140413          	addi	s0,s0,1
- a4c:	00800793          	li	a5,8
- a50:	00000513          	li	a0,0
- a54:	fcf41ce3          	bne	s0,a5,a2c <main+0x288>
- a58:	01c12403          	lw	s0,28(sp)
- a5c:	f8040ee3          	beqz	s0,9f8 <main+0x254>
- a60:	000015b7          	lui	a1,0x1
- a64:	29058593          	addi	a1,a1,656 # 1290 <board_name+0x290>
- a68:	00040513          	mv	a0,s0
- a6c:	989ff0ef          	jal	ra,3f4 <strcmp>
- a70:	02051663          	bnez	a0,a9c <main+0x2f8>
- a74:	00001537          	lui	a0,0x1
- a78:	29850513          	addi	a0,a0,664 # 1298 <board_name+0x298>
- a7c:	871ff0ef          	jal	ra,2ec <printf>
- a80:	f79ff06f          	j	9f8 <main+0x254>
- a84:	00001737          	lui	a4,0x1
- a88:	0e870713          	addi	a4,a4,232 # 10e8 <board_name+0xe8>
- a8c:	da5ff06f          	j	830 <main+0x8c>
- a90:	000017b7          	lui	a5,0x1
- a94:	0ec78793          	addi	a5,a5,236 # 10ec <board_name+0xec>
- a98:	dc9ff06f          	j	860 <main+0xbc>
- a9c:	000015b7          	lui	a1,0x1
- aa0:	2a058593          	addi	a1,a1,672 # 12a0 <board_name+0x2a0>
- aa4:	00040513          	mv	a0,s0
- aa8:	94dff0ef          	jal	ra,3f4 <strcmp>
- aac:	00051a63          	bnez	a0,ac0 <main+0x31c>
- ab0:	c81ff0ef          	jal	ra,730 <banner>
- ab4:	00001537          	lui	a0,0x1
- ab8:	2a850513          	addi	a0,a0,680 # 12a8 <board_name+0x2a8>
- abc:	f39ff06f          	j	9f4 <main+0x250>
+000008b0 <main>:
+ 8b0:	0000002b          	ssst
+ 8b4:	00001537          	lui	a0,0x1
+ 8b8:	f8c10113          	addi	sp,sp,-116
+ 8bc:	0e850513          	addi	a0,a0,232 # 10e8 <board_name+0xe8>
+ 8c0:	06912423          	sw	s1,104(sp)
+ 8c4:	06112823          	sw	ra,112(sp)
+ 8c8:	06812623          	sw	s0,108(sp)
+ 8cc:	90dff0ef          	jal	ra,1d8 <putstr>
+ 8d0:	000017b7          	lui	a5,0x1
+ 8d4:	2607ac23          	sw	zero,632(a5) # 1278 <threads>
+ 8d8:	000014b7          	lui	s1,0x1
+ 8dc:	04000613          	li	a2,64
+ 8e0:	00000593          	li	a1,0
+ 8e4:	02810513          	addi	a0,sp,40
+ 8e8:	bd9ff0ef          	jal	ra,4c0 <memset>
+ 8ec:	04000593          	li	a1,64
+ 8f0:	02810513          	addi	a0,sp,40
+ 8f4:	825ff0ef          	jal	ra,118 <gets>
+ 8f8:	00000413          	li	s0,0
+ 8fc:	02810513          	addi	a0,sp,40
+ 900:	0f848593          	addi	a1,s1,248 # 10f8 <board_name+0xf8>
+ 904:	be1ff0ef          	jal	ra,4e4 <strtok>
+ 908:	00241793          	slli	a5,s0,0x2
+ 90c:	06810713          	addi	a4,sp,104
+ 910:	00f707b3          	add	a5,a4,a5
+ 914:	faa7a023          	sw	a0,-96(a5)
+ 918:	00050a63          	beqz	a0,92c <main+0x7c>
+ 91c:	00140413          	addi	s0,s0,1
+ 920:	00800793          	li	a5,8
+ 924:	00000513          	li	a0,0
+ 928:	fcf41ce3          	bne	s0,a5,900 <main+0x50>
+ 92c:	00812403          	lw	s0,8(sp)
+ 930:	fa0406e3          	beqz	s0,8dc <main+0x2c>
+ 934:	000015b7          	lui	a1,0x1
+ 938:	0fc58593          	addi	a1,a1,252 # 10fc <board_name+0xfc>
+ 93c:	00040513          	mv	a0,s0
+ 940:	b21ff0ef          	jal	ra,460 <strcmp>
+ 944:	f8050ce3          	beqz	a0,8dc <main+0x2c>
+ 948:	000015b7          	lui	a1,0x1
+ 94c:	10458593          	addi	a1,a1,260 # 1104 <board_name+0x104>
+ 950:	00040513          	mv	a0,s0
+ 954:	b0dff0ef          	jal	ra,460 <strcmp>
+ 958:	00051663          	bnez	a0,964 <main+0xb4>
+ 95c:	ecdff0ef          	jal	ra,828 <banner>
+ 960:	f7dff06f          	j	8dc <main+0x2c>
+ 964:	000015b7          	lui	a1,0x1
+ 968:	10c58593          	addi	a1,a1,268 # 110c <board_name+0x10c>
+ 96c:	00040513          	mv	a0,s0
+ 970:	af1ff0ef          	jal	ra,460 <strcmp>
+ 974:	06051a63          	bnez	a0,9e8 <main+0x138>
+ 978:	00c12403          	lw	s0,12(sp)
+ 97c:	00040863          	beqz	s0,98c <main+0xdc>
+ 980:	00040513          	mv	a0,s0
+ 984:	c61ff0ef          	jal	ra,5e4 <xtoi>
+ 988:	00050413          	mv	s0,a0
+ 98c:	10040793          	addi	a5,s0,256
+ 990:	00f12023          	sw	a5,0(sp)
+ 994:	04c0006f          	j	9e0 <main+0x130>
+ 998:	00e406b3          	add	a3,s0,a4
+ 99c:	0006c503          	lbu	a0,0(a3)
+ 9a0:	05e00613          	li	a2,94
+ 9a4:	fe050693          	addi	a3,a0,-32
+ 9a8:	0ff6f693          	andi	a3,a3,255
+ 9ac:	00d67463          	bgeu	a2,a3,9b4 <main+0x104>
+ 9b0:	02e00513          	li	a0,46
+ 9b4:	00e12223          	sw	a4,4(sp)
+ 9b8:	f18ff0ef          	jal	ra,d0 <putchar>
+ 9bc:	00412703          	lw	a4,4(sp)
+ 9c0:	01000693          	li	a3,16
+ 9c4:	00170713          	addi	a4,a4,1
+ 9c8:	fcd718e3          	bne	a4,a3,998 <main+0xe8>
+ 9cc:	00a00513          	li	a0,10
+ 9d0:	f00ff0ef          	jal	ra,d0 <putchar>
+ 9d4:	00012783          	lw	a5,0(sp)
+ 9d8:	01040413          	addi	s0,s0,16
+ 9dc:	f08780e3          	beq	a5,s0,8dc <main+0x2c>
+ 9e0:	00000713          	li	a4,0
+ 9e4:	fb5ff06f          	j	998 <main+0xe8>
+ 9e8:	000015b7          	lui	a1,0x1
+ 9ec:	00200613          	li	a2,2
+ 9f0:	11458593          	addi	a1,a1,276 # 1114 <board_name+0x114>
+ 9f4:	00040513          	mv	a0,s0
+ 9f8:	a2dff0ef          	jal	ra,424 <strncmp>
+ 9fc:	00050e63          	beqz	a0,a18 <main+0x168>
+ a00:	000015b7          	lui	a1,0x1
+ a04:	00200613          	li	a2,2
+ a08:	11858593          	addi	a1,a1,280 # 1118 <board_name+0x118>
+ a0c:	00040513          	mv	a0,s0
+ a10:	a15ff0ef          	jal	ra,424 <strncmp>
+ a14:	06051a63          	bnez	a0,a88 <main+0x1d8>
+ a18:	00244703          	lbu	a4,2(s0)
+ a1c:	06d00793          	li	a5,109
+ a20:	04f71e63          	bne	a4,a5,a7c <main+0x1cc>
+ a24:	00c12503          	lw	a0,12(sp)
+ a28:	bbdff0ef          	jal	ra,5e4 <xtoi>
+ a2c:	00050713          	mv	a4,a0
+ a30:	00200793          	li	a5,2
+ a34:	fff70713          	addi	a4,a4,-1
+ a38:	fff00693          	li	a3,-1
+ a3c:	ead700e3          	beq	a4,a3,8dc <main+0x2c>
+ a40:	00044603          	lbu	a2,0(s0)
+ a44:	07200693          	li	a3,114
+ a48:	fed606e3          	beq	a2,a3,a34 <main+0x184>
+ a4c:	00178693          	addi	a3,a5,1
+ a50:	00e12223          	sw	a4,4(sp)
+ a54:	00279793          	slli	a5,a5,0x2
+ a58:	06810713          	addi	a4,sp,104
+ a5c:	00f707b3          	add	a5,a4,a5
+ a60:	fa07a503          	lw	a0,-96(a5)
+ a64:	00d12023          	sw	a3,0(sp)
+ a68:	b7dff0ef          	jal	ra,5e4 <xtoi>
+ a6c:	00012683          	lw	a3,0(sp)
+ a70:	00412703          	lw	a4,4(sp)
+ a74:	00068793          	mv	a5,a3
+ a78:	fbdff06f          	j	a34 <main+0x184>
+ a7c:	00100793          	li	a5,1
+ a80:	00100713          	li	a4,1
+ a84:	fb1ff06f          	j	a34 <main+0x184>
+ a88:	000015b7          	lui	a1,0x1
+ a8c:	11c58593          	addi	a1,a1,284 # 111c <board_name+0x11c>
+ a90:	00040513          	mv	a0,s0
+ a94:	9cdff0ef          	jal	ra,460 <strcmp>
+ a98:	02051463          	bnez	a0,ac0 <main+0x210>
+ a9c:	00c12503          	lw	a0,12(sp)
+ aa0:	e2050ee3          	beqz	a0,8dc <main+0x2c>
+ aa4:	b41ff0ef          	jal	ra,5e4 <xtoi>
+ aa8:	01051513          	slli	a0,a0,0x10
+ aac:	800007b7          	lui	a5,0x80000
+ ab0:	01055513          	srli	a0,a0,0x10
+ ab4:	00078793          	mv	a5,a5
+ ab8:	00a79423          	sh	a0,8(a5) # 80000008 <io+0x8>
+ abc:	e21ff06f          	j	8dc <main+0x2c>
  ac0:	000015b7          	lui	a1,0x1
- ac4:	2c058593          	addi	a1,a1,704 # 12c0 <board_name+0x2c0>
+ ac4:	12058593          	addi	a1,a1,288 # 1120 <board_name+0x120>
  ac8:	00040513          	mv	a0,s0
- acc:	929ff0ef          	jal	ra,3f4 <strcmp>
- ad0:	0a051863          	bnez	a0,b80 <main+0x3dc>
- ad4:	02012403          	lw	s0,32(sp)
- ad8:	00040863          	beqz	s0,ae8 <main+0x344>
- adc:	00040513          	mv	a0,s0
- ae0:	a75ff0ef          	jal	ra,554 <xtoi>
- ae4:	00050413          	mv	s0,a0
- ae8:	10040793          	addi	a5,s0,256
- aec:	00f12223          	sw	a5,4(sp)
- af0:	000014b7          	lui	s1,0x1
- af4:	00040593          	mv	a1,s0
- af8:	2c848513          	addi	a0,s1,712 # 12c8 <board_name+0x2c8>
- afc:	ff0ff0ef          	jal	ra,2ec <printf>
- b00:	00000713          	li	a4,0
- b04:	00001637          	lui	a2,0x1
- b08:	00e406b3          	add	a3,s0,a4
- b0c:	0006c583          	lbu	a1,0(a3)
- b10:	2d060513          	addi	a0,a2,720 # 12d0 <board_name+0x2d0>
- b14:	00e12423          	sw	a4,8(sp)
- b18:	fd4ff0ef          	jal	ra,2ec <printf>
- b1c:	00812703          	lw	a4,8(sp)
- b20:	01000693          	li	a3,16
- b24:	00001637          	lui	a2,0x1
- b28:	00170713          	addi	a4,a4,1
- b2c:	fcd71ee3          	bne	a4,a3,b08 <main+0x364>
- b30:	00000713          	li	a4,0
- b34:	00e406b3          	add	a3,s0,a4
- b38:	0006c503          	lbu	a0,0(a3)
- b3c:	05e00613          	li	a2,94
- b40:	fe050693          	addi	a3,a0,-32
- b44:	0ff6f693          	andi	a3,a3,255
- b48:	00d67463          	bleu	a3,a2,b50 <main+0x3ac>
- b4c:	02e00513          	li	a0,46
- b50:	00e12423          	sw	a4,8(sp)
- b54:	d3cff0ef          	jal	ra,90 <putchar>
- b58:	00812703          	lw	a4,8(sp)
- b5c:	01000693          	li	a3,16
- b60:	00170713          	addi	a4,a4,1
- b64:	fcd718e3          	bne	a4,a3,b34 <main+0x390>
- b68:	00a00513          	li	a0,10
- b6c:	d24ff0ef          	jal	ra,90 <putchar>
- b70:	00412783          	lw	a5,4(sp)
- b74:	01040413          	addi	s0,s0,16
- b78:	f6f41ee3          	bne	s0,a5,af4 <main+0x350>
- b7c:	e7dff06f          	j	9f8 <main+0x254>
- b80:	000015b7          	lui	a1,0x1
- b84:	00200613          	li	a2,2
- b88:	2d458593          	addi	a1,a1,724 # 12d4 <board_name+0x2d4>
- b8c:	00040513          	mv	a0,s0
- b90:	831ff0ef          	jal	ra,3c0 <strncmp>
- b94:	00050e63          	beqz	a0,bb0 <main+0x40c>
- b98:	000015b7          	lui	a1,0x1
- b9c:	00200613          	li	a2,2
- ba0:	2d858593          	addi	a1,a1,728 # 12d8 <board_name+0x2d8>
- ba4:	00040513          	mv	a0,s0
- ba8:	819ff0ef          	jal	ra,3c0 <strncmp>
- bac:	1e051663          	bnez	a0,d98 <main+0x5f4>
- bb0:	00244703          	lbu	a4,2(s0)
- bb4:	06d00793          	li	a5,109
- bb8:	06f71263          	bne	a4,a5,c1c <main+0x478>
- bbc:	02012503          	lw	a0,32(sp)
- bc0:	995ff0ef          	jal	ra,554 <xtoi>
- bc4:	00a12a23          	sw	a0,20(sp)
- bc8:	00200793          	li	a5,2
- bcc:	00300713          	li	a4,3
- bd0:	00e12823          	sw	a4,16(sp)
- bd4:	00178713          	addi	a4,a5,1
- bd8:	00e12623          	sw	a4,12(sp)
- bdc:	00279793          	slli	a5,a5,0x2
- be0:	07c10713          	addi	a4,sp,124
- be4:	00f707b3          	add	a5,a4,a5
- be8:	fa07a503          	lw	a0,-96(a5)
- bec:	00000493          	li	s1,0
- bf0:	965ff0ef          	jal	ra,554 <xtoi>
- bf4:	00a12223          	sw	a0,4(sp)
- bf8:	00050593          	mv	a1,a0
- bfc:	00001537          	lui	a0,0x1
- c00:	2c850513          	addi	a0,a0,712 # 12c8 <board_name+0x2c8>
- c04:	ee8ff0ef          	jal	ra,2ec <printf>
- c08:	01412783          	lw	a5,20(sp)
- c0c:	02979263          	bne	a5,s1,c30 <main+0x48c>
- c10:	00a00513          	li	a0,10
- c14:	c7cff0ef          	jal	ra,90 <putchar>
- c18:	de1ff06f          	j	9f8 <main+0x254>
- c1c:	00100713          	li	a4,1
- c20:	00e12a23          	sw	a4,20(sp)
- c24:	00100793          	li	a5,1
- c28:	00200713          	li	a4,2
- c2c:	fa5ff06f          	j	bd0 <main+0x42c>
- c30:	01012783          	lw	a5,16(sp)
- c34:	00044703          	lbu	a4,0(s0)
- c38:	00f407b3          	add	a5,s0,a5
- c3c:	00f12423          	sw	a5,8(sp)
- c40:	07200793          	li	a5,114
- c44:	08f71663          	bne	a4,a5,cd0 <main+0x52c>
- c48:	00812783          	lw	a5,8(sp)
- c4c:	0007c703          	lbu	a4,0(a5)
- c50:	06200793          	li	a5,98
- c54:	00f71e63          	bne	a4,a5,c70 <main+0x4cc>
- c58:	00412783          	lw	a5,4(sp)
- c5c:	009787b3          	add	a5,a5,s1
- c60:	0007c583          	lbu	a1,0(a5)
- c64:	000017b7          	lui	a5,0x1
- c68:	2d078513          	addi	a0,a5,720 # 12d0 <board_name+0x2d0>
- c6c:	e80ff0ef          	jal	ra,2ec <printf>
- c70:	00812783          	lw	a5,8(sp)
- c74:	0007c703          	lbu	a4,0(a5)
- c78:	07700793          	li	a5,119
- c7c:	02f71063          	bne	a4,a5,c9c <main+0x4f8>
- c80:	00412703          	lw	a4,4(sp)
- c84:	00149793          	slli	a5,s1,0x1
- c88:	00e787b3          	add	a5,a5,a4
- c8c:	00079583          	lh	a1,0(a5)
- c90:	000017b7          	lui	a5,0x1
- c94:	2d078513          	addi	a0,a5,720 # 12d0 <board_name+0x2d0>
- c98:	e54ff0ef          	jal	ra,2ec <printf>
- c9c:	00812783          	lw	a5,8(sp)
- ca0:	0007c703          	lbu	a4,0(a5)
- ca4:	06c00793          	li	a5,108
- ca8:	02f71063          	bne	a4,a5,cc8 <main+0x524>
- cac:	00412703          	lw	a4,4(sp)
- cb0:	00249793          	slli	a5,s1,0x2
- cb4:	00e787b3          	add	a5,a5,a4
- cb8:	0007a583          	lw	a1,0(a5)
- cbc:	000017b7          	lui	a5,0x1
- cc0:	2d078513          	addi	a0,a5,720 # 12d0 <board_name+0x2d0>
- cc4:	e28ff0ef          	jal	ra,2ec <printf>
- cc8:	00148493          	addi	s1,s1,1
- ccc:	f3dff06f          	j	c08 <main+0x464>
- cd0:	00c12783          	lw	a5,12(sp)
- cd4:	07c10713          	addi	a4,sp,124
- cd8:	00178793          	addi	a5,a5,1
- cdc:	00f12c23          	sw	a5,24(sp)
- ce0:	00c12783          	lw	a5,12(sp)
- ce4:	00279793          	slli	a5,a5,0x2
- ce8:	00f707b3          	add	a5,a4,a5
- cec:	fa07a503          	lw	a0,-96(a5)
- cf0:	865ff0ef          	jal	ra,554 <xtoi>
- cf4:	00812703          	lw	a4,8(sp)
- cf8:	00050793          	mv	a5,a0
- cfc:	00074683          	lbu	a3,0(a4)
- d00:	06200713          	li	a4,98
- d04:	02e69463          	bne	a3,a4,d2c <main+0x588>
- d08:	00412703          	lw	a4,4(sp)
- d0c:	000017b7          	lui	a5,0x1
- d10:	0ff57593          	andi	a1,a0,255
- d14:	00970733          	add	a4,a4,s1
- d18:	00a70023          	sb	a0,0(a4)
- d1c:	00a12623          	sw	a0,12(sp)
- d20:	2d078513          	addi	a0,a5,720 # 12d0 <board_name+0x2d0>
- d24:	dc8ff0ef          	jal	ra,2ec <printf>
- d28:	00c12783          	lw	a5,12(sp)
- d2c:	00812703          	lw	a4,8(sp)
- d30:	00074683          	lbu	a3,0(a4)
- d34:	07700713          	li	a4,119
- d38:	02e69863          	bne	a3,a4,d68 <main+0x5c4>
- d3c:	01079593          	slli	a1,a5,0x10
- d40:	00f12623          	sw	a5,12(sp)
- d44:	00412783          	lw	a5,4(sp)
- d48:	00149713          	slli	a4,s1,0x1
- d4c:	4105d593          	srai	a1,a1,0x10
- d50:	00f70733          	add	a4,a4,a5
- d54:	000017b7          	lui	a5,0x1
- d58:	2d078513          	addi	a0,a5,720 # 12d0 <board_name+0x2d0>
- d5c:	00b71023          	sh	a1,0(a4)
- d60:	d8cff0ef          	jal	ra,2ec <printf>
- d64:	00c12783          	lw	a5,12(sp)
- d68:	00812703          	lw	a4,8(sp)
- d6c:	01812603          	lw	a2,24(sp)
- d70:	00074683          	lbu	a3,0(a4)
- d74:	00c12623          	sw	a2,12(sp)
- d78:	06c00713          	li	a4,108
- d7c:	f4e696e3          	bne	a3,a4,cc8 <main+0x524>
- d80:	00412683          	lw	a3,4(sp)
- d84:	00249713          	slli	a4,s1,0x2
- d88:	00078593          	mv	a1,a5
- d8c:	00d70733          	add	a4,a4,a3
- d90:	00f72023          	sw	a5,0(a4)
- d94:	f29ff06f          	j	cbc <main+0x518>
- d98:	000015b7          	lui	a1,0x1
- d9c:	2dc58593          	addi	a1,a1,732 # 12dc <board_name+0x2dc>
- da0:	00040513          	mv	a0,s0
- da4:	e50ff0ef          	jal	ra,3f4 <strcmp>
- da8:	02051c63          	bnez	a0,de0 <main+0x63c>
- dac:	02012503          	lw	a0,32(sp)
- db0:	00050c63          	beqz	a0,dc8 <main+0x624>
- db4:	fa0ff0ef          	jal	ra,554 <xtoi>
- db8:	00012783          	lw	a5,0(sp)
- dbc:	01051513          	slli	a0,a0,0x10
- dc0:	01055513          	srli	a0,a0,0x10
- dc4:	00a79423          	sh	a0,8(a5)
- dc8:	00012783          	lw	a5,0(sp)
- dcc:	00001537          	lui	a0,0x1
- dd0:	2e050513          	addi	a0,a0,736 # 12e0 <board_name+0x2e0>
- dd4:	0087d583          	lhu	a1,8(a5)
- dd8:	d14ff0ef          	jal	ra,2ec <printf>
- ddc:	c1dff06f          	j	9f8 <main+0x254>
- de0:	000015b7          	lui	a1,0x1
- de4:	2ec58593          	addi	a1,a1,748 # 12ec <board_name+0x2ec>
- de8:	00040513          	mv	a0,s0
- dec:	e08ff0ef          	jal	ra,3f4 <strcmp>
- df0:	02051663          	bnez	a0,e1c <main+0x678>
- df4:	02012503          	lw	a0,32(sp)
- df8:	00050863          	beqz	a0,e08 <main+0x664>
- dfc:	f04ff0ef          	jal	ra,500 <atoi>
- e00:	00012783          	lw	a5,0(sp)
- e04:	00a7a623          	sw	a0,12(a5)
- e08:	00012783          	lw	a5,0(sp)
- e0c:	00001537          	lui	a0,0x1
- e10:	2f450513          	addi	a0,a0,756 # 12f4 <board_name+0x2f4>
- e14:	00c7a583          	lw	a1,12(a5)
- e18:	fc1ff06f          	j	dd8 <main+0x634>
- e1c:	000015b7          	lui	a1,0x1
- e20:	30058593          	addi	a1,a1,768 # 1300 <board_name+0x300>
- e24:	00040513          	mv	a0,s0
- e28:	dccff0ef          	jal	ra,3f4 <strcmp>
- e2c:	02051a63          	bnez	a0,e60 <main+0x6bc>
- e30:	02012503          	lw	a0,32(sp)
- e34:	00050c63          	beqz	a0,e4c <main+0x6a8>
- e38:	f1cff0ef          	jal	ra,554 <xtoi>
- e3c:	00012783          	lw	a5,0(sp)
- e40:	01051513          	slli	a0,a0,0x10
- e44:	01055513          	srli	a0,a0,0x10
- e48:	00a79523          	sh	a0,10(a5)
- e4c:	00012783          	lw	a5,0(sp)
- e50:	00001537          	lui	a0,0x1
- e54:	30850513          	addi	a0,a0,776 # 1308 <board_name+0x308>
- e58:	00a7d583          	lhu	a1,10(a5)
- e5c:	f7dff06f          	j	dd8 <main+0x634>
- e60:	000015b7          	lui	a1,0x1
- e64:	31458593          	addi	a1,a1,788 # 1314 <board_name+0x314>
- e68:	00040513          	mv	a0,s0
- e6c:	d88ff0ef          	jal	ra,3f4 <strcmp>
- e70:	02051a63          	bnez	a0,ea4 <main+0x700>
- e74:	02012503          	lw	a0,32(sp)
- e78:	e88ff0ef          	jal	ra,500 <atoi>
- e7c:	00050413          	mv	s0,a0
- e80:	02412503          	lw	a0,36(sp)
- e84:	e7cff0ef          	jal	ra,500 <atoi>
- e88:	00050593          	mv	a1,a0
- e8c:	00040513          	mv	a0,s0
- e90:	f54ff0ef          	jal	ra,5e4 <__mulsi3>
- e94:	00050593          	mv	a1,a0
- e98:	00001537          	lui	a0,0x1
- e9c:	31850513          	addi	a0,a0,792 # 1318 <board_name+0x318>
- ea0:	f39ff06f          	j	dd8 <main+0x634>
- ea4:	000015b7          	lui	a1,0x1
- ea8:	32458593          	addi	a1,a1,804 # 1324 <board_name+0x324>
- eac:	00040513          	mv	a0,s0
- eb0:	d44ff0ef          	jal	ra,3f4 <strcmp>
- eb4:	04051863          	bnez	a0,f04 <main+0x760>
- eb8:	02012503          	lw	a0,32(sp)
- ebc:	e44ff0ef          	jal	ra,500 <atoi>
- ec0:	00050413          	mv	s0,a0
- ec4:	02412503          	lw	a0,36(sp)
- ec8:	e38ff0ef          	jal	ra,500 <atoi>
- ecc:	00050493          	mv	s1,a0
- ed0:	00050593          	mv	a1,a0
- ed4:	00040513          	mv	a0,s0
- ed8:	851ff0ef          	jal	ra,728 <__modsi3>
- edc:	00a12223          	sw	a0,4(sp)
- ee0:	00048593          	mv	a1,s1
- ee4:	00040513          	mv	a0,s0
- ee8:	839ff0ef          	jal	ra,720 <__divsi3>
- eec:	00412603          	lw	a2,4(sp)
- ef0:	00050593          	mv	a1,a0
- ef4:	00001537          	lui	a0,0x1
- ef8:	32850513          	addi	a0,a0,808 # 1328 <board_name+0x328>
- efc:	bf0ff0ef          	jal	ra,2ec <printf>
- f00:	af9ff06f          	j	9f8 <main+0x254>
- f04:	000015b7          	lui	a1,0x1
- f08:	33c58593          	addi	a1,a1,828 # 133c <board_name+0x33c>
- f0c:	00040513          	mv	a0,s0
- f10:	ce4ff0ef          	jal	ra,3f4 <strcmp>
- f14:	04051663          	bnez	a0,f60 <main+0x7bc>
- f18:	02012503          	lw	a0,32(sp)
- f1c:	de4ff0ef          	jal	ra,500 <atoi>
- f20:	00050413          	mv	s0,a0
- f24:	02412503          	lw	a0,36(sp)
- f28:	dd8ff0ef          	jal	ra,500 <atoi>
- f2c:	00050493          	mv	s1,a0
- f30:	02812503          	lw	a0,40(sp)
- f34:	dccff0ef          	jal	ra,500 <atoi>
- f38:	01051613          	slli	a2,a0,0x10
- f3c:	01049593          	slli	a1,s1,0x10
- f40:	4105d593          	srai	a1,a1,0x10
- f44:	41065613          	srai	a2,a2,0x10
- f48:	00040513          	mv	a0,s0
- f4c:	e48ff0ef          	jal	ra,594 <mac>
- f50:	00050593          	mv	a1,a0
- f54:	00001537          	lui	a0,0x1
- f58:	34050513          	addi	a0,a0,832 # 1340 <board_name+0x340>
- f5c:	e7dff06f          	j	dd8 <main+0x634>
- f60:	00044783          	lbu	a5,0(s0)
- f64:	a8078ae3          	beqz	a5,9f8 <main+0x254>
- f68:	00001537          	lui	a0,0x1
- f6c:	00040593          	mv	a1,s0
- f70:	34c50513          	addi	a0,a0,844 # 134c <board_name+0x34c>
- f74:	e65ff06f          	j	dd8 <main+0x634>
+ acc:	995ff0ef          	jal	ra,460 <strcmp>
+ ad0:	02051063          	bnez	a0,af0 <main+0x240>
+ ad4:	00c12503          	lw	a0,12(sp)
+ ad8:	e00502e3          	beqz	a0,8dc <main+0x2c>
+ adc:	aadff0ef          	jal	ra,588 <atoi>
+ ae0:	800007b7          	lui	a5,0x80000
+ ae4:	00078793          	mv	a5,a5
+ ae8:	00a7a623          	sw	a0,12(a5) # 8000000c <io+0xc>
+ aec:	df1ff06f          	j	8dc <main+0x2c>
+ af0:	000015b7          	lui	a1,0x1
+ af4:	12858593          	addi	a1,a1,296 # 1128 <board_name+0x128>
+ af8:	00040513          	mv	a0,s0
+ afc:	965ff0ef          	jal	ra,460 <strcmp>
+ b00:	02051463          	bnez	a0,b28 <main+0x278>
+ b04:	00c12503          	lw	a0,12(sp)
+ b08:	dc050ae3          	beqz	a0,8dc <main+0x2c>
+ b0c:	ad9ff0ef          	jal	ra,5e4 <xtoi>
+ b10:	01051513          	slli	a0,a0,0x10
+ b14:	800007b7          	lui	a5,0x80000
+ b18:	01055513          	srli	a0,a0,0x10
+ b1c:	00078793          	mv	a5,a5
+ b20:	00a79523          	sh	a0,10(a5) # 8000000a <io+0xa>
+ b24:	db9ff06f          	j	8dc <main+0x2c>
+ b28:	000015b7          	lui	a1,0x1
+ b2c:	13058593          	addi	a1,a1,304 # 1130 <board_name+0x130>
+ b30:	00040513          	mv	a0,s0
+ b34:	92dff0ef          	jal	ra,460 <strcmp>
+ b38:	00051c63          	bnez	a0,b50 <main+0x2a0>
+ b3c:	00c12503          	lw	a0,12(sp)
+ b40:	a49ff0ef          	jal	ra,588 <atoi>
+ b44:	01012503          	lw	a0,16(sp)
+ b48:	a41ff0ef          	jal	ra,588 <atoi>
+ b4c:	d91ff06f          	j	8dc <main+0x2c>
+ b50:	000015b7          	lui	a1,0x1
+ b54:	13458593          	addi	a1,a1,308 # 1134 <board_name+0x134>
+ b58:	00040513          	mv	a0,s0
+ b5c:	905ff0ef          	jal	ra,460 <strcmp>
+ b60:	fc050ee3          	beqz	a0,b3c <main+0x28c>
+ b64:	000015b7          	lui	a1,0x1
+ b68:	13858593          	addi	a1,a1,312 # 1138 <board_name+0x138>
+ b6c:	00040513          	mv	a0,s0
+ b70:	8f1ff0ef          	jal	ra,460 <strcmp>
+ b74:	00051e63          	bnez	a0,b90 <main+0x2e0>
+ b78:	00c12503          	lw	a0,12(sp)
+ b7c:	a0dff0ef          	jal	ra,588 <atoi>
+ b80:	01012503          	lw	a0,16(sp)
+ b84:	a05ff0ef          	jal	ra,588 <atoi>
+ b88:	01412503          	lw	a0,20(sp)
+ b8c:	fbdff06f          	j	b48 <main+0x298>
+ b90:	000015b7          	lui	a1,0x1
+ b94:	13c58593          	addi	a1,a1,316 # 113c <board_name+0x13c>
+ b98:	00040513          	mv	a0,s0
+ b9c:	8c5ff0ef          	jal	ra,460 <strcmp>
+ ba0:	d2051ee3          	bnez	a0,8dc <main+0x2c>
+ ba4:	00c12503          	lw	a0,12(sp)
+ ba8:	000015b7          	lui	a1,0x1
+ bac:	14458593          	addi	a1,a1,324 # 1144 <board_name+0x144>
+ bb0:	8b1ff0ef          	jal	ra,460 <strcmp>
+ bb4:	d20514e3          	bnez	a0,8dc <main+0x2c>
+ bb8:	c59ff0ef          	jal	ra,810 <test_call>
+ bbc:	00001537          	lui	a0,0x1
+ bc0:	14c50513          	addi	a0,a0,332 # 114c <board_name+0x14c>
+ bc4:	e14ff0ef          	jal	ra,1d8 <putstr>
+ bc8:	d15ff06f          	j	8dc <main+0x2c>
diff --git a/src/darksocv.map b/src/darksocv.map
index c81ac8b..aece6cf 100644
--- a/src/darksocv.map
+++ b/src/darksocv.map
@@ -7,104 +7,97 @@ io                  0x10              io.o
 Memory Configuration
 
 Name             Origin             Length             Attributes
+IO               0x0000000080000000 0x0000000000000010 rw !x
 ROM              0x0000000000000000 0x0000000000001000 x !rw
 RAM              0x0000000000001000 0x0000000000001000 rw !x
-IO               0x0000000080000000 0x0000000000000010 rw !x
 *default*        0x0000000000000000 0xffffffffffffffff
 
 Linker script and memory map
 
 
-.text           0x0000000000000000      0x7a4
+.io             0x0000000080000000       0x10
+ io.o(COMMON)
+ COMMON         0x0000000080000000       0x10 io.o
+                0x0000000080000000                io
+
+.text           0x0000000000000000      0x868
  boot.o(.text)
- .text          0x0000000000000000       0x74 boot.o
+ .text          0x0000000000000000       0x88 boot.o
                 0x0000000000000000                boot
  *(.text)
- .text          0x0000000000000074        0x0 io.o
- .text          0x0000000000000074      0x6bc stdio.o
-                0x0000000000000074                getchar
-                0x0000000000000090                putchar
-                0x00000000000000d0                gets
-                0x0000000000000188                putstr
-                0x00000000000001c8                puts
-                0x00000000000001e4                putdx
-                0x00000000000002dc                putx
-                0x00000000000002e4                putd
-                0x00000000000002ec                printf
-                0x00000000000003c0                strncmp
-                0x00000000000003f4                strcmp
-                0x00000000000003fc                strlen
-                0x0000000000000420                memcpy
-                0x0000000000000444                memset
-                0x0000000000000460                strtok
-                0x0000000000000500                atoi
-                0x0000000000000554                xtoi
-                0x0000000000000594                mac
-                0x000000000000059c                __umulsi3
-                0x00000000000005e4                __mulsi3
-                0x000000000000063c                __udiv_umod_si3
-                0x000000000000068c                __udivsi3
-                0x0000000000000694                __umodsi3
-                0x000000000000069c                __div_mod_si3
-                0x0000000000000720                __divsi3
-                0x0000000000000728                __modsi3
- .text          0x0000000000000730        0x0 main.o
- .text          0x0000000000000730       0x74 banner.o
-                0x0000000000000730                banner
+ .text          0x0000000000000088        0x0 io.o
+ .text          0x0000000000000088      0x758 stdio.o
+                0x0000000000000088                getchar
+                0x00000000000000b0                putchar
+                0x00000000000000f8                gets
+                0x00000000000001b8                putstr
+                0x0000000000000200                puts
+                0x0000000000000220                putdx
+                0x0000000000000310                putx
+                0x000000000000031c                putd
+                0x0000000000000328                printf
+                0x0000000000000404                strncmp
+                0x0000000000000440                strcmp
+                0x000000000000044c                strlen
+                0x0000000000000474                memcpy
+                0x00000000000004a0                memset
+                0x00000000000004c4                strtok
+                0x0000000000000568                atoi
+                0x00000000000005c4                xtoi
+                0x000000000000060c                mac
+                0x000000000000061c                __umulsi3
+                0x0000000000000670                __mulsi3
+                0x00000000000006c8                __udiv_umod_si3
+                0x0000000000000724                __udivsi3
+                0x0000000000000730                __umodsi3
+                0x000000000000073c                __div_mod_si3
+                0x00000000000007c8                __divsi3
+                0x00000000000007d4                __modsi3
+ .text          0x00000000000007e0        0x0 main.o
+ .text          0x00000000000007e0       0x88 banner.o
+                0x00000000000007e0                banner
 
-.text.startup   0x00000000000007a4      0x7d4
- .text.startup  0x00000000000007a4      0x7d4 main.o
-                0x00000000000007a4                main
+.text.startup   0x0000000000000868      0x81c
+ .text.startup  0x0000000000000868      0x81c main.o
+                0x0000000000000868                main
 
-.data           0x0000000000001000      0x564
- *(.data)
- .data          0x0000000000001000        0x0 boot.o
- .data          0x0000000000001000       0x18 io.o
-                0x0000000000001000                board_name
- .data          0x0000000000001018        0x0 stdio.o
- .data          0x0000000000001018        0x0 main.o
- .data          0x0000000000001018        0x0 banner.o
- *(.bss)
- .bss           0x0000000000001018        0x0 boot.o
- .bss           0x0000000000001018        0x0 io.o
- .bss           0x0000000000001018        0x0 stdio.o
- .bss           0x0000000000001018        0x0 main.o
- .bss           0x0000000000001018        0x0 banner.o
- *(.rela*)
- .rela.text     0x0000000000001018        0x0 boot.o
- .rela.text.startup
-                0x0000000000001018        0x0 boot.o
+.data           0x0000000000001000      0x88c
+ *(.sbss)
+ .sbss          0x0000000000001000        0x4 io.o
+                0x0000000000001000                threads
+ .sbss          0x0000000000001004        0x4 stdio.o
  *(.rodata*)
  .rodata.str1.4
-                0x0000000000001018       0x71 io.o
- *fill*         0x0000000000001089        0x3 
- .rodata        0x000000000000108c       0x40 stdio.o
+                0x0000000000001008       0x71 io.o
+ *fill*         0x0000000000001079        0x3 
  .rodata.str1.4
-                0x00000000000010cc       0x19 stdio.o
- *fill*         0x00000000000010e5        0x3 
+                0x000000000000107c       0x19 stdio.o
+ *fill*         0x0000000000001095        0x3 
+ .rodata        0x0000000000001098       0x40 stdio.o
  .rodata.str1.4
-                0x00000000000010e8      0x363 main.o
+                0x00000000000010d8      0x363 main.o
                                         0x367 (size before relaxing)
- *fill*         0x000000000000144b        0x1 
+ *fill*         0x000000000000143b        0x1 
  .rodata.str1.4
-                0x000000000000144c      0x110 banner.o
-                                        0x10d (size before relaxing)
- *(.sbss)
- .sbss          0x000000000000155c        0x4 io.o
-                0x000000000000155c                threads
- .sbss          0x0000000000001560        0x4 stdio.o
-
-.sdata          0x0000000000001564        0xc
- .sdata         0x0000000000001564        0xc main.o
-                0x0000000000001564                opts
-                0x0000000000001566                port
-                0x0000000000001568                ip
-                0x000000000000156c                test
-
-.io             0x0000000080000000       0x10
- io.o(COMMON)
- COMMON         0x0000000080000000       0x10 io.o
-                0x0000000080000000                io
+                0x000000000000143c      0x438 banner.o
+ *(.data)
+ .data          0x0000000000001874       0x18 io.o
+                0x0000000000001874                board_name
+ .data          0x000000000000188c        0x0 boot.o
+ .data          0x000000000000188c        0x0 stdio.o
+ .data          0x000000000000188c        0x0 main.o
+ .data          0x000000000000188c        0x0 banner.o
+ *(.bss)
+ .bss           0x000000000000188c        0x0 io.o
+ .bss           0x000000000000188c        0x0 boot.o
+ .bss           0x000000000000188c        0x0 stdio.o
+ .bss           0x000000000000188c        0x0 main.o
+ .bss           0x000000000000188c        0x0 banner.o
+ *(.rela*)
+ .rela.text     0x000000000000188c        0x0 io.o
+ .rela.text.startup
+                0x000000000000188c        0x0 io.o
+ *(COMMON)
 LOAD boot.o
 LOAD stdio.o
 LOAD main.o
@@ -112,10 +105,30 @@ LOAD io.o
 LOAD banner.o
 OUTPUT(darksocv.o elf32-littleriscv)
 
-.comment        0x0000000000000000       0x29
- .comment       0x0000000000000000       0x29 boot.o
-                                         0x2a (size before relaxing)
- .comment       0x0000000000000029       0x2a io.o
- .comment       0x0000000000000029       0x2a stdio.o
- .comment       0x0000000000000029       0x2a main.o
- .comment       0x0000000000000029       0x2a banner.o
+.sdata          0x000000000000188c        0xc
+ .sdata         0x000000000000188c        0xc main.o
+                0x000000000000188c                opts
+                0x000000000000188e                port
+                0x0000000000001890                ip
+                0x0000000000001894                test
+
+.comment        0x0000000000000000       0x11
+ .comment       0x0000000000000000       0x11 io.o
+                                         0x12 (size before relaxing)
+ .comment       0x0000000000000011       0x12 boot.o
+ .comment       0x0000000000000011       0x12 stdio.o
+ .comment       0x0000000000000011       0x12 main.o
+ .comment       0x0000000000000011       0x12 banner.o
+
+.riscv.attributes
+                0x0000000000000000       0x1c
+ .riscv.attributes
+                0x0000000000000000       0x1c io.o
+ .riscv.attributes
+                0x000000000000001c       0x1c boot.o
+ .riscv.attributes
+                0x0000000000000038       0x1c stdio.o
+ .riscv.attributes
+                0x0000000000000054       0x1c main.o
+ .riscv.attributes
+                0x0000000000000070       0x1c banner.o
diff --git a/src/darksocv.o b/src/darksocv.o
index b3012bb..d4466a4 100755
Binary files a/src/darksocv.o and b/src/darksocv.o differ
diff --git a/src/darksocv.ram b/src/darksocv.ram
index 948d65d..c3f87a7 100644
--- a/src/darksocv.ram
+++ b/src/darksocv.ram
@@ -1,9 +1,17 @@
-00001018
-00001028
-00001048
-00001064
-00001078
 00000000
+00000000
+65746d71
+73206863
+74726170
+20376e61
+00353173
+696c6978
+6120786e
+31303763
+74726120
+372d7869
+30326120
+00000030
 756d6973
 6974616c
 6f206e6f
@@ -16,22 +24,28 @@
 6e617472
 6c20362d
 00003978
-696c6978
-6120786e
-31303763
-74726120
-372d7869
-30326120
-00000030
 65746d71
 73206863
 6d617264
 31786c20
 00000036
 6e6b6e75
-206e776f
-74736f68
-36387820
+006e776f
+746f6f62
+74203a30
+40747865
+64206425
+40617461
+73206425
+6b636174
+0a642540
+00000000
+4c554e28
+0000294c
+33323130
+37363534
+62613938
+66656463
 00000000
 3b9aca00
 05f5e100
@@ -49,13 +63,6 @@
 00000100
 00000001
 00000000
-4c554e28
-0000294c
-33323130
-37363534
-62613938
-66656463
-00000000
 00544d2b
 43414d2b
 00000000
@@ -64,14 +71,14 @@
 69282073
 64253d64
 00000a29
-2c6e7553
-20383120
-20677541
-39313032
-3a313220
-343a3531
-302d2034
-00303033
+2c6e6f4d
+20303220
+20727041
+30323032
+3a373120
+343a3632
+302b2034
+00303031
 6c697562
 64203a64
 726b7261
@@ -81,7 +88,7 @@
 73252064
 0000000a
 32337672
-00000065
+00000069
 65726f63
 64203a30
 726b7261
@@ -110,50 +117,6 @@
 72656d69
 2964253d
 0000000a
-69646e65
-742d6e61
-20747365
-74696c28
-2d656c74
-69646e65
-3a296e61
-00000000
-703a7069
-3d74726f
-252e6425
-64252e64
-3a64252e
-000a6425
-61746164
-6665722e
-203d2020
-25207825
-78252078
-20782520
-7825203d
-0000000a
-61746164
-2070692e
-203d2020
-25207825
-78252078
-20782520
-7825203d
-0000000a
-61746164
-726f702e
-203d2074
-25207825
-203d2078
-252f7825
-00000a64
-61746164
-74706f2e
-203d2073
-25207825
-203d2078
-25207825
-00000a78
 636c6557
 20656d6f
 44206f74
@@ -166,14 +129,17 @@
 00000072
 1b485b1b
 004a325b
-6f727461
-00000073
-21776f77
-6c656820
-61206f6c
-736f7274
-2f6f2021
-00000000
+6f626572
+0000746f
+65726f63
+72203a30
+6f6f6265
+6e692074
+73203320
+6e6f6365
+00007364
+656e6f64
+0000002e
 706d7564
 00000000
 203a7825
@@ -181,34 +147,42 @@
 00207825
 00006472
 00007277
-0064656c
-2064656c
-7825203d
-0000000a
-656d6974
-00000072
-656d6974
-203d2072
-000a6425
-6f697067
+65747373
+00007473
+6e75720a
+676e696e
+20737320
+65737361
+796c626d
+73657420
+000a7374
+6c6c6163
+00000000
+6365720a
+7265766f
+6f772079
+64656b72
+000a0a21
+625f6874
+646e756f
+00000073
+68747373
+73617020
+0a646573
+00000000
+625f7473
+646e756f
+00000073
+73206e6f
+00003a74
+0000646c
+2073730a
+65737361
+796c626d
+73657420
+64207374
+0a656e6f
 00000000
-6f697067
-25203d20
-00000a78
-006c756d
-206c756d
-6425203d
-0000000a
-00766964
-20766964
-6425203d
-6f6d202c
-203d2064
-000a6425
-0063616d
-2063616d
-6425203d
-0000000a
 6d6d6f63
 3a646e61
 73255b20
@@ -341,8 +315,4 @@
 01520146
 020a0245
 00000000
-00000000
-00000000
-0c38abcd
-ac100001
-12345678
+00000001
diff --git a/src/darksocv.rom b/src/darksocv.rom
index 43138e9..40afc6d 100644
--- a/src/darksocv.rom
+++ b/src/darksocv.rom
@@ -1,39 +1,84 @@
-000017b7
+0000002b
+00001737
+4f472783
 ff010113
+00912223
+00178693
+800004b7
+4ed72a23
 00812423
-55c7a403
 00112623
-00140713
-00147413
-03040513
-54e7ae23
-06c000ef
-800007b7
-00078793
-00041e63
-03100713
-00e12023
-00100713
-00e7a623
-760000ef
-ffdff06f
-00012703
-00e7a623
-0087d703
-00174713
-00e79423
-00a7d703
-00174713
-00e79523
-000781a3
+0017f793
+00048713
+f8000693
+00f12023
+00d701a3
+00001437
+02079863
+03000513
+0f8000ef
+08d000ef
+00001537
+01010693
+00040613
+00000593
+08450513
+354000ef
+0ed000ef
+fe1ff06f
+03100513
+0cc000ef
+00048493
+f8000713
+00042783
+00178693
+0147d793
+0017c793
+00d42023
+0017f793
+00f49423
+00e481a3
+fe1ff06f
+0000002b
+02050a63
+00100793
+02f50c63
+00200793
+02f50e63
+00300793
+04f50063
+00400793
+04f50263
+00001537
+07c50513
+00000057
+00008067
+00001537
+03850513
+ff1ff06f
+00001537
+04850513
 fe5ff06f
+00001537
+01c50513
+fd9ff06f
+00001537
+06850513
+fcdff06f
+00001537
+00850513
+fc1ff06f
+0000002b
 800007b7
 00078793
 0047c703
 00277713
 fe070ce3
 0057c503
+0ff57513
+00000057
 00008067
+0000002b
 800007b7
 00a00713
 00078793
@@ -47,9 +92,11 @@ fe071ce3
 00177713
 fe071ce3
 0ff57713
-00e782a3
 00070513
+00e782a3
+00000057
 00008067
+0000002b
 fe810113
 00812823
 00912623
@@ -60,28 +107,29 @@ fff58713
 02070063
 00b12223
 00e12023
-f7dff0ef
+f65ff0ef
 00a00693
 00012703
 00412583
-02d51863
+02d51a63
 00a00513
-f81ff0ef
+f75ff0ef
 00040023
 00941463
 00000493
-01412083
 01012403
+01412083
 00048513
 00c12483
 01810113
+00000057
 00008067
 00b12423
 00e12223
 00d00693
 00a12023
-fcd502e3
-f45ff0ef
+fcd500e3
+f35ff0ef
 00012783
 00800693
 00412703
@@ -92,60 +140,65 @@ fe040fa3
 00058713
 fff40413
 00070593
-f71ff06f
+f6dff06f
 00f40023
 00140413
 ff1ff06f
-ff410113
-00812223
-00112423
+0000002b
+ff810113
+00812023
+00112223
 00050413
 00051663
 00001437
-0cc40413
+0a840413
 00044503
-00051a63
-00812083
-00412403
-00c10113
+00051c63
+00012403
+00412083
+00810113
+00000057
 00008067
 00140413
-ed1ff0ef
-fe1ff06f
-ff410113
-00112423
-fb9ff0ef
-00812083
+eb9ff0ef
+fddff06f
+0000002b
+ffc10113
+00112023
+fadff0ef
+00012083
 00a00513
-00c10113
-eb1ff06f
+00410113
+e95ff06f
+0000002b
 fac10113
 00b12023
 000015b7
 04812623
 04912423
 02c00613
-08c58493
+0c458493
 00050413
-08c58593
+0c458593
 01c10513
 04112823
-210000ef
+224000ef
 01400613
 02c48593
 00810513
-200000ef
+214000ef
 00012703
 00810793
 00070463
 01c10793
 01800493
 0007a583
-00059c63
-05012083
+00059e63
 04c12403
+05012083
 04812483
 05410113
+00000057
 00008067
 00100713
 00e58463
@@ -153,38 +206,37 @@ fac10113
 00012683
 00001737
 00f12223
-0d470713
+0b070713
 02068c63
 00040513
-414000ef
+450000ef
 00a00593
-414000ef
+454000ef
 000017b7
-0d478713
-00a70533
-00054503
-dfdff0ef
+0b078713
+00a70733
+00074503
+dd9ff0ef
 00412783
 ff848493
 00478793
-f95ff06f
+f91ff06f
 00448693
 00d456b3
 00f6f693
 00d706b3
 0006c503
-dd5ff0ef
+db1ff0ef
 00945533
-000017b7
 00f57513
-0d478713
-00a70733
-00074503
 fbdff06f
+0000002b
 00000593
-f05ff06f
+f09ff06f
+0000002b
 00100593
 efdff06f
+0000002b
 fdc10113
 02f12023
 01010793
@@ -198,11 +250,12 @@ fdc10113
 00e12e23
 00f12023
 00044503
-00051c63
-00c12083
+00051e63
 00812403
+00c12083
 00412483
 02410113
+00000057
 00008067
 02500793
 00140493
@@ -214,16 +267,16 @@ fdc10113
 0007a503
 00478713
 00e12023
-e29ff0ef
+e15ff0ef
 00148413
-fb5ff06f
+fb1ff06f
 07800793
 00f51e63
 00012783
 0007a503
 00478713
 00e12023
-f59ff0ef
+f49ff0ef
 fddff06f
 06400793
 00f51e63
@@ -231,13 +284,14 @@ fddff06f
 0007a503
 00478713
 00e12023
-f41ff0ef
+f35ff0ef
 fbdff06f
-ce5ff0ef
+cc1ff0ef
 fb5ff06f
-cddff0ef
+cb9ff0ef
 00040493
 fa9ff06f
+0000002b
 fff60613
 00000793
 00f50733
@@ -250,131 +304,143 @@ fff60613
 00178793
 fee680e3
 40e68533
+00000057
 00008067
+0000002b
 fff00613
-fc9ff06f
-00000793
-00f50733
+fbdff06f
+0000002b
+00050793
+00000513
+00a78733
 00074703
-00070863
-00178793
-00f50733
-fe0716e3
-00078513
+00071663
+00000057
 00008067
+00150513
+fe9ff06f
+0000002b
 00000793
-00c79463
+00c79663
+00000057
 00008067
 00f58733
 00074683
 00f50733
 00178793
 00d70023
-fe5ff06f
+fe1ff06f
+0000002b
 00c50633
 00050793
-00c79463
+00c79663
+00000057
 00008067
 00178793
 feb78fa3
-ff1ff06f
+fedff06f
+0000002b
 fec10113
 00812623
 00050413
 00058513
-00912423
+00b12023
 00112823
-00058493
-f81ff0ef
-00050693
+00912423
+f69ff0ef
+00012583
+00050613
 00041863
 000017b7
-5607a403
-04040863
-00040793
-0007c703
-00071863
-000017b7
-5607a023
-0380006f
-00068613
-00078513
-00048593
-00d12223
-00f12023
-f01ff0ef
-00012783
-00412683
-00178713
-02051463
-00078023
+0047a403
+04040463
+00040493
+0004c783
+00079863
 000017b7
-56e7a023
+0007a223
+0300006f
+00048513
+00c12223
+00b12023
+ee1ff0ef
+00012583
+00412603
+00148793
+02051663
+00001737
+00048023
+00f72223
 00040513
-01012083
 00c12403
+01012083
 00812483
 01410113
+00000057
 00008067
-00070793
-f9dff06f
-00000693
-00000793
-02d00613
-00051c63
-02069e63
-00078513
+00078493
+fa1ff06f
+0000002b
+00050693
+00000613
+00000513
+02d00593
+00069c63
+02061e63
+00000057
 00008067
-00100693
+00100613
 0240006f
-00054703
-fe0704e3
-fec708e3
-00379593
-fd070713
-00b70733
-00179793
-00f707b3
-00150513
+0006c783
+fe0784e3
+feb788e3
+fd078793
+00351713
+00e78733
+00151793
+00f70533
+00168693
 fc5ff06f
-40f007b3
+40a00533
 fc5ff06f
-00050693
-03900613
+0000002b
+00050713
+03900693
 00000513
-00068663
-0006c783
-00079463
+00070663
+00074783
+00079663
+00000057
 00008067
-00451713
-00f66a63
+00451513
+00f6ea63
 fd078793
-00e78533
-00168693
-fddff06f
+00a78533
+00170713
+fd9ff06f
 05f7f793
 fc978793
 fedff06f
+0000002b
 00c5857f
+00000057
 00008067
+0000002b
 00050793
+00b57663
+00058793
+00050593
 00000513
-02b7e063
-02059263
-00008067
-0017f713
-00070463
-00b50533
-0017d793
-00159593
-fe0796e3
+00059663
+00000057
 00008067
 0015f713
 00070463
 00f50533
 00179793
 0015d593
-fc9ff06f
+fe1ff06f
+0000002b
 ff410113
 00912023
 00112423
@@ -387,272 +453,257 @@ ff410113
 0005d663
 40b005b3
 00100413
-f89ff0ef
-00050793
+f91ff0ef
 00848463
-40a007b3
-00812083
+40a00533
 00412403
+00812083
 00012483
-00078513
 00c10113
+00000057
 00008067
-00100793
-00059a63
+0000002b
+00050793
+00100713
 00058513
+00059a63
+00000057
 00008067
-00179793
-00159593
-fea5ece3
-00058713
-00000593
-00050463
-00079863
+00171713
+00151513
+fef56ce3
+00050693
+00000513
+00078463
+00071863
 fc061ee3
-00050593
+00078513
 fd5ff06f
-00e56663
-40e50533
-00f585b3
-0017d793
+00d7e663
+40d787b3
+00e50533
 00175713
+0016d693
 fd9ff06f
+0000002b
 00100613
-fadff06f
+f9dff06f
+0000002b
 00000613
-fa5ff06f
-06058e63
+f91ff06f
+08058263
+0000002b
 ff010113
 00812423
-00112623
 00912223
-00060793
-00000413
+00112623
+00060413
+00000493
 00055663
 40a00533
-00100413
-00000493
+00100493
+00000793
 0005d663
 40b005b3
-00100493
-00078613
+00100793
+00040613
 00f12023
-f61ff0ef
-00012783
+f49ff0ef
 00050593
-02078263
-00940463
+02040663
+00012783
+00f48463
 40a005b3
-00c12083
 00812403
+00c12083
 00412483
 00058513
 01010113
+00000057
 00008067
-fe0404e3
+fe0482e3
 40a005b3
-fe1ff06f
+fddff06f
 00058513
 00008067
+0000002b
 00100613
-f79ff06f
+f6dff06f
+0000002b
 00000613
-f71ff06f
+f61ff06f
+0000002b
+000017b7
+4f47a703
+00100793
+00e7de63
+fff00713
+000017b7
+fff50513
+02e51c63
+00000057
+00008067
+800007b7
+fff00693
+00078793
+f8000613
+fff50513
+fed502e3
+00c781a3
+0037c703
+0ff77713
+fe070ce3
+fe9ff06f
+0007a683
+0007a603
+fed60ee3
+fb9ff06f
+0000002b
+0000002b
+0002c0b7
+00000057
+00000057
+00008067
+0000002b
 ee010113
 000015b7
 10d00613
-44c58593
+3e458593
 00410513
 10112e23
 10812c23
 10912a23
-cd1ff0ef
+c09ff0ef
 00a00513
-939ff0ef
+83dff0ef
 00410413
 00044783
-00079c63
-11c12083
+00079e63
 11812403
+11c12083
 11412483
 12010113
+00000057
 00008067
+00144483
 00240413
-fff44483
 fff48493
 fff00713
-fce48ae3
+fce488e3
 00078513
 00f12023
-8f9ff0ef
+ff8ff0ef
 00012783
 fe5ff06f
-f7810113
-08112223
-08812023
-06912e23
+0000002b
+f7c10113
+06812e23
 80000437
-f79ff0ef
-00044783
-00001737
-00070713
-00279793
-00e787b3
-00044603
-0007a583
+08112023
+06912c23
+00040493
+0004c503
+00040413
+0ff57513
+f28ff0ef
+0004c603
+00050593
 00001537
-0f450513
-b0dff0ef
+0ff67613
+11050513
+a25ff0ef
 000015b7
 00001537
-10858593
-12850513
-af9ff0ef
-00040793
-0017c483
-0027c303
-000017b7
-55c7a683
-00040613
-00100713
-00c12023
-0ff4f493
-0ff37313
-00078413
-26d74063
+12458593
+14450513
+a11ff0ef
+0014c803
+0024c883
+000014b7
+4f44a703
+00100793
+0ff87813
+0ff8f893
+18e7c463
 00001737
-55870713
+4f070713
 01000613
 01000593
 3e800513
 00e12423
-00612223
-d51ff0ef
+01112223
+01012023
+cb1ff0ef
 4e800793
-00412303
+00012803
+00412883
 00812703
-22f50e63
+14f50e63
 000017b7
-55878793
+4f078793
 000016b7
 00001537
-00030613
-14868693
-00048593
-15050513
-a75ff0ef
-00012783
+00088613
+00080593
+16468693
+16c50513
+995ff0ef
+4e04aa23
+00645583
 00001537
-17850513
-0067d583
-54042e23
-a5dff0ef
-00012783
+19450513
+01059593
+0105d593
+979ff0ef
+00144503
+00244483
+00c42783
+00c42603
 000f45b7
 24058593
-0017c503
-0027c783
-0ff7f413
-00012783
-00c7a483
-00c7a603
-00c12223
-d29ff0ef
-00541793
-408787b3
-00279793
-008787b3
-00379793
-00f50533
-00148593
-db1ff0ef
-00412603
+0ff57513
+00c12023
+00f12223
+c81ff0ef
+0ff4f493
+000025b7
+00050413
+71058593
+00048513
+c69ff0ef
+00412783
+00a40533
+00178593
+d0dff0ef
+00012603
 00050593
 00001537
-19450513
-9fdff0ef
+1b050513
+915ff0ef
 00a00513
-f98ff0ef
-00001537
-1c050513
-8c5ff0ef
-000017b7
-5687a403
-000017b7
-5667d783
-00845493
-01045313
-0ff47293
-0ff37313
-01845393
-0ff4f493
-00001537
-00038713
-00030693
-00028593
-00048613
-1e050513
-00712823
-00612623
-00512423
-00f12223
-995ff0ef
-123457b7
-00001537
-67878793
-01200713
-03400693
-05600613
-07800593
-1f850513
-971ff0ef
-01012383
-00c12303
-00812283
-00001537
-00038713
-00030693
-00028593
-00040793
-00048613
-21850513
-945ff0ef
-00412703
-00001537
-23850513
-00070693
-00875613
-0ff77593
-929ff0ef
+e94ff0ef
 00001537
-00b00713
-00a00693
-00b00613
-00a00593
-25450513
-90dff0ef
+1dc50513
+fd8ff0ef
 00a00513
-ea8ff0ef
-00001537
-27050513
-fd4ff0ef
+d99ff0ef
 000017b7
-28878513
+1f478513
 8edff0ef
 04000613
 00000593
-03c10513
-a35ff0ef
+03810513
+a55ff0ef
 04000593
-03c10513
-eb4ff0ef
+03810513
+ea0ff0ef
 00000413
-03c10513
+03810513
 000014b7
-28c48593
-a31ff0ef
+1f848593
+a59ff0ef
 00241793
-07c10713
+07810713
 00f707b3
 faa7a023
 00050a63
@@ -660,56 +711,52 @@ faa7a023
 00800793
 00000513
 fcf41ce3
-01c12403
+01812403
 f8040ee3
 000015b7
-29058593
+1fc58593
 00040513
-989ff0ef
+999ff0ef
 02051663
 00001537
-29850513
+20450513
 871ff0ef
 f79ff06f
 00001737
-0e870713
-da5ff06f
+10470713
+e7dff06f
 000017b7
-0ec78793
-dc9ff06f
+10878793
+ea9ff06f
 000015b7
-2a058593
+20c58593
 00040513
-94dff0ef
-00051a63
-c81ff0ef
-00001537
-2a850513
-f39ff06f
+95dff0ef
+3e050a63
 000015b7
-2c058593
+23858593
 00040513
-929ff0ef
+949ff0ef
 0a051863
-02012403
+01c12403
 00040863
 00040513
-a75ff0ef
+ab9ff0ef
 00050413
 10040793
-00f12223
+00f12023
 000014b7
 00040593
-2c848513
-ff0ff0ef
+24048513
+801ff0ef
 00000713
 00001637
 00e406b3
 0006c583
-2d060513
-00e12423
-fd4ff0ef
-00812703
+24860513
+00e12223
+fe4ff0ef
+00412703
 01000693
 00001637
 00170713
@@ -722,269 +769,245 @@ fe050693
 0ff6f693
 00d67463
 02e00513
-00e12423
-d3cff0ef
-00812703
+00e12223
+d30ff0ef
+00412703
 01000693
 00170713
 fcd718e3
 00a00513
-d24ff0ef
-00412783
+d18ff0ef
+00012783
 01040413
-f6f41ee3
-e7dff06f
+f6879ee3
+e8dff06f
 000015b7
 00200613
-2d458593
+24c58593
 00040513
-831ff0ef
+849ff0ef
 00050e63
 000015b7
 00200613
-2d858593
+25058593
 00040513
-819ff0ef
+831ff0ef
 1e051663
 00244703
 06d00793
 06f71263
-02012503
-995ff0ef
-00a12a23
+01c12503
+9d9ff0ef
+00a12823
 00200793
 00300713
-00e12823
-00178713
 00e12623
+00178713
+00e12423
 00279793
-07c10713
+07810713
 00f707b3
 fa07a503
 00000493
-965ff0ef
-00a12223
+9a9ff0ef
+00a12023
 00050593
 00001537
-2c850513
-ee8ff0ef
-01412783
+24050513
+ef8ff0ef
+01012783
 02979263
 00a00513
-c7cff0ef
-de1ff06f
+c70ff0ef
+df1ff06f
 00100713
-00e12a23
+00e12823
 00100793
 00200713
 fa5ff06f
-01012783
+00c12783
 00044703
 00f407b3
-00f12423
+00f12223
 07200793
 08f71663
-00812783
+00412783
 0007c703
 06200793
 00f71e63
-00412783
+00012783
 009787b3
 0007c583
 000017b7
-2d078513
-e80ff0ef
-00812783
+24878513
+e90ff0ef
+00412783
 0007c703
 07700793
 02f71063
-00412703
+00012703
 00149793
 00e787b3
 00079583
 000017b7
-2d078513
-e54ff0ef
-00812783
+24878513
+e64ff0ef
+00412783
 0007c703
 06c00793
 02f71063
-00412703
+00012703
 00249793
 00e787b3
 0007a583
 000017b7
-2d078513
-e28ff0ef
+24878513
+e38ff0ef
 00148493
 f3dff06f
-00c12783
-07c10713
+00812783
+07810713
 00178793
-00f12c23
-00c12783
+00f12a23
+00812783
 00279793
 00f707b3
 fa07a503
-865ff0ef
-00812703
+8a9ff0ef
+00412703
 00050793
 00074683
 06200713
 02e69463
-00412703
+00012703
 000017b7
 0ff57593
 00970733
 00a70023
-00a12623
-2d078513
-dc8ff0ef
-00c12783
-00812703
+00a12423
+24878513
+dd8ff0ef
+00812783
+00412703
 00074683
 07700713
 02e69863
 01079593
-00f12623
-00412783
+00f12423
+00012783
 00149713
 4105d593
 00f70733
 000017b7
-2d078513
+24878513
 00b71023
-d8cff0ef
-00c12783
-00812703
-01812603
+d9cff0ef
+00812783
+00412703
+01412603
 00074683
-00c12623
+00c12423
 06c00713
 f4e696e3
-00412683
+00012683
 00249713
 00078593
 00d70733
 00f72023
 f29ff06f
 000015b7
-2dc58593
+25458593
 00040513
-e50ff0ef
-02051c63
-02012503
-00050c63
-fa0ff0ef
-00012783
-01051513
-01055513
-00a79423
-00012783
+e70ff0ef
+0e051663
 00001537
-2e050513
-0087d583
-d14ff0ef
-c1dff06f
+25c50513
+bd8ff0ef
+01c12403
 000015b7
-2ec58593
+27858593
 00040513
-e08ff0ef
-02051663
-02012503
-00050863
-f04ff0ef
-00012783
-00a7a623
-00012783
+e4cff0ef
+02051263
+a35ff0ef
 00001537
-2f450513
-00c7a583
-fc1ff06f
-000015b7
-30058593
-00040513
-dccff0ef
-02051a63
-02012503
-00050c63
-f1cff0ef
-00012783
-01051513
-01055513
-00a79523
-00012783
+28050513
+bb0ff0ef
 00001537
-30850513
-00a7d583
-f7dff06f
+2c850513
+ba4ff0ef
+c1dff06f
 000015b7
-31458593
+29458593
 00040513
-d88ff0ef
-02051a63
-02012503
-e88ff0ef
-00050413
-02412503
-e7cff0ef
-00050593
-00040513
-f54ff0ef
-00050593
+e18ff0ef
+00051a63
+0000207b
 00001537
-31850513
-f39ff06f
+2a050513
+fcdff06f
 000015b7
-32458593
+2b058593
 00040513
-d44ff0ef
-04051863
-02012503
-e44ff0ef
-00050413
-02412503
-e38ff0ef
+df4ff0ef
 00050493
-00050593
-00040513
-851ff0ef
-00a12223
-00048593
-00040513
-839ff0ef
-00412603
-00050593
-00001537
-32850513
-bf0ff0ef
-af9ff06f
+02051a63
+00001437
+0000002b
+2bc40513
+b54ff0ef
+00048513
+cb0ff0ef
+00a00513
+b44ff0ef
+00148493
+10100793
+fcf49ee3
+f89ff06f
 000015b7
-33c58593
+25858593
 00040513
-ce4ff0ef
-04051663
-02012503
-de4ff0ef
-00050413
-02412503
-dd8ff0ef
-00050493
-02812503
-dccff0ef
-01051613
-01049593
-4105d593
-41065613
+dacff0ef
+00051663
+0000002b
+f6dff06f
+000015b7
+2c458593
 00040513
-e48ff0ef
-00050593
-00001537
-34050513
-e7dff06f
+d90ff0ef
+f4051ce3
+00000057
+f51ff06f
 00044783
-a8078ae3
+b60788e3
 00001537
 00040593
-34c50513
-e65ff06f
+2e450513
+c54ff0ef
+b5dff06f
+00001537
+21450513
+c44ff0ef
+000f4437
+24040513
+8d9ff0ef
+02e00513
+9b8ff0ef
+24040513
+8c9ff0ef
+02e00513
+9a8ff0ef
+24040513
+8b9ff0ef
+02e00513
+998ff0ef
+00001537
+23050513
+adcff0ef
+07c12403
+08012083
+07812483
+00000513
+08410113
+00000057
+00008067
diff --git a/src/darksocv.text b/src/darksocv.text
index 94e4afb..b591cf6 100755
Binary files a/src/darksocv.text and b/src/darksocv.text differ
diff --git a/src/io.o b/src/io.o
index 6762f4d..779bef0 100644
Binary files a/src/io.o and b/src/io.o differ
diff --git a/src/io.s b/src/io.s
index 80423a2..32da494 100644
--- a/src/io.s
+++ b/src/io.s
@@ -1,7 +1,26 @@
 	.file	"io.c"
 	.option nopic
+	.attribute arch, "rv32i2p0"
+	.attribute unaligned_access, 0
+	.attribute stack_align, 4
 	.text
 	.globl	board_name
+	.section	.rodata.str1.4,"aMS",@progbits,1
+	.align	2
+.LC0:
+	.string	"simulation only"
+	.align	2
+.LC1:
+	.string	"avnet microboard spartan-6 lx9"
+	.align	2
+.LC2:
+	.string	"xilinx ac701 artix-7 a200"
+	.align	2
+.LC3:
+	.string	"qmtech sdram lx16"
+	.align	2
+.LC4:
+	.string	"unknown host x86"
 	.globl	threads
 	.comm	io,16,4
 	.data
@@ -15,25 +34,10 @@ board_name:
 	.word	.LC3
 	.word	.LC4
 	.word	0
-	.section	.rodata.str1.4,"aMS",@progbits,1
-	.align	2
-.LC0:
-	.string	"simulation only"
-.LC1:
-	.string	"avnet microboard spartan-6 lx9"
-	.zero	1
-.LC2:
-	.string	"xilinx ac701 artix-7 a200"
-	.zero	2
-.LC3:
-	.string	"qmtech sdram lx16"
-	.zero	2
-.LC4:
-	.string	"unknown host x86"
 	.section	.sbss,"aw",@nobits
 	.align	2
 	.type	threads, @object
 	.size	threads, 4
 threads:
 	.zero	4
-	.ident	"GCC: (GNU) 9.0.0 20180818 (experimental)"
+	.ident	"GCC: (GNU) 9.2.0"
diff --git a/src/main.c b/src/main.c
index 66f12d0..81396e1 100644
--- a/src/main.c
+++ b/src/main.c
@@ -31,6 +31,8 @@
 #include <io.h>
 #include <stdio.h>
 
+#define newlib_fixed
+
 extern void banner(void);
 
 unsigned int   test = 0x12345678;
@@ -38,92 +40,81 @@ unsigned int   ip   = 0xAC100001; // 172.16.0.1
 unsigned short port = 0x0c38;     // 3128
 unsigned short opts = 0xABCD;
 
+int test_call(void)
+{
+	asm volatile("ssst");
+	// ra should be recovered when it fails authentication
+	asm volatile("lui ra,44");
+	asm volatile("ssld");
+}
+
 int main(void)
 {
-    banner();
 
-    // startup
+	#ifdef newlib_fixed
+   //  banner();
 
-    printf("board: %s (id=%d)\n",board_name[io.board_id],io.board_id);
-    printf("build: darkriscv fw build %s\n",BUILD);
+    // startup
 
+   //printf("board: %s (id=%d)\n",board_name(io.board_id),io.board_id);
+   //printf("build: darkriscv fw build %s\n",BUILD);
+/*
     printf("core0: darkriscv@%d.%dMHz with %s%s%s\n",
         io.board_cm,                        // board clock MHz
         io.board_ck,                        // board clock kHz
         ARCH,                               // architecture
         threads>1?"+MT":"",                 //  MT support
         mac(1000,16,16)==1256?"+MAC":"");   // MAC support
+*/
 
     threads = 0; // prepare for the next restart
 
-    printf("uart0: 115200 bps (div=%d)\n",io.uart.baud);
+   // printf("uart0: 115200 bps (div=%d)\n",io.uart.baud);
     printf("timr0: periodic timer=%dHz (io.timer=%d)\n",(io.board_cm*1000000u+io.board_ck*1000u)/(io.timer+1),io.timer);
     printf("\n");
 
-#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
-    printf("endian-test (big-endian):\n");
-#else
-    printf("endian-test (little-endian):\n");
-#endif
-
-
-    struct
-    {
-        unsigned int   ref;
-        unsigned int   ip;
-        unsigned short port;
-        unsigned char  opt_a;
-        unsigned char  opt_b;
-    } 
-    data;
-
-    data.ref  = 0x12345678;
-    data.ip   = ip;
-    data.port = port;
-    data.opt_a = 0xA;
-    data.opt_b = 0xB;
-
-    unsigned char *p = (unsigned char *)&data;
-
-    printf("ip:port=%d.%d.%d.%d:%d\n",p[4],p[5],p[6],p[7],data.port);
-
-    printf("data.ref  = %x %x %x %x = %x\n",p[0],p[1],p[2],p[3],data.ref);
-    printf("data.ip   = %x %x %x %x = %x\n",p[4],p[5],p[6],p[7],data.ip);
-    printf("data.port = %x %x = %x/%d\n",p[8],p[9], data.port, data.port);
-    printf("data.opts = %x %x = %x %x\n",p[10],p[11],data.opt_a,data.opt_b);
-
-    printf("\n");
-
     printf("Welcome to DarkRISCV!\n");
 
+	#else
+		char* str = "\nDarkRiscv!!\n\n";
+		putstr(str);
+	#endif
+
     // main loop
 
     while(1)
     {
         char  buffer[64];
 
-        printf("> ");
+		#ifdef newlib_fix
+		printf("> ");
+		#else
+			putstr("> ");
+		#endif
+
         memset(buffer,0,sizeof(buffer));
         gets(buffer,sizeof(buffer));
         
         char *argv[8];
         int   argc;
 
-        for(argc=0;argc<8 && (argv[argc]=strtok(argc==0?buffer:NULL," "));argc++)
-            //printf("argv[%d] = [%s]\n",argc,argv[argc]);
-            ;
-
+		//#ifdef newlib_fix
+        //for(argc=0;argc<8 && (argv[argc]=strtok(argc==0?buffer:NULL," "));argc++)
+        //    printf("argv[%d] = [%s]\n",argc,argv[argc]);
+        //    ;
+		//#endif
+		
         if(argv[0])
         {
           if(!strcmp(argv[0],"clear"))
           {
-              printf("\33[H\33[2J");
+              putstr("\33[H\33[2J");
           }
           else
           if(!strcmp(argv[0],"atros"))
           {
               banner();
-              printf("wow! hello atros! o/\n");
+              putstr("wow! hello atros! o/\n");
           }
           else
           if(!strcmp(argv[0],"dump"))
@@ -134,9 +125,9 @@ int main(void)
               
               for(i=0;i!=16;i++)
               {
-                  printf("%x: ",(unsigned) p);
+				 // printf("%x: ",(unsigned) p);
               
-                  for(j=0;j!=16;j++) printf("%x ",p[j]);
+			     // for(j=0;j!=16;j++) printf("%x ",p[j]);
                   for(j=0;j!=16;j++) putchar((p[j]>=32&&p[j]<127)?p[j]:'.');
 
                   putchar('\n');
@@ -156,46 +147,46 @@ int main(void)
                   kp++;
               }
           
-              printf("%x: ",k=xtoi(argv[vp++]));
+             // printf("%x: ",k=xtoi(argv[vp++]));
               
               for(j=0;i--;j++)
               {
                   if(argv[0][0]=='r')
                   {
-                      if(argv[0][kp]=='b') printf("%x ",j[(char  *)k]);
-                      if(argv[0][kp]=='w') printf("%x ",j[(short *)k]);
-                      if(argv[0][kp]=='l') printf("%x ",j[(int   *)k]);
+                  //      if(argv[0][kp]=='b') printf("%x ",j[(char  *)k]);
+                  //      if(argv[0][kp]=='w') printf("%x ",j[(short *)k]);
+                  //       if(argv[0][kp]=='l') printf("%x ",j[(int   *)k]);
                   }
                   else
                   {
                       w = xtoi(argv[vp++]);
-                      if(argv[0][kp]=='b') printf("%x ",j[(char  *)k]=w);
-                      if(argv[0][kp]=='w') printf("%x ",j[(short *)k]=w);
-                      if(argv[0][kp]=='l') printf("%x ",j[(int   *)k]=w);
+                   // if(argv[0][kp]=='b') printf("%x ",j[(char  *)k]=w);
+                   // if(argv[0][kp]=='w') printf("%x ",j[(short *)k]=w);
+                   // if(argv[0][kp]=='l') printf("%x ",j[(int   *)k]=w);
                   }
               }
-              printf("\n");
+            //  printf("\n");
           }
           else
           if(!strcmp(argv[0],"led"))
           {
               if(argv[1]) io.led = xtoi(argv[1]);
               
-              printf("led = %x\n",io.led);
+           //  printf("led = %x\n",io.led);
           }
           else
           if(!strcmp(argv[0],"timer"))
           {
               if(argv[1]) io.timer = atoi(argv[1]);
               
-              printf("timer = %d\n",io.timer);
+             // printf("timer = %d\n",io.timer);
           }
           else
           if(!strcmp(argv[0],"gpio"))
           {
               if(argv[1]) io.gpio = xtoi(argv[1]);
 
-              printf("gpio = %x\n",io.gpio);
+            //  printf("gpio = %x\n",io.gpio);
           }
           else
           if(!strcmp(argv[0],"mul"))
@@ -203,7 +194,7 @@ int main(void)
               int x = atoi(argv[1]);
               int y = atoi(argv[2]);
               
-              printf("mul = %d\n",x*y);
+            //  printf("mul = %d\n",x*y);
           }
           else
           if(!strcmp(argv[0],"div"))
@@ -211,7 +202,7 @@ int main(void)
               int x = atoi(argv[1]);
               int y = atoi(argv[2]);
 
-              printf("div = %d, mod = %d\n",x/y,x%y);
+            //  printf("div = %d, mod = %d\n",x/y,x%y);
           }
           else
           if(!strcmp(argv[0],"mac"))
@@ -220,16 +211,95 @@ int main(void)
               int x = atoi(argv[2]);
               int y = atoi(argv[3]);
 
-              printf("mac = %d\n",mac(acc,x,y));
+           //   printf("mac = %d\n",mac(acc,x,y));
           }
+
           else
+		  if(!strcmp(argv[0],"sstest"))
+          {
+			putstr("\nrunning ss assembly tests\n");
+			int d = 0;
+			for(int i=0; i<10000; i++)d=d*i;
+/*
+			if(!strcmp(argv[1],"1"))
+			{
+				asm volatile("ssst");
+				// function execution would be here
+				asm volatile("ssld");
+			}
+
+			else if(!strcmp(argv[1],"2"))
+			{
+				asm volatile("lui ra,33");
+				asm volatile("ssst");
+
+				// function execution would be here
+				asm volatile("lui ra,22");
+				asm volatile("ssst");
+
+				// function execution would be here
+				asm volatile("ssld");
+
+				asm volatile("lui ra,33");
+				asm volatile("ssld");
+			}
+
+			else if(!strcmp(argv[1],"3"))
+			{
+				asm volatile("lui ra,33");
+				asm volatile("ssst");
+
+				// function execution would be here
+				asm volatile("lui ra,44");
+				asm volatile("ssld");
+			}
+*/
+
+			if(!strcmp(argv[1],"call"))
+			{
+				test_call();
+				putstr("\nrecovery worked!\n\n");
+			}
+
+			else if(!strcmp(argv[1],"th_bounds"))
+			{
+				asm volatile("ssth 2");
+				putstr("ssth passed\n");				
+			}
+
+			else if(!strcmp(argv[1],"st_bounds"))
+			{
+				char value[10];
+
+				for(int i = 0; i < 257; i++)
+				{
+					asm volatile("ssst");
+					putstr("on st:");
+					putstr(itoa(i, value,10));
+					putstr('\n');
+				}
+			}
+			else if(!strcmp(argv[1],"st"))
+			{
+				asm volatile("ssst");
+			}
+
+			else if(!strcmp(argv[1],"ld"))
+			{
+				asm volatile("ssld");
+			}
+
+			putstr("\nss assembly tests done\n"); 
+          }      
+   
+		  else
           if(argv[0][0])
           {
-              printf("command: [%s] not found.\n"
-                     "valid commands: clear, dump <hex>, led <hex>, timer <dec>, gpio <hex>\n"
-                     "                mul <dec> <dec>, div <dec> <dec>, mac <dec> <dec> <dec>\n"
-                     "                rd[m][bwl] <hex> [<hex> when m], wr[m][bwl] <hex> <hex> [<hex> when m]\n",
-                     argv[0]);
+         //    printf("command: [%s] not found.\n"
+         //             "valid commands: clear, dump <hex>, led <hex>, timer <dec>, gpio <hex>\n"
+         //             "                mul <dec> <dec>, div <dec> <dec>, mac <dec> <dec> <dec>\n"
+         //             "                rd[m][bwl] <hex> [<hex> when m], wr[m][bwl] <hex> <hex> [<hex> when m]\n",
+         //             argv[0]);
           }
        }
     }
diff --git a/src/main.o b/src/main.o
index bb6eac0..510579f 100644
Binary files a/src/main.o and b/src/main.o differ
diff --git a/src/main.s b/src/main.s
index d262dd4..ffc4c26 100644
--- a/src/main.s
+++ b/src/main.s
@@ -1,29 +1,160 @@
 	.file	"main.c"
 	.option nopic
+	.attribute arch, "rv32i2p0"
+	.attribute unaligned_access, 0
+	.attribute stack_align, 4
 	.text
+	.section	.rodata.str1.4,"aMS",@progbits,1
+	.align	2
+.LC0:
+	.string	"+MT"
+	.align	2
+.LC1:
+	.string	""
+	.align	2
+.LC2:
+	.string	"+MAC"
+	.align	2
+.LC3:
+	.string	"board: %s (id=%d)\n"
+	.align	2
+.LC4:
+	.string	"Mon, 20 Apr 2020 12:43:23 +0100"
+	.align	2
+.LC5:
+	.string	"build: darkriscv fw build %s\n"
+	.align	2
+.LC6:
+	.string	"rv32i"
+	.align	2
+.LC7:
+	.string	"core0: darkriscv@%d.%dMHz with %s%s%s\n"
+	.align	2
+.LC8:
+	.string	"uart0: 115200 bps (div=%d)\n"
 	.globl	__mulsi3
 	.globl	__udivsi3
+	.align	2
+.LC9:
+	.string	"timr0: periodic timer=%dHz (io.timer=%d)\n"
+	.align	2
+.LC10:
+	.string	"endian-test (little-endian):"
+	.align	2
+.LC11:
+	.string	"ip:port=%d.%d.%d.%d:%d\n"
+	.align	2
+.LC12:
+	.string	"data.ref  = %x %x %x %x = %x\n"
+	.align	2
+.LC13:
+	.string	"data.ip   = %x %x %x %x = %x\n"
+	.align	2
+.LC14:
+	.string	"data.port = %x %x = %x/%d\n"
+	.align	2
+.LC15:
+	.string	"data.opts = %x %x = %x %x\n"
+	.align	2
+.LC16:
+	.string	"Welcome to DarkRISCV!"
+	.align	2
+.LC17:
+	.string	"> "
+	.align	2
+.LC18:
+	.string	" "
+	.align	2
+.LC19:
+	.string	"clear"
+	.align	2
+.LC20:
+	.string	"\033[H\033[2J"
+	.align	2
+.LC21:
+	.string	"atros"
+	.align	2
+.LC22:
+	.string	"wow! hello atros! o/"
+	.align	2
+.LC23:
+	.string	"dump"
+	.align	2
+.LC24:
+	.string	"%x: "
+	.align	2
+.LC25:
+	.string	"%x "
+	.align	2
+.LC26:
+	.string	"rd"
+	.align	2
+.LC27:
+	.string	"wr"
+	.align	2
+.LC28:
+	.string	"led"
+	.align	2
+.LC29:
+	.string	"led = %x\n"
+	.align	2
+.LC30:
+	.string	"timer"
+	.align	2
+.LC31:
+	.string	"timer = %d\n"
+	.align	2
+.LC32:
+	.string	"gpio"
+	.align	2
+.LC33:
+	.string	"gpio = %x\n"
+	.align	2
+.LC34:
+	.string	"mul"
+	.align	2
+.LC35:
+	.string	"mul = %d\n"
+	.align	2
+.LC36:
+	.string	"div"
 	.globl	__modsi3
 	.globl	__divsi3
+	.align	2
+.LC37:
+	.string	"div = %d, mod = %d\n"
+	.align	2
+.LC38:
+	.string	"mac"
+	.align	2
+.LC39:
+	.string	"mac = %d\n"
+	.align	2
+.LC40:
+	.string	"command: [%s] not found.\nvalid commands: clear, dump <hex>, led <hex>, timer <dec>, gpio <hex>\n                mul <dec> <dec>, div <dec> <dec>, mac <dec> <dec> <dec>\n                rd[m][bwl] <hex> [<hex> when m], wr[m][bwl] <hex> <hex> [<hex> when m]\n"
 	.section	.text.startup,"ax",@progbits
 	.align	2
 	.globl	main
 	.type	main, @function
 main:
+	ssst
 	addi	sp,sp,-136
+	sw	s1,124(sp)
+	lui	s1,%hi(io)
 	sw	ra,132(sp)
 	sw	s0,128(sp)
-	sw	s1,124(sp)
-	lui	s0,%hi(io)
 	call	banner
-	lbu	a5,%lo(io)(s0)
-	lui	a4,%hi(board_name)
-	addi	a4,a4,%lo(board_name)
-	slli	a5,a5,2
+	addi	s0,s1,%lo(io)
+	lbu	a4,0(s0)
+	lui	a5,%hi(board_name)
+	addi	a5,a5,%lo(board_name)
+	andi	a4,a4,0xff
+	slli	a4,a4,2
 	add	a5,a5,a4
-	lbu	a2,%lo(io)(s0)
+	lbu	a2,0(s0)
 	lw	a1,0(a5)
 	lui	a0,%hi(.LC3)
+	andi	a2,a2,0xff
 	addi	a0,a0,%lo(.LC3)
 	call	printf
 	lui	a1,%hi(.LC4)
@@ -31,18 +162,15 @@ main:
 	addi	a1,a1,%lo(.LC4)
 	addi	a0,a0,%lo(.LC5)
 	call	printf
-	addi	a5,s0,%lo(io)
-	lbu	s1,1(a5)
-	lbu	t1,2(a5)
-	lui	a5,%hi(threads)
-	lw	a3,%lo(threads)(a5)
-	addi	a2,s0,%lo(io)
-	li	a4,1
-	sw	a2,0(sp)
-	andi	s1,s1,0xff
-	andi	t1,t1,0xff
-	mv	s0,a5
-	bgt	a3,a4,.L39
+	lbu	a6,1(s0)
+	lbu	a7,2(s0)
+	lui	s0,%hi(threads)
+	lw	a4,%lo(threads)(s0)
+	li	a5,1
+	andi	a6,a6,0xff
+	andi	a7,a7,0xff
+	addi	s1,s1,%lo(io)
+	bgt	a4,a5,.L39
 	lui	a4,%hi(.LC1)
 	addi	a4,a4,%lo(.LC1)
 .L2:
@@ -50,10 +178,12 @@ main:
 	li	a1,16
 	li	a0,1000
 	sw	a4,8(sp)
-	sw	t1,4(sp)
+	sw	a7,4(sp)
+	sw	a6,0(sp)
 	call	mac
 	li	a5,1256
-	lw	t1,4(sp)
+	lw	a6,0(sp)
+	lw	a7,4(sp)
 	lw	a4,8(sp)
 	beq	a0,a5,.L40
 	lui	a5,%hi(.LC1)
@@ -61,37 +191,39 @@ main:
 .L3:
 	lui	a3,%hi(.LC6)
 	lui	a0,%hi(.LC7)
-	mv	a2,t1
+	mv	a2,a7
+	mv	a1,a6
 	addi	a3,a3,%lo(.LC6)
-	mv	a1,s1
 	addi	a0,a0,%lo(.LC7)
 	call	printf
-	lw	a5,0(sp)
+	lhu	a1,6(s1)
 	lui	a0,%hi(.LC8)
 	addi	a0,a0,%lo(.LC8)
-	lhu	a1,6(a5)
+	slli	a1,a1,16
+	srli	a1,a1,16
 	sw	zero,%lo(threads)(s0)
 	call	printf
-	lw	a5,0(sp)
+	lbu	a0,1(s1)
+	lbu	a5,2(s1)
+	lw	a4,12(s1)
+	lw	a2,12(s1)
 	li	a1,999424
 	addi	a1,a1,576
-	lbu	a0,1(a5)
-	lbu	a5,2(a5)
+	andi	a0,a0,0xff
 	andi	s0,a5,0xff
-	lw	a5,0(sp)
-	lw	s1,12(a5)
-	lw	a2,12(a5)
-	sw	a2,4(sp)
+	sw	a2,0(sp)
+	sw	a4,4(sp)
 	call	__mulsi3
 	slli	a5,s0,5
 	sub	a5,a5,s0
+	lw	a4,4(sp)
 	slli	a5,a5,2
 	add	a5,a5,s0
 	slli	a5,a5,3
+	addi	a1,a4,1
 	add	a0,a0,a5
-	addi	a1,s1,1
 	call	__udivsi3
-	lw	a2,4(sp)
+	lw	a2,0(sp)
 	mv	a1,a0
 	lui	a0,%hi(.LC9)
 	addi	a0,a0,%lo(.LC9)
@@ -104,23 +236,25 @@ main:
 	lui	a5,%hi(ip)
 	lw	s0,%lo(ip)(a5)
 	lui	a5,%hi(port)
-	lhu	a5,%lo(port)(a5)
-	srli	s1,s0,8
-	srli	t1,s0,16
-	andi	t0,s0,255
-	andi	t1,t1,0xff
-	srli	t2,s0,24
-	andi	s1,s1,0xff
+	lhu	t1,%lo(port)(a5)
+	srli	a6,s0,8
+	srli	a7,s0,16
+	andi	t3,s0,255
+	andi	a6,a6,0xff
+	andi	a7,a7,0xff
+	srli	t4,s0,24
 	lui	a0,%hi(.LC11)
-	mv	a4,t2
-	mv	a3,t1
-	mv	a1,t0
-	mv	a2,s1
+	mv	a5,t1
+	mv	a4,t4
+	mv	a3,a7
+	mv	a2,a6
+	mv	a1,t3
 	addi	a0,a0,%lo(.LC11)
-	sw	t2,16(sp)
-	sw	t1,12(sp)
-	sw	t0,8(sp)
-	sw	a5,4(sp)
+	sw	t1,16(sp)
+	sw	t4,12(sp)
+	sw	a7,8(sp)
+	sw	a6,4(sp)
+	sw	t3,0(sp)
 	call	printf
 	li	a5,305418240
 	lui	a0,%hi(.LC12)
@@ -131,23 +265,25 @@ main:
 	li	a1,120
 	addi	a0,a0,%lo(.LC12)
 	call	printf
-	lw	t2,16(sp)
-	lw	t1,12(sp)
-	lw	t0,8(sp)
+	lw	t4,12(sp)
+	lw	a7,8(sp)
+	lw	a6,4(sp)
+	lw	t3,0(sp)
 	lui	a0,%hi(.LC13)
-	mv	a4,t2
-	mv	a3,t1
-	mv	a1,t0
+	mv	a4,t4
+	mv	a3,a7
+	mv	a2,a6
+	mv	a1,t3
 	mv	a5,s0
-	mv	a2,s1
 	addi	a0,a0,%lo(.LC13)
 	call	printf
-	lw	a4,4(sp)
+	lw	t1,16(sp)
 	lui	a0,%hi(.LC14)
 	addi	a0,a0,%lo(.LC14)
-	mv	a3,a4
-	srli	a2,a4,8
-	andi	a1,a4,0xff
+	mv	a4,t1
+	mv	a3,t1
+	srli	a2,t1,8
+	andi	a1,t1,0xff
 	call	printf
 	lui	a0,%hi(.LC15)
 	li	a4,11
@@ -160,7 +296,7 @@ main:
 	call	putchar
 	lui	a0,%hi(.LC16)
 	addi	a0,a0,%lo(.LC16)
-.L66:
+.L67:
 	call	puts
 .L38:
 	lui	a5,%hi(.LC17)
@@ -175,27 +311,28 @@ main:
 	call	gets
 	li	s0,0
 	addi	a0,sp,60
-	lui	s1,%hi(.LC18)
+	lui	a4,%hi(.LC18)
 .L4:
-	addi	a1,s1,%lo(.LC18)
+	addi	a1,a4,%lo(.LC18)
 	call	strtok
-	slli	a5,s0,2
 	addi	a4,sp,124
+	slli	a5,s0,2
 	add	a5,a4,a5
 	sw	a0,-96(a5)
-	beqz	a0,.L5
+	lui	a4,%hi(.LC18)
+	beq	a0,zero,.L5
 	addi	s0,s0,1
 	li	a5,8
 	li	a0,0
 	bne	s0,a5,.L4
 .L5:
 	lw	s0,28(sp)
-	beqz	s0,.L38
+	beq	s0,zero,.L38
 	lui	a1,%hi(.LC19)
 	addi	a1,a1,%lo(.LC19)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L9
+	bne	a0,zero,.L9
 	lui	a0,%hi(.LC20)
 	addi	a0,a0,%lo(.LC20)
 	call	printf
@@ -213,29 +350,29 @@ main:
 	addi	a1,a1,%lo(.LC21)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L10
+	bne	a0,zero,.L10
 	call	banner
 	lui	a0,%hi(.LC22)
 	addi	a0,a0,%lo(.LC22)
-	j	.L66
+	j	.L67
 .L10:
 	lui	a1,%hi(.LC23)
 	addi	a1,a1,%lo(.LC23)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L11
+	bne	a0,zero,.L11
 	lw	s0,32(sp)
-	beqz	s0,.L12
+	beq	s0,zero,.L12
 	mv	a0,s0
 	call	xtoi
 	mv	s0,a0
 .L12:
 	addi	a5,s0,256
-	sw	a5,4(sp)
-	lui	s1,%hi(.LC24)
+	sw	a5,0(sp)
 .L16:
+	lui	a5,%hi(.LC24)
 	mv	a1,s0
-	addi	a0,s1,%lo(.LC24)
+	addi	a0,a5,%lo(.LC24)
 	call	printf
 	li	a4,0
 	lui	a2,%hi(.LC25)
@@ -243,9 +380,9 @@ main:
 	add	a3,s0,a4
 	lbu	a1,0(a3)
 	addi	a0,a2,%lo(.LC25)
-	sw	a4,8(sp)
+	sw	a4,4(sp)
 	call	printf
-	lw	a4,8(sp)
+	lw	a4,4(sp)
 	li	a3,16
 	lui	a2,%hi(.LC25)
 	addi	a4,a4,1
@@ -260,17 +397,17 @@ main:
 	bleu	a3,a2,.L14
 	li	a0,46
 .L14:
-	sw	a4,8(sp)
+	sw	a4,4(sp)
 	call	putchar
-	lw	a4,8(sp)
+	lw	a4,4(sp)
 	li	a3,16
 	addi	a4,a4,1
 	bne	a4,a3,.L15
 	li	a0,10
 	call	putchar
-	lw	a5,4(sp)
+	lw	a5,0(sp)
 	addi	s0,s0,16
-	bne	s0,a5,.L16
+	bne	a5,s0,.L16
 	j	.L38
 .L11:
 	lui	a1,%hi(.LC26)
@@ -278,23 +415,23 @@ main:
 	addi	a1,a1,%lo(.LC26)
 	mv	a0,s0
 	call	strncmp
-	beqz	a0,.L18
+	beq	a0,zero,.L18
 	lui	a1,%hi(.LC27)
 	li	a2,2
 	addi	a1,a1,%lo(.LC27)
 	mv	a0,s0
 	call	strncmp
-	bnez	a0,.L19
+	bne	a0,zero,.L19
 .L18:
 	lbu	a4,2(s0)
 	li	a5,109
-	bne	a4,a5,.L41
+	bne	a4,a5,.L42
 	lw	a0,32(sp)
 	call	xtoi
 	sw	a0,20(sp)
 	li	a5,2
 	li	a4,3
-.L67:
+.L68:
 	sw	a4,16(sp)
 	addi	a4,a5,1
 	sw	a4,12(sp)
@@ -302,25 +439,26 @@ main:
 	addi	a4,sp,124
 	add	a5,a4,a5
 	lw	a0,-96(a5)
-	li	s1,0
 	call	xtoi
 	sw	a0,4(sp)
 	mv	a1,a0
 	lui	a0,%hi(.LC24)
 	addi	a0,a0,%lo(.LC24)
 	call	printf
+	sw	zero,0(sp)
 .L21:
 	lw	a5,20(sp)
-	bne	a5,s1,.L28
+	lw	a4,0(sp)
+	bne	a5,a4,.L28
 	li	a0,10
 	call	putchar
 	j	.L38
-.L41:
+.L42:
 	li	a4,1
 	sw	a4,20(sp)
 	li	a5,1
 	li	a4,2
-	j	.L67
+	j	.L68
 .L28:
 	lw	a5,16(sp)
 	lbu	a4,0(s0)
@@ -333,7 +471,8 @@ main:
 	li	a5,98
 	bne	a4,a5,.L23
 	lw	a5,4(sp)
-	add	a5,a5,s1
+	lw	a4,0(sp)
+	add	a5,a5,a4
 	lbu	a1,0(a5)
 	lui	a5,%hi(.LC25)
 	addi	a0,a5,%lo(.LC25)
@@ -343,8 +482,9 @@ main:
 	lbu	a4,0(a5)
 	li	a5,119
 	bne	a4,a5,.L24
+	lw	a5,0(sp)
 	lw	a4,4(sp)
-	slli	a5,s1,1
+	slli	a5,a5,1
 	add	a5,a5,a4
 	lh	a1,0(a5)
 	lui	a5,%hi(.LC25)
@@ -355,16 +495,19 @@ main:
 	lbu	a4,0(a5)
 	li	a5,108
 	bne	a4,a5,.L25
+	lw	a5,0(sp)
 	lw	a4,4(sp)
-	slli	a5,s1,2
+	slli	a5,a5,2
 	add	a5,a5,a4
 	lw	a1,0(a5)
-.L68:
+.L69:
 	lui	a5,%hi(.LC25)
 	addi	a0,a5,%lo(.LC25)
 	call	printf
 .L25:
-	addi	s1,s1,1
+	lw	a5,0(sp)
+	addi	a5,a5,1
+	sw	a5,0(sp)
 	j	.L21
 .L22:
 	lw	a5,12(sp)
@@ -382,9 +525,10 @@ main:
 	li	a4,98
 	bne	a3,a4,.L26
 	lw	a4,4(sp)
+	lw	a3,0(sp)
 	lui	a5,%hi(.LC25)
 	andi	a1,a0,0xff
-	add	a4,a4,s1
+	add	a4,a4,a3
 	sb	a0,0(a4)
 	sw	a0,12(sp)
 	addi	a0,a5,%lo(.LC25)
@@ -397,9 +541,10 @@ main:
 	bne	a3,a4,.L27
 	slli	a1,a5,16
 	sw	a5,12(sp)
-	lw	a5,4(sp)
-	slli	a4,s1,1
+	lw	a5,0(sp)
 	srai	a1,a1,16
+	slli	a4,a5,1
+	lw	a5,4(sp)
 	add	a4,a4,a5
 	lui	a5,%hi(.LC25)
 	addi	a0,a5,%lo(.LC25)
@@ -413,31 +558,32 @@ main:
 	sw	a2,12(sp)
 	li	a4,108
 	bne	a3,a4,.L25
+	lw	a4,0(sp)
 	lw	a3,4(sp)
-	slli	a4,s1,2
 	mv	a1,a5
+	slli	a4,a4,2
 	add	a4,a4,a3
 	sw	a5,0(a4)
-	j	.L68
+	j	.L69
 .L19:
 	lui	a1,%hi(.LC28)
 	addi	a1,a1,%lo(.LC28)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L29
+	bne	a0,zero,.L29
 	lw	a0,32(sp)
-	beqz	a0,.L30
+	beq	a0,zero,.L30
 	call	xtoi
-	lw	a5,0(sp)
 	slli	a0,a0,16
 	srli	a0,a0,16
-	sh	a0,8(a5)
+	sh	a0,8(s1)
 .L30:
-	lw	a5,0(sp)
+	lhu	a1,8(s1)
 	lui	a0,%hi(.LC29)
 	addi	a0,a0,%lo(.LC29)
-	lhu	a1,8(a5)
-.L65:
+	slli	a1,a1,16
+	srli	a1,a1,16
+.L66:
 	call	printf
 	j	.L38
 .L29:
@@ -445,43 +591,41 @@ main:
 	addi	a1,a1,%lo(.LC30)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L31
+	bne	a0,zero,.L31
 	lw	a0,32(sp)
-	beqz	a0,.L32
+	beq	a0,zero,.L32
 	call	atoi
-	lw	a5,0(sp)
-	sw	a0,12(a5)
+	sw	a0,12(s1)
 .L32:
-	lw	a5,0(sp)
 	lui	a0,%hi(.LC31)
+	lw	a1,12(s1)
 	addi	a0,a0,%lo(.LC31)
-	lw	a1,12(a5)
-	j	.L65
+	j	.L66
 .L31:
 	lui	a1,%hi(.LC32)
 	addi	a1,a1,%lo(.LC32)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L33
+	bne	a0,zero,.L33
 	lw	a0,32(sp)
-	beqz	a0,.L34
+	beq	a0,zero,.L34
 	call	xtoi
-	lw	a5,0(sp)
 	slli	a0,a0,16
 	srli	a0,a0,16
-	sh	a0,10(a5)
+	sh	a0,10(s1)
 .L34:
-	lw	a5,0(sp)
+	lhu	a1,10(s1)
 	lui	a0,%hi(.LC33)
 	addi	a0,a0,%lo(.LC33)
-	lhu	a1,10(a5)
-	j	.L65
+	slli	a1,a1,16
+	srli	a1,a1,16
+	j	.L66
 .L33:
 	lui	a1,%hi(.LC34)
 	addi	a1,a1,%lo(.LC34)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L35
+	bne	a0,zero,.L35
 	lw	a0,32(sp)
 	call	atoi
 	mv	s0,a0
@@ -493,27 +637,27 @@ main:
 	mv	a1,a0
 	lui	a0,%hi(.LC35)
 	addi	a0,a0,%lo(.LC35)
-	j	.L65
+	j	.L66
 .L35:
 	lui	a1,%hi(.LC36)
 	addi	a1,a1,%lo(.LC36)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L36
+	bne	a0,zero,.L36
 	lw	a0,32(sp)
 	call	atoi
 	mv	s0,a0
 	lw	a0,36(sp)
 	call	atoi
-	mv	s1,a0
 	mv	a1,a0
+	sw	a0,4(sp)
 	mv	a0,s0
 	call	__modsi3
-	sw	a0,4(sp)
-	mv	a1,s1
+	lw	a1,4(sp)
+	sw	a0,0(sp)
 	mv	a0,s0
 	call	__divsi3
-	lw	a2,4(sp)
+	lw	a2,0(sp)
 	mv	a1,a0
 	lui	a0,%hi(.LC37)
 	addi	a0,a0,%lo(.LC37)
@@ -524,149 +668,38 @@ main:
 	addi	a1,a1,%lo(.LC38)
 	mv	a0,s0
 	call	strcmp
-	bnez	a0,.L37
+	bne	a0,zero,.L37
 	lw	a0,32(sp)
 	call	atoi
 	mv	s0,a0
 	lw	a0,36(sp)
 	call	atoi
-	mv	s1,a0
+	sw	a0,0(sp)
 	lw	a0,40(sp)
 	call	atoi
+	lw	a1,0(sp)
 	slli	a2,a0,16
-	slli	a1,s1,16
-	srai	a1,a1,16
 	srai	a2,a2,16
+	slli	a1,a1,16
+	srai	a1,a1,16
 	mv	a0,s0
 	call	mac
 	mv	a1,a0
 	lui	a0,%hi(.LC39)
 	addi	a0,a0,%lo(.LC39)
-	j	.L65
+	j	.L66
 .L37:
 	lbu	a5,0(s0)
-	beqz	a5,.L38
+	beq	a5,zero,.L38
 	lui	a0,%hi(.LC40)
 	mv	a1,s0
 	addi	a0,a0,%lo(.LC40)
-	j	.L65
+	j	.L66
 	.size	main, .-main
 	.globl	opts
 	.globl	port
 	.globl	ip
 	.globl	test
-	.section	.rodata.str1.4,"aMS",@progbits,1
-	.align	2
-.LC0:
-	.string	"+MT"
-.LC1:
-	.string	""
-	.zero	3
-.LC2:
-	.string	"+MAC"
-	.zero	3
-.LC3:
-	.string	"board: %s (id=%d)\n"
-	.zero	1
-.LC4:
-	.string	"Sun, 18 Aug 2019 21:15:44 -0300"
-.LC5:
-	.string	"build: darkriscv fw build %s\n"
-	.zero	2
-.LC6:
-	.string	"rv32e"
-	.zero	2
-.LC7:
-	.string	"core0: darkriscv@%d.%dMHz with %s%s%s\n"
-	.zero	1
-.LC8:
-	.string	"uart0: 115200 bps (div=%d)\n"
-.LC9:
-	.string	"timr0: periodic timer=%dHz (io.timer=%d)\n"
-	.zero	2
-.LC10:
-	.string	"endian-test (little-endian):"
-	.zero	3
-.LC11:
-	.string	"ip:port=%d.%d.%d.%d:%d\n"
-.LC12:
-	.string	"data.ref  = %x %x %x %x = %x\n"
-	.zero	2
-.LC13:
-	.string	"data.ip   = %x %x %x %x = %x\n"
-	.zero	2
-.LC14:
-	.string	"data.port = %x %x = %x/%d\n"
-	.zero	1
-.LC15:
-	.string	"data.opts = %x %x = %x %x\n"
-	.zero	1
-.LC16:
-	.string	"Welcome to DarkRISCV!"
-	.zero	2
-.LC17:
-	.string	"> "
-	.zero	1
-.LC18:
-	.string	" "
-	.zero	2
-.LC19:
-	.string	"clear"
-	.zero	2
-.LC20:
-	.string	"\033[H\033[2J"
-.LC21:
-	.string	"atros"
-	.zero	2
-.LC22:
-	.string	"wow! hello atros! o/"
-	.zero	3
-.LC23:
-	.string	"dump"
-	.zero	3
-.LC24:
-	.string	"%x: "
-	.zero	3
-.LC25:
-	.string	"%x "
-.LC26:
-	.string	"rd"
-	.zero	1
-.LC27:
-	.string	"wr"
-	.zero	1
-.LC28:
-	.string	"led"
-.LC29:
-	.string	"led = %x\n"
-	.zero	2
-.LC30:
-	.string	"timer"
-	.zero	2
-.LC31:
-	.string	"timer = %d\n"
-.LC32:
-	.string	"gpio"
-	.zero	3
-.LC33:
-	.string	"gpio = %x\n"
-	.zero	1
-.LC34:
-	.string	"mul"
-.LC35:
-	.string	"mul = %d\n"
-	.zero	2
-.LC36:
-	.string	"div"
-.LC37:
-	.string	"div = %d, mod = %d\n"
-.LC38:
-	.string	"mac"
-.LC39:
-	.string	"mac = %d\n"
-	.zero	2
-.LC40:
-	.string	"command: [%s] not found.\nvalid commands: clear, dump <hex>, led <hex>, timer <dec>, gpio <hex>\n                mul <dec> <dec>, div <dec> <dec>, mac <dec> <dec> <dec>\n                rd[m][bwl] <hex> [<hex> when m], wr[m][bwl] <hex> <hex> [<hex> when m]\n"
 	.section	.sdata,"aw"
 	.align	2
 	.type	opts, @object
@@ -685,4 +718,4 @@ ip:
 	.size	test, 4
 test:
 	.word	305419896
-	.ident	"GCC: (GNU) 9.0.0 20180818 (experimental)"
+	.ident	"GCC: (GNU) 9.2.0"
diff --git a/src/stdio.o b/src/stdio.o
index e4b3f6d..9cb8418 100644
Binary files a/src/stdio.o and b/src/stdio.o differ
diff --git a/src/stdio.s b/src/stdio.s
index bba9d34..ed2a4ba 100644
--- a/src/stdio.s
+++ b/src/stdio.s
@@ -1,140 +1,164 @@
 	.file	"stdio.c"
 	.option nopic
+	.attribute arch, "rv32i2p0"
+	.attribute unaligned_access, 0
+	.attribute stack_align, 4
 	.text
 	.align	2
 	.globl	getchar
 	.type	getchar, @function
 getchar:
+	ssst
 	lui	a5,%hi(io)
 	addi	a5,a5,%lo(io)
 .L2:
 	lbu	a4,4(a5)
 	andi	a4,a4,2
-	beqz	a4,.L2
+	beq	a4,zero,.L2
 	lbu	a0,5(a5)
+	andi	a0,a0,0xff
+	ssld
 	ret
 	.size	getchar, .-getchar
 	.align	2
 	.globl	putchar
 	.type	putchar, @function
 putchar:
+	ssst
 	lui	a5,%hi(io)
 	li	a4,10
 	addi	a5,a5,%lo(io)
-	bne	a0,a4,.L8
-.L7:
+	bne	a0,a4,.L9
+.L8:
 	lbu	a4,4(a5)
 	andi	a4,a4,1
-	bnez	a4,.L7
+	bne	a4,zero,.L8
 	li	a4,13
 	sb	a4,5(a5)
-.L8:
+.L9:
 	lbu	a4,4(a5)
 	andi	a4,a4,1
-	bnez	a4,.L8
+	bne	a4,zero,.L9
 	andi	a4,a0,0xff
-	sb	a4,5(a5)
 	mv	a0,a4
+	sb	a4,5(a5)
+	ssld
 	ret
 	.size	putchar, .-putchar
 	.align	2
 	.globl	gets
 	.type	gets, @function
 gets:
+	ssst
 	addi	sp,sp,-24
 	sw	s0,16(sp)
 	sw	s1,12(sp)
 	sw	ra,20(sp)
 	mv	s1,a0
 	mv	s0,a0
-.L12:
+.L14:
 	addi	a4,a1,-1
-	beqz	a4,.L16
+	beq	a4,zero,.L18
 	sw	a1,4(sp)
 	sw	a4,0(sp)
 	call	getchar
 	li	a3,10
 	lw	a4,0(sp)
 	lw	a1,4(sp)
-	bne	a0,a3,.L13
-.L16:
+	bne	a0,a3,.L15
+.L18:
 	li	a0,10
 	call	putchar
 	sb	zero,0(s0)
-	bne	s0,s1,.L14
+	bne	s0,s1,.L16
 	li	s1,0
-.L14:
-	lw	ra,20(sp)
+.L16:
 	lw	s0,16(sp)
+	lw	ra,20(sp)
 	mv	a0,s1
 	lw	s1,12(sp)
 	addi	sp,sp,24
+	ssld
 	jr	ra
-.L13:
+.L15:
 	sw	a1,8(sp)
 	sw	a4,4(sp)
 	li	a3,13
 	sw	a0,0(sp)
-	beq	a0,a3,.L16
+	beq	a0,a3,.L18
 	call	putchar
 	lw	a5,0(sp)
 	li	a3,8
 	lw	a4,4(sp)
 	lw	a1,8(sp)
-	bne	a5,a3,.L17
-	beq	s0,s1,.L18
+	bne	a5,a3,.L19
+	beq	s0,s1,.L20
 	sb	zero,-1(s0)
 	mv	a4,a1
 	addi	s0,s0,-1
-.L18:
+.L20:
 	mv	a1,a4
-	j	.L12
-.L17:
+	j	.L14
+.L19:
 	sb	a5,0(s0)
 	addi	s0,s0,1
-	j	.L18
+	j	.L20
 	.size	gets, .-gets
+	.section	.rodata.str1.4,"aMS",@progbits,1
+	.align	2
+.LC2:
+	.string	"(NULL)"
+	.text
 	.align	2
 	.globl	putstr
 	.type	putstr, @function
 putstr:
-	addi	sp,sp,-12
-	sw	s0,4(sp)
-	sw	ra,8(sp)
+	ssst
+	addi	sp,sp,-8
+	sw	s0,0(sp)
+	sw	ra,4(sp)
 	mv	s0,a0
-	bnez	a0,.L24
+	bne	a0,zero,.L26
 	lui	s0,%hi(.LC2)
 	addi	s0,s0,%lo(.LC2)
-.L24:
+.L26:
 	lbu	a0,0(s0)
-	bnez	a0,.L26
-	lw	ra,8(sp)
-	lw	s0,4(sp)
-	addi	sp,sp,12
+	bne	a0,zero,.L28
+	lw	s0,0(sp)
+	lw	ra,4(sp)
+	addi	sp,sp,8
+	ssld
 	jr	ra
-.L26:
+.L28:
 	addi	s0,s0,1
 	call	putchar
-	j	.L24
+	j	.L26
 	.size	putstr, .-putstr
 	.align	2
 	.globl	puts
 	.type	puts, @function
 puts:
-	addi	sp,sp,-12
-	sw	ra,8(sp)
+	ssst
+	addi	sp,sp,-4
+	sw	ra,0(sp)
 	call	putstr
-	lw	ra,8(sp)
+	lw	ra,0(sp)
 	li	a0,10
-	addi	sp,sp,12
+	addi	sp,sp,4
 	tail	putchar
 	.size	puts, .-puts
+	.section	.rodata.str1.4
+	.align	2
+.LC3:
+	.string	"0123456789abcdef"
 	.globl	__udivsi3
 	.globl	__umodsi3
+	.text
 	.align	2
 	.globl	putdx
 	.type	putdx, @function
 putdx:
+	ssst
 	addi	sp,sp,-84
 	sw	a1,0(sp)
 	lui	a1,%hi(.LANCHOR0)
@@ -153,44 +177,45 @@ putdx:
 	call	memcpy
 	lw	a4,0(sp)
 	addi	a5,sp,8
-	beqz	a4,.L32
+	beq	a4,zero,.L34
 	addi	a5,sp,28
-.L32:
+.L34:
 	li	s1,24
-.L33:
+.L35:
 	lw	a1,0(a5)
-	bnez	a1,.L37
-	lw	ra,80(sp)
+	bne	a1,zero,.L39
 	lw	s0,76(sp)
+	lw	ra,80(sp)
 	lw	s1,72(sp)
 	addi	sp,sp,84
+	ssld
 	jr	ra
-.L37:
+.L39:
 	li	a4,1
-	beq	a1,a4,.L34
-	bgtu	a1,s0,.L35
-.L34:
+	beq	a1,a4,.L36
+	bgtu	a1,s0,.L37
+.L36:
 	lw	a3,0(sp)
 	lui	a4,%hi(.LC3)
 	sw	a5,4(sp)
 	addi	a4,a4,%lo(.LC3)
-	beqz	a3,.L36
+	beq	a3,zero,.L38
 	mv	a0,s0
 	call	__udivsi3
 	li	a1,10
 	call	__umodsi3
+.L43:
 	lui	a5,%hi(.LC3)
 	addi	a4,a5,%lo(.LC3)
-	add	a0,a4,a0
-	lbu	a0,0(a0)
-.L41:
+	add	a4,a4,a0
+	lbu	a0,0(a4)
 	call	putchar
 	lw	a5,4(sp)
-.L35:
+.L37:
 	addi	s1,s1,-8
 	addi	a5,a5,4
-	j	.L33
-.L36:
+	j	.L35
+.L38:
 	addi	a3,s1,4
 	srl	a3,s0,a3
 	andi	a3,a3,15
@@ -198,17 +223,14 @@ putdx:
 	lbu	a0,0(a3)
 	call	putchar
 	srl	a0,s0,s1
-	lui	a5,%hi(.LC3)
 	andi	a0,a0,15
-	addi	a4,a5,%lo(.LC3)
-	add	a4,a4,a0
-	lbu	a0,0(a4)
-	j	.L41
+	j	.L43
 	.size	putdx, .-putdx
 	.align	2
 	.globl	putx
 	.type	putx, @function
 putx:
+	ssst
 	li	a1,0
 	tail	putdx
 	.size	putx, .-putx
@@ -216,6 +238,7 @@ putx:
 	.globl	putd
 	.type	putd, @function
 putd:
+	ssst
 	li	a1,1
 	tail	putdx
 	.size	putd, .-putd
@@ -223,6 +246,7 @@ putd:
 	.globl	printf
 	.type	printf, @function
 printf:
+	ssst
 	addi	sp,sp,-36
 	sw	a5,32(sp)
 	addi	a5,sp,16
@@ -235,79 +259,83 @@ printf:
 	sw	a3,24(sp)
 	sw	a4,28(sp)
 	sw	a5,0(sp)
-.L45:
+.L49:
 	lbu	a0,0(s0)
-	bnez	a0,.L51
-	lw	ra,12(sp)
+	bne	a0,zero,.L55
 	lw	s0,8(sp)
+	lw	ra,12(sp)
 	lw	s1,4(sp)
 	addi	sp,sp,36
+	ssld
 	jr	ra
-.L51:
+.L55:
 	li	a5,37
 	addi	s1,s0,1
-	bne	a0,a5,.L46
+	bne	a0,a5,.L50
 	lbu	a0,1(s0)
 	li	a5,115
-	bne	a0,a5,.L47
+	bne	a0,a5,.L51
 	lw	a5,0(sp)
 	lw	a0,0(a5)
 	addi	a4,a5,4
 	sw	a4,0(sp)
 	call	putstr
-.L48:
+.L52:
 	addi	s0,s1,1
-	j	.L45
-.L47:
+	j	.L49
+.L51:
 	li	a5,120
-	bne	a0,a5,.L49
+	bne	a0,a5,.L53
 	lw	a5,0(sp)
 	lw	a0,0(a5)
 	addi	a4,a5,4
 	sw	a4,0(sp)
 	call	putx
-	j	.L48
-.L49:
+	j	.L52
+.L53:
 	li	a5,100
-	bne	a0,a5,.L50
+	bne	a0,a5,.L54
 	lw	a5,0(sp)
 	lw	a0,0(a5)
 	addi	a4,a5,4
 	sw	a4,0(sp)
 	call	putd
-	j	.L48
-.L50:
+	j	.L52
+.L54:
 	call	putchar
-	j	.L48
-.L46:
+	j	.L52
+.L50:
 	call	putchar
 	mv	s1,s0
-	j	.L48
+	j	.L52
 	.size	printf, .-printf
 	.align	2
 	.globl	strncmp
 	.type	strncmp, @function
 strncmp:
+	ssst
 	addi	a2,a2,-1
 	li	a5,0
-.L55:
+.L59:
 	add	a4,a0,a5
 	lbu	a3,0(a4)
 	add	a4,a1,a5
 	lbu	a4,0(a4)
-	beq	a5,a2,.L54
-	beqz	a3,.L54
-	beqz	a4,.L54
+	beq	a5,a2,.L58
+	beq	a3,zero,.L58
+	beq	a4,zero,.L58
 	addi	a5,a5,1
-	beq	a3,a4,.L55
-.L54:
+	beq	a3,a4,.L59
+.L58:
 	sub	a0,a3,a4
+	ssld
 	ret
 	.size	strncmp, .-strncmp
 	.align	2
 	.globl	strcmp
 	.type	strcmp, @function
 strcmp:
+	ssst
 	li	a2,-1
 	tail	strncmp
 	.size	strcmp, .-strcmp
@@ -315,263 +343,283 @@ strcmp:
 	.globl	strlen
 	.type	strlen, @function
 strlen:
-	li	a5,0
-.L65:
-	add	a4,a0,a5
+	ssst
+	mv	a5,a0
+	li	a0,0
+.L71:
+	add	a4,a5,a0
 	lbu	a4,0(a4)
-	beqz	a4,.L64
-	addi	a5,a5,1
-	add	a4,a0,a5
-	bnez	a4,.L65
-.L64:
-	mv	a0,a5
+	bne	a4,zero,.L72
+	ssld
 	ret
+.L72:
+	addi	a0,a0,1
+	j	.L71
 	.size	strlen, .-strlen
 	.align	2
 	.globl	memcpy
 	.type	memcpy, @function
 memcpy:
+	ssst
 	li	a5,0
-.L72:
-	bne	a5,a2,.L73
+.L75:
+	bne	a5,a2,.L76
+	ssld
 	ret
-.L73:
+.L76:
 	add	a4,a1,a5
 	lbu	a3,0(a4)
 	add	a4,a0,a5
 	addi	a5,a5,1
 	sb	a3,0(a4)
-	j	.L72
+	j	.L75
 	.size	memcpy, .-memcpy
 	.align	2
 	.globl	memset
 	.type	memset, @function
 memset:
+	ssst
 	add	a2,a0,a2
 	mv	a5,a0
-.L75:
-	bne	a5,a2,.L76
+.L79:
+	bne	a5,a2,.L80
+	ssld
 	ret
-.L76:
+.L80:
 	addi	a5,a5,1
 	sb	a1,-1(a5)
-	j	.L75
+	j	.L79
 	.size	memset, .-memset
 	.align	2
 	.globl	strtok
 	.type	strtok, @function
 strtok:
+	ssst
 	addi	sp,sp,-20
 	sw	s0,12(sp)
 	mv	s0,a0
 	mv	a0,a1
-	sw	s1,8(sp)
+	sw	a1,0(sp)
 	sw	ra,16(sp)
-	mv	s1,a1
+	sw	s1,8(sp)
 	call	strlen
-	mv	a3,a0
-	bnez	s0,.L78
+	lw	a1,0(sp)
+	mv	a2,a0
+	bne	s0,zero,.L83
 	lui	a5,%hi(nxt.1625)
 	lw	s0,%lo(nxt.1625)(a5)
-	beqz	s0,.L79
-.L78:
-	mv	a5,s0
-.L80:
-	lbu	a4,0(a5)
-	bnez	a4,.L81
+	beq	s0,zero,.L84
+.L83:
+	mv	s1,s0
+.L85:
+	lbu	a5,0(s1)
+	bne	a5,zero,.L86
 	lui	a5,%hi(nxt.1625)
 	sw	zero,%lo(nxt.1625)(a5)
-	j	.L79
-.L81:
-	mv	a2,a3
-	mv	a0,a5
-	mv	a1,s1
-	sw	a3,4(sp)
-	sw	a5,0(sp)
+	j	.L84
+.L86:
+	mv	a0,s1
+	sw	a2,4(sp)
+	sw	a1,0(sp)
 	call	strncmp
-	lw	a5,0(sp)
-	lw	a3,4(sp)
-	addi	a4,a5,1
-	bnez	a0,.L82
-	sb	zero,0(a5)
-	lui	a5,%hi(nxt.1625)
-	sw	a4,%lo(nxt.1625)(a5)
-.L79:
+	lw	a1,0(sp)
+	lw	a2,4(sp)
+	addi	a5,s1,1
+	bne	a0,zero,.L87
+	lui	a4,%hi(nxt.1625)
+	sb	zero,0(s1)
+	sw	a5,%lo(nxt.1625)(a4)
+.L84:
 	mv	a0,s0
-	lw	ra,16(sp)
 	lw	s0,12(sp)
+	lw	ra,16(sp)
 	lw	s1,8(sp)
 	addi	sp,sp,20
+	ssld
 	jr	ra
-.L82:
-	mv	a5,a4
-	j	.L80
+.L87:
+	mv	s1,a5
+	j	.L85
 	.size	strtok, .-strtok
 	.align	2
 	.globl	atoi
 	.type	atoi, @function
 atoi:
-	li	a3,0
-	li	a5,0
-	li	a2,45
-.L88:
-	bnez	a0,.L90
-.L94:
-	bnez	a3,.L91
-.L87:
-	mv	a0,a5
+	ssst
+	mv	a3,a0
+	li	a2,0
+	li	a0,0
+	li	a1,45
+.L93:
+	bne	a3,zero,.L95
+.L99:
+	bne	a2,zero,.L96
+.L92:
+	ssld
 	ret
+.L100:
+	li	a2,1
+	j	.L94
 .L95:
-	li	a3,1
-	j	.L89
-.L90:
-	lbu	a4,0(a0)
-	beqz	a4,.L94
-	beq	a4,a2,.L95
-	slli	a1,a5,3
-	addi	a4,a4,-48
-	add	a4,a4,a1
-	slli	a5,a5,1
-	add	a5,a4,a5
-.L89:
-	addi	a0,a0,1
-	j	.L88
-.L91:
-	sub	a5,zero,a5
-	j	.L87
+	lbu	a5,0(a3)
+	beq	a5,zero,.L99
+	beq	a5,a1,.L100
+	addi	a5,a5,-48
+	slli	a4,a0,3
+	add	a4,a5,a4
+	slli	a5,a0,1
+	add	a0,a4,a5
+.L94:
+	addi	a3,a3,1
+	j	.L93
+.L96:
+	neg	a0,a0
+	j	.L92
 	.size	atoi, .-atoi
 	.align	2
 	.globl	xtoi
 	.type	xtoi, @function
 xtoi:
-	mv	a3,a0
-	li	a2,57
+	ssst
+	mv	a4,a0
+	li	a3,57
 	li	a0,0
-.L97:
-	beqz	a3,.L96
-	lbu	a5,0(a3)
-	bnez	a5,.L101
-.L96:
+.L103:
+	beq	a4,zero,.L102
+	lbu	a5,0(a4)
+	bne	a5,zero,.L107
+.L102:
+	ssld
 	ret
-.L101:
-	slli	a4,a0,4
-	bgtu	a5,a2,.L98
+.L107:
+	slli	a0,a0,4
+	bgtu	a5,a3,.L104
 	addi	a5,a5,-48
-.L105:
-	add	a0,a5,a4
-	addi	a3,a3,1
-	j	.L97
-.L98:
+.L112:
+	add	a0,a5,a0
+	addi	a4,a4,1
+	j	.L103
+.L104:
 	andi	a5,a5,95
 	addi	a5,a5,-55
-	j	.L105
+	j	.L112
 	.size	xtoi, .-xtoi
 	.align	2
 	.globl	mac
 	.type	mac, @function
 mac:
+	ssst
  #APP
 # 271 "stdio.c" 1
 	.word 0x00c5857F
 # 0 "" 2
  #NO_APP
+	ssld
 	ret
 	.size	mac, .-mac
 	.align	2
 	.globl	__umulsi3
 	.type	__umulsi3, @function
 __umulsi3:
+	ssst
 	mv	a5,a0
+	bltu	a0,a1,.L123
 	li	a0,0
-	bltu	a5,a1,.L108
-.L109:
-	bnez	a1,.L114
-	ret
-.L111:
+.L117:
+	beq	a1,zero,.L115
+	andi	a4,a1,1
+	beq	a4,zero,.L121
+	add	a0,a0,a5
+.L121:
+	slli	a5,a5,1
+	srli	a1,a1,1
+	j	.L117
+.L119:
 	andi	a4,a5,1
-	beqz	a4,.L110
+	beq	a4,zero,.L118
 	add	a0,a0,a1
-.L110:
+.L118:
 	srli	a5,a5,1
 	slli	a1,a1,1
-.L108:
-	bnez	a5,.L111
+.L116:
+	bne	a5,zero,.L119
+.L115:
+	ssld
 	ret
-.L114:
-	andi	a4,a1,1
-	beqz	a4,.L113
-	add	a0,a0,a5
-.L113:
-	slli	a5,a5,1
-	srli	a1,a1,1
-	j	.L109
+.L123:
+	li	a0,0
+	j	.L116
 	.size	__umulsi3, .-__umulsi3
 	.align	2
 	.globl	__mulsi3
 	.type	__mulsi3, @function
 __mulsi3:
+	ssst
 	addi	sp,sp,-12
 	sw	s1,0(sp)
 	sw	ra,8(sp)
 	sw	s0,4(sp)
 	li	s1,0
-	bgez	a0,.L123
-	sub	a0,zero,a0
+	bge	a0,zero,.L132
+	neg	a0,a0
 	li	s1,1
-.L123:
+.L132:
 	li	s0,0
-	bgez	a1,.L124
-	sub	a1,zero,a1
+	bge	a1,zero,.L133
+	neg	a1,a1
 	li	s0,1
-.L124:
+.L133:
 	call	__umulsi3
-	mv	a5,a0
-	beq	s1,s0,.L122
-	sub	a5,zero,a0
-.L122:
-	lw	ra,8(sp)
+	beq	s1,s0,.L131
+	neg	a0,a0
+.L131:
 	lw	s0,4(sp)
+	lw	ra,8(sp)
 	lw	s1,0(sp)
-	mv	a0,a5
 	addi	sp,sp,12
+	ssld
 	jr	ra
 	.size	__mulsi3, .-__mulsi3
 	.align	2
 	.globl	__udiv_umod_si3
 	.type	__udiv_umod_si3, @function
 __udiv_umod_si3:
-	li	a5,1
-	bnez	a1,.L133
-.L132:
+	ssst
+	mv	a5,a0
+	li	a4,1
 	mv	a0,a1
+	bne	a1,zero,.L142
+.L141:
+	ssld
 	ret
-.L134:
-	slli	a5,a5,1
-	slli	a1,a1,1
-.L133:
-	bgtu	a0,a1,.L134
-	mv	a4,a1
-	li	a1,0
-.L135:
-	beqz	a0,.L137
-	bnez	a5,.L138
-.L137:
-	bnez	a2,.L132
-	mv	a1,a0
-	j	.L132
-.L138:
-	bltu	a0,a4,.L136
-	sub	a0,a0,a4
-	add	a1,a1,a5
-.L136:
-	srli	a5,a5,1
+.L143:
+	slli	a4,a4,1
+	slli	a0,a0,1
+.L142:
+	bgtu	a5,a0,.L143
+	mv	a3,a0
+	li	a0,0
+.L144:
+	beq	a5,zero,.L146
+	bne	a4,zero,.L147
+.L146:
+	bne	a2,zero,.L141
+	mv	a0,a5
+	j	.L141
+.L147:
+	bltu	a5,a3,.L145
+	sub	a5,a5,a3
+	add	a0,a0,a4
+.L145:
 	srli	a4,a4,1
-	j	.L135
+	srli	a3,a3,1
+	j	.L144
 	.size	__udiv_umod_si3, .-__udiv_umod_si3
 	.align	2
 	.globl	__udivsi3
 	.type	__udivsi3, @function
 __udivsi3:
+	ssst
 	li	a2,1
 	tail	__udiv_umod_si3
 	.size	__udivsi3, .-__udivsi3
@@ -579,6 +627,7 @@ __udivsi3:
 	.globl	__umodsi3
 	.type	__umodsi3, @function
 __umodsi3:
+	ssst
 	li	a2,0
 	tail	__udiv_umod_si3
 	.size	__umodsi3, .-__umodsi3
@@ -586,42 +635,44 @@ __umodsi3:
 	.globl	__div_mod_si3
 	.type	__div_mod_si3, @function
 __div_mod_si3:
-	beqz	a1,.L161
+	beq	a1,zero,.L173
+	ssst
 	addi	sp,sp,-16
 	sw	s0,8(sp)
-	sw	ra,12(sp)
 	sw	s1,4(sp)
-	mv	a5,a2
-	li	s0,0
-	bgez	a0,.L149
-	sub	a0,zero,a0
-	li	s0,1
-.L149:
+	sw	ra,12(sp)
+	mv	s0,a2
 	li	s1,0
-	bgez	a1,.L150
-	sub	a1,zero,a1
+	bge	a0,zero,.L161
+	neg	a0,a0
 	li	s1,1
-.L150:
-	mv	a2,a5
+.L161:
+	li	a5,0
+	bge	a1,zero,.L162
+	neg	a1,a1
+	li	a5,1
+.L162:
+	mv	a2,s0
 	sw	a5,0(sp)
 	call	__udiv_umod_si3
-	lw	a5,0(sp)
 	mv	a1,a0
-	beqz	a5,.L151
-	beq	s0,s1,.L148
-	sub	a1,zero,a0
-.L148:
-	lw	ra,12(sp)
+	beq	s0,zero,.L163
+	lw	a5,0(sp)
+	beq	s1,a5,.L160
+	neg	a1,a0
+.L160:
 	lw	s0,8(sp)
+	lw	ra,12(sp)
 	lw	s1,4(sp)
 	mv	a0,a1
 	addi	sp,sp,16
+	ssld
 	jr	ra
-.L151:
-	beqz	s0,.L148
-	sub	a1,zero,a0
-	j	.L148
-.L161:
+.L163:
+	beq	s1,zero,.L160
+	neg	a1,a0
+	j	.L160
+.L173:
 	mv	a0,a1
 	ret
 	.size	__div_mod_si3, .-__div_mod_si3
@@ -629,6 +680,7 @@ __div_mod_si3:
 	.globl	__divsi3
 	.type	__divsi3, @function
 __divsi3:
+	ssst
 	li	a2,1
 	tail	__div_mod_si3
 	.size	__divsi3, .-__divsi3
@@ -636,6 +688,7 @@ __divsi3:
 	.globl	__modsi3
 	.type	__modsi3, @function
 __modsi3:
+	ssst
 	li	a2,0
 	tail	__div_mod_si3
 	.size	__modsi3, .-__modsi3
@@ -660,17 +713,10 @@ __modsi3:
 	.word	256
 	.word	1
 	.word	0
-	.section	.rodata.str1.4,"aMS",@progbits,1
-	.align	2
-.LC2:
-	.string	"(NULL)"
-	.zero	1
-.LC3:
-	.string	"0123456789abcdef"
 	.section	.sbss,"aw",@nobits
 	.align	2
 	.type	nxt.1625, @object
 	.size	nxt.1625, 4
 nxt.1625:
 	.zero	4
-	.ident	"GCC: (GNU) 9.0.0 20180818 (experimental)"
+	.ident	"GCC: (GNU) 9.2.0"
